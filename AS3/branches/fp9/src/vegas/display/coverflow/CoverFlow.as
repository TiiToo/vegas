/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
  The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at              http://www.mozilla.org/MPL/     Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the License.     The Original Code is VEGAS Framework.    The Initial Developer of the Original Code is  ALCARAZ Marc (aka eKameleon)  <ekameleon@gmail.com>.  Portions created by the Initial Developer are Copyright (C) 2004-2011  the Initial Developer. All Rights Reserved.    Contributor(s) :    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.  */package vegas.display.coverflow {    import core.maths.clamp;    import flash.display.Sprite;    import flash.events.Event;    import flash.geom.PerspectiveProjection;    import flash.geom.Point;    import flash.geom.Rectangle;    import flash.utils.setTimeout;    /**     * The cover flow container.     */    public class CoverFlow extends Sprite     {        /**         * Creates a new CoverFlow instance.         * @param width The width of the coverflow effect.         * @param auto Indicates if the coverflow effect is active when the coverflow is added in the display list.         * @param init A generic object containing properties with which to populate the newly instance. If this argument is null, it is ignored.         */        public function CoverFlow( size:Number = 740 , auto:Boolean = true , init:Object = null )        {            this.size = size ;                        _updateProjection() ;                        if ( auto )            {                addEventListener( Event.ADDED_TO_STAGE, _addedToStage );            }                        if ( init )            {                for (var prop:String in init)                {                    this[prop] = init[prop] ;                }            }        }                /**         * Specifies an angle, as a degree between 0 and 180, for the field of view in three dimensions.         */        public function get fieldOfView():Number        {            return transform.perspectiveProjection.fieldOfView ;         }                /**         * @private         */        public function set fieldOfView( value:Number ):void        {            _fieldOfView = clamp( isNaN(value) ? 80 : value , 0 , 180 ) ;            _updateProjection() ;        }                /**         * The index of the selected cover in the coverflow.         */        public function get index():int        {            return _index;        }                /**         * @private         */        public function set index( index:int ):void        {            if( index < 0 || index >= _covers.length )            {                return;            }            _index = index;            _arrange();            _startEasing();        }                /**         * Indicates the number of covers register in the coverflow container.         */        public function get length():int        {            return _covers.length ;        }                /**         * The offset angle value of the covers (default 45).         */        public function get offsetAngle():Number        {            return _offsetAngle ;        }                /**         * @private         */        public function set offsetAngle( angle:Number ):void        {            _offsetAngle = clamp( isNaN(angle) ? 45 : angle , 0 , 360 ) ;        }                /**         * The offset space between two covers in the left area of the coverflow.         */        public function get offsetCenterLeft():Number        {            return _offsetCenterLeft ;        }                /**         * @private         */        public function set offsetCenterLeft( value:Number ):void        {            _offsetCenterLeft = value ;        }                /**         * The offset space between two covers in the right area of the coverflow.         */        public function get offsetCenterRight():Number        {            return offsetCenterRight ;        }                /**         * @private         */        public function set offsetCenterRight( value:Number ):void        {            _offsetCenterRight = value ;        }                /**         * The offset value between two covers (default 100).         */        public function get offsetCover():Number        {            return _offsetCover ;        }                /**         * @private         */        public function set offsetCover( value:Number ):void        {            _offsetCover = value ;        }                /**         * The offset depth value of the covers (default 256).         */        public function get offsetDepth():Number        {            return _offsetDepth ;        }                /**         * @private         */        public function set offsetDepth( value:Number ):void        {            _offsetDepth = value ;        }                /**         * Indicates the size of the coverflow effect (visible area size).         */        public function get size():Number        {            return _size ;        }                /**         * @private         */        public function set size( value:Number ):void        {            _size = isNaN(value) ? 0 : value ;        }                /**         * Adds a new Cover in the coverflow.         */        public function addCover( cover:Cover ):void        {            if ( _covers.indexOf( cover) > -1 )            {                throw new ArgumentError( this + " add(" + cover + ") failed, the specified Corver is already register." ) ;             }            _covers.push( cover );            cover.visible = false;            if( _index > -1 )            {                _arrange();                _startEasing();                cover.hardSet();            }        }                /**         * Removes all childs in the container.         */        public function clear():void        {            _stopEasing() ;            var size:int = numChildren ;            while(--size > -1)            {                removeChildAt( size ) ;             }            _covers.length = 0 ;            _index = -1 ;        }                /**         * The collection (Vectors) of all Cover objects in this container.         * @private         */        private const _covers:Vector.<Cover> = new Vector.<Cover>() ;                /**         * @private         */        private var _fieldOfView:Number = 80 ;                /**         * @private         */        private var _index:int = -1;                /**         * @private         */        private var _offsetAngle:Number = 45 ;                /**         * @private         */        private var _offsetCenterLeft:Number = 40 ;                /**         * @private         */        private var _offsetCenterRight:Number = 144 ;                /**         * @private         */        private var _offsetCover:Number = 100 ;                /**         * @private         */        private var _offsetDepth:Number = 256 ;                /**         * @private         */        private var _projectionCenter:Point = new Point(0,32) ;                /**         * @private         */        private var _size:Number;                /**         * @private         */        private function _addedToStage( event:Event = null ):void        {            if( _index == -1 )            {                _index = 0  ;                _arrange( ) ;                _hardSet( ) ;                setTimeout( _darkOutside, 250 );            }        }                /**         * @private         */        private function _arrange():void        {            var n:int = _covers.length;                        if ( n == 0 )            {                return ;            }                        var c:Cover;            var p:CoverEntry;                        var i:int;                        ///// left side                        for( i = 0 ; i < index ; ++i )            {                c         = _covers[i];                p       = c.position ;                p.x     = -_offsetCenterLeft - ( index - i ) * _offsetCover  ;                p.z     = _offsetDepth;                p.alpha = -_offsetAngle;                addChild( c );            }                        ///// center                        c       = _covers[index] ;            p       = c.position ;            p.x     = 0 ;            p.z     = 0 ;            p.alpha = 0 ;                            addChild( c );                        ///// right side                        for( i = index + 1 ; i < n ; ++i )            {                c       = _covers[i];                p       = c.position ;                p.x     = _offsetCenterRight + ( i - index ) * _offsetCover;                p.z     = _offsetDepth;                p.alpha = _offsetAngle;                                addChildAt( c, 0 );            }        }                /**         * @private         */        private function _enterFrame( event:Event ):void        {            var complete:Boolean = true;            var i:int = 0;            var n:int = _covers.length;            for( ; i < n ; ++i )            {                if( !_covers[i].easeSet( ) )                {                    complete = false;                }            }            if( complete )            {                _stopEasing();            }            else            {                _darkOutside();            }        }                /**         * @private         */        private function _hardSet():void        {            var i:int = 0;            var n:int = _covers.length;                        for( ; i < n ; ++i )            {                _covers[i].hardSet( );            }        }                /**         * @private         */        private function _darkOutside():void        {            var n:int = _covers.length;                        if ( n == 0 )            {                return ;            }            var i:int ;            var c:Cover;            var r:Rectangle;            var w0:Number = _size * .5 ;            var w1:Number = _size * .25 ;            var wn:Number = 1 / ( w0 - w1 ) ;            for( ; i < n ; ++i )            {                c    = _covers[i];                r    = c.getRect( this );                r.x -= c.width / 2 ;                if( r.left < -w0 || r.right > w0 )                {                    c.visible = false ;                }                else if( r.left < -w1 )                {                    c.darkness = 1.0 + ( r.left + w1 ) * wn;                    c.visible  = true ;                }                else if( r.right > w1 )                {                    c.darkness = 1.0 - ( r.right - w1 ) * wn;                    c.visible  = true ;                }                else                {                    c.darkness = 1.0 ;                    c.visible  = true ;                }            }        }                /**         * @private         */        private function _startEasing():void        {            if ( hasEventListener(Event.ENTER_FRAME) )            {                return ;            }            addEventListener( Event.ENTER_FRAME, _enterFrame );        }                /**         * @private         */        private function _stopEasing():void        {            if ( hasEventListener(Event.ENTER_FRAME) )            {                removeEventListener( Event.ENTER_FRAME, _enterFrame );            }            _hardSet( );        }                /**         * @private         */        private function _updateProjection():void        {            var proj:PerspectiveProjection = new PerspectiveProjection() ;            proj.fieldOfView      = _fieldOfView      ;            proj.projectionCenter = _projectionCenter ;            transform.perspectiveProjection = proj ;        }    }}