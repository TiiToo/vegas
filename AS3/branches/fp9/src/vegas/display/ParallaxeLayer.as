/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
  The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at              http://www.mozilla.org/MPL/     Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the License.     The Original Code is VEGAS Framework.    The Initial Developer of the Original Code is  ALCARAZ Marc (aka eKameleon)  <ekameleon@gmail.com>.  Portions created by the Initial Developer are Copyright (C) 2004-2011  the Initial Developer. All Rights Reserved.    Contributor(s) :    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.  */package vegas.display {    import flash.display.DisplayObject;    import flash.geom.Point;    import flash.geom.Rectangle;        /**     * This class defines a layer in the Parallaxe container.     */    internal class ParallaxeLayer    {        /**         * Creates a new ParallaxeLayer instance.         * @param target The DisplayObject reference of the layer.         * @param dimension An optional Rectangle, Dimension or object with the numeric properties "width" and "height"          * to defines a custom area size of the layer. By default the target parameter is used to defines this property.         * @param offset The optional offset position of the layer (default [0,0]).         * @param scaling Indicates if the layer can be scalled.         */        public function ParallaxeLayer( target:DisplayObject , dimension:* = null , offset:Point = null , scaling:Boolean = false )        {            if ( target == null )            {                throw new ArgumentError( this + " constructor failed, the target DisplayObject parameter not must be null.") ;            }            this.target    = target ;            this.dimension = dimension ? dimension : new Rectangle(0,0,target.width, target.height) ;             this.offset    = offset ? offset : new Point(0,0) ;            this.scaling  = scaling ;        }                /**         * The dimension of the layer.          */        public var dimension:Rectangle ;                /**         * The offset of the layer.         */        public var offset:Point ;                /**         * Indicates if the layer can be zoomed.         */        public var scaling:Boolean ;                /**         * The DisplayObject target reference of the layer.         */        public var target:DisplayObject ;                /**         * The x current delta position of the layer.          */        public var tx:Number = 0 ;                /**         * The y current delta position of the layer.          */        public var ty:Number = 0 ;    }}