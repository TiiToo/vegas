/*  The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at              http://www.mozilla.org/MPL/     Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the License.     The Original Code is Vegas Framework.    The Initial Developer of the Original Code is  ALCARAZ Marc (aka eKameleon)  <ekameleon@gmail.com>.  Portions created by the Initial Developer are Copyright (C) 2004-2009  the Initial Developer. All Rights Reserved.    Contributor(s) :  */package examples{    import graphics.FillGradientStyle;        import system.data.maps.HashMap;        import vegas.display.Background;    import vegas.display.coverflow.Cover;    import vegas.display.coverflow.CoverFlow;        import flash.display.BitmapData;    import flash.display.Sprite;    import flash.display.StageScaleMode;    import flash.events.KeyboardEvent;    import flash.events.MouseEvent;    import flash.geom.Rectangle;    import flash.ui.Keyboard;    import flash.utils.getDefinitionByName;        [SWF(width="740", height="300", frameRate="30", backgroundColor="0x000000")]        /**     * Basic coverflow example based "suiton" library implementation.     */    public class CoverFlowExample extends Sprite     {        /**         * Creates a new CoverFlowExample instance.         */        public function CoverFlowExample()        {            ///////////// stage                        stage.scaleMode = StageScaleMode.NO_SCALE ;                        stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown) ;                        ///////////// container                        container = new Background() ;                        container.fill             = new FillGradientStyle( "linear" , [0x333333,0x666666] , [1, 1], [0, 255] )  ;            container.gradientRotation = 90   ;            container.useGradientBox   = true ;            container.w                = 740 ;            container.h                = 300 ;                        container.scrollRect = new Rectangle(0,0,740,300) ;                        addChild( container ) ;                        ///////////////// coverflow                        coverflow = new CoverFlow( 1500 , true ) ;                        coverflow.x = ( 740 - 200 ) / 2 ;            coverflow.y = 10;                        container.addChild( coverflow ) ;                        ///////////////// initialize                        var i:int ;            var l:int = 12 ;                        for( i = 0 ; i<l ; i++ )            {                createCover() ;            }                        ///////////////// select first cover                        coverflow.index = 6 ;        }                public var container:Background ;                public var count:uint ;                public var coverflow:CoverFlow ;                protected var covers:HashMap = new HashMap() ;                protected var init:Object =         {            reflectionSize  : 80 ,            reflectionAlpha : 0.6 ,            reflectionRatio : 0xEE ,            reflectionSpace : 0        };                protected function createCover():void        {            var clazz:Class ;            var cover:Cover ;            var thumb:BitmapData ;                        clazz = getDefinitionByName("Thumb" + count%6 ) as Class ;                        thumb = new clazz(200,200) as BitmapData ;                        cover = new Cover( thumb , init ) ;            cover.addEventListener( MouseEvent.CLICK , select ) ;                        covers.put( cover , count ) ;                        coverflow.addCover( cover ) ;                        coverflow.index ++ ;                        count++ ;        }                protected function keyDown(e:KeyboardEvent):void        {            var code:uint = e.keyCode ;            switch( code )            {                case Keyboard.RIGHT :                {                    coverflow.index ++ ;                    break ;                }                case Keyboard.LEFT :                {                    coverflow.index -- ;                    break ;                }                case Keyboard.UP :                {                    coverflow.index = 0 ;                    break ;                }                case Keyboard.DOWN :                {                    coverflow.index = coverflow.length - 1 ;                    break ;                }                case Keyboard.SPACE :                {                    createCover() ;                }                case Keyboard.PAGE_UP :                    {                    coverflow.size = 700 ;                }            }        }                protected function select( e:MouseEvent ):void        {            var cover:Cover = e.currentTarget as Cover ;            if( cover != null && covers.containsKey( cover ) )            {                coverflow.index = covers.get( cover ) ;            }            else            {                trace( "select failed the cover reference is not valid or null : " + cover) ;            }        }    }}