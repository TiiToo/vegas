/*  The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at              http://www.mozilla.org/MPL/     Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the License.     The Original Code is LunAS Library.    The Initial Developer of the Original Code is  ALCARAZ Marc (aka eKameleon)  <ekameleon@gmail.com>.  Portions created by the Initial Developer are Copyright (C) 2004-2010  the Initial Developer. All Rights Reserved.    Contributor(s) :    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.  */package lunas.components.bars {    import core.maths.clamp;    import core.maths.map;    import graphics.drawing.RectanglePen;    import graphics.geom.EdgeMetrics;    import lunas.CoreBuilder;    import lunas.events.ButtonEvent;    import lunas.logging.logger;    import flash.display.Shape;    import flash.display.Sprite;    import flash.events.Event;    import flash.events.MouseEvent;    import flash.geom.Rectangle;    /**     * The builder of the LevelBar component.     */    public class LevelBarBuilder extends CoreBuilder     {        /**         * Creates a new LevelBarBuilder instance.         * @param target the target of the component reference to build.         */        public function LevelBarBuilder( target:LevelBar )        {            super( target ) ;        }                /**         * Clear the view of the component.         */        public override function clear():void        {            _backgroundPen = null ;            _mediaPen      = null ;            _progressPen   = null ;            _background = null ;            _level      = null ;            _progress   = null ;            if ( target && target.hasEventListener(Event.ENTER_FRAME) )            {                target.removeEventListener( Event.ENTER_FRAME , dragging ) ;            }        }                /**         * Indicates the current level of the specified LevelBar.         */        public function getCurrentLevel( target:LevelBar , style:LevelBarStyle = null ):Number        {            var h:Number = 0 ;            var x:Number = _progress.mouseX ;            if ( style )            {                 h  = style.margin ? EdgeMetrics.filterNaNValue(style.margin.horizontal) : 0 ;            }            var r:Rectangle = _progress.getBounds(target) ;            var v:Number    = map( x , r.x , target.w - h , target.minimumLevel , target.maximumLevel ) ;            return clamp( v , target.minimumLevel , target.maximumLevel ) ;        }                /**         * Runs the build of the component.         */        public override function run( ...arguments:Array ):void        {            try            {                var bar:LevelBar = target as LevelBar ;                                _background = new Sprite() ;                _level      = new Shape() ;                _progress   = new Sprite() ;                                _backgroundPen = new RectanglePen( _background ) ;                _mediaPen      = new RectanglePen( _level      ) ;                _progressPen   = new RectanglePen( _progress   ) ;                                bar.addChild( _background ) ;                bar.addChild( _progress   ) ;                bar.addChild( _level      ) ;            }            catch( e:Error )            {                logger.warn(this + " update failed, " + e.message ) ;            }        }                /**         * Update the view of the component.         */        public override function update():void        {            try            {                var c:LevelBar      = target  as LevelBar ;                var s:LevelBarStyle = c.style as LevelBarStyle ;                                _backgroundPen.fill = s.backgroundFill ;                _backgroundPen.line = s.backgroundLine ;                _backgroundPen.draw( 0 , 0 , c.w , c.h ) ;                                _mediaPen.fill = s.levelFill ;                _mediaPen.line = s.levelLine ;                                _progressPen.fill = s.progressFill ;                _progressPen.line = s.progressLine ;                                _progress.buttonMode = s.buttonMode ;                _progress.useHandCursor = s.useHandCursor ;                                if ( s.buttonMode )                {                    registerProgress() ;                }                else                {                    unregisterProgress() ;                }            }            catch( e:Error )            {                logger.warn(this + " update failed, " + e.message ) ;            }        }                /**         * Invoked when the position of the bar is changed.         */        public function viewChanged():void         {            var w:Number ;            var h:Number ;                        var c:LevelBar      = target  as LevelBar ;            var s:LevelBarStyle = c.style as LevelBarStyle ;            var m:EdgeMetrics   = s.margin ;                         var horizontal:Number = EdgeMetrics.filterNaNValue( m.horizontal ) ;            var vertical:Number   = EdgeMetrics.filterNaNValue( m.vertical   ) ;            var l:Number = EdgeMetrics.filterNaNValue( m.left ) ;            var t:Number = EdgeMetrics.filterNaNValue( m.top )  ;                        h = c.h - vertical ;                        w = map( c.position ,c.minimum, c.maximum , 0 , (c.w - horizontal) )  ;                        _progress.visible   = c.position > 0 ;            _progress.x         = l ;            _progress.y         = t ;                        _progressPen.draw( 0 , 0 , w , h ) ;                        w = map( c.level , c.minimumLevel, c.maximumLevel , 0 , (c.w - horizontal) )  ;                        _level.visible   = c.level > 0 ;            _level.x         = l ;            _level.y         = t ;                        _mediaPen.draw( 0 , 0 , w , h ) ;        }                /**         * @private         */        protected var _background:Sprite ;                /**         * @private         */        protected var _current:Number ;                /**         * @private         */        protected var _backgroundPen:RectanglePen ;                /**         * @private         */        protected var _level:Shape ;                /**         * @private         */        protected var _mediaPen:RectanglePen ;                /**         * @private         */        protected var _memory:Number ;                /**         * @private         */        protected var _progress:Sprite ;                /**         * @private         */        protected var _progressPen:RectanglePen ;                /**         * @private         */        protected function dragging( e:Event = null ):void        {            var c:LevelBar      = target as LevelBar ;            var s:LevelBarStyle = c.style as LevelBarStyle ;            var x:Number        = _progress.mouseX ;            var y:Number        = _progress.mouseY ;            var r:Rectangle     = _progress.getBounds(target) ;            if( s.restrictHitTest )            {                if ( r.contains(x, y) )                {                    _current = getCurrentLevel( c , s ) ;                }                else                {                    _current = _memory ;                }            }            else            {                _current = getCurrentLevel( c , s ) ;            }            c.level = _current ;        }                /**         * @private         */        protected function mouseDown( e:MouseEvent ):void        {            var c:LevelBar = target as LevelBar ;            if ( c && !c.isLocked() )            {                c.dispatchEvent( new ButtonEvent( ButtonEvent.PRESS ) ) ;            }            c.lock() ;            _memory = _current = c.level ;            if ( c && c.stage )            {                c.stage.addEventListener( MouseEvent.MOUSE_UP , mouseUp );            }            _progress.addEventListener( Event.ENTER_FRAME , dragging ) ;        }                /**         * @private         */        protected function mouseUp( e:MouseEvent ):void        {            var type:String ;            var c:LevelBar = target  as LevelBar ;                        if ( c && c.stage )            {                c.stage.removeEventListener( MouseEvent.MOUSE_UP , mouseUp  );            }                        if( _progress.hasEventListener( Event.ENTER_FRAME ) )            {                _progress.removeEventListener( Event.ENTER_FRAME , dragging ) ;            }                        c.unlock() ;                        c.setLevel( _current ) ;                        if ( e.target == _progress )             {                type = ButtonEvent.RELEASE ;            }            else            {                type = ButtonEvent.RELEASE_OUTSIDE ;            }                        if ( !c.isLocked() )            {                c.dispatchEvent( new ButtonEvent( type ) ) ;            }        }                /**         * @private         */        protected function registerProgress():void        {            unregisterProgress() ;            if ( _progress )            {                _progress.addEventListener( MouseEvent.MOUSE_DOWN , mouseDown ) ;                _progress.addEventListener( MouseEvent.MOUSE_UP   , mouseUp   ) ;            }        }                /**         * @private         */        protected function unregisterProgress():void        {            if ( _progress )            {                _progress.removeEventListener( MouseEvent.MOUSE_DOWN , mouseDown ) ;                _progress.removeEventListener( MouseEvent.MOUSE_UP   , mouseUp   ) ;            }        }    }}