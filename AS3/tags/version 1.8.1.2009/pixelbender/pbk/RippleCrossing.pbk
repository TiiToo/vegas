/*
  Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the
  License.
  
  The Original Code is [maashaack framework].
  
  The Initial Developers of the Original Code are
  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.
  Portions created by the Initial Developers are Copyright (C) 2006-2010
  the Initial Developers. All Rights Reserved.
  
  Contributor(s):
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the LGPL or the GPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
*/

<languageVersion : 1.0;>

kernel RippleCrossing
<   
    namespace   : "graphics.filters";
    vendor      : "ALCARAZ Marc (eKameleon)";
    version     : 1 ;
    description : "A transition between two pictures with ripple effect." ; 
>
{
    /**
     * The amount value of the transition betwen 0 and 1.
     */
    parameter float amount
    <
        defaultValue : float( 0.0 ) ;
        minValue     : float( 0.0 ) ;
        maxValue     : float( 1.0 ) ;
    >;
    
    /**
     * The amplitude of the ripple effect between 0 and 1 (default 0.05)
     */
    parameter float amplitude
    <
        defaultValue : float( 0.05 ) ;
        minValue     : float( 0.00 ) ;
        maxValue     : float( 1.00 ) ;
    >;
    
    /**
     * The width and height values to set the effect area.
     */
    parameter float2 area
    <
        defaultValue : float2(  320.0 ,  240.0 ) ;
        minValue     : float2(    0.0 ,    0.0 ) ;
        maxValue     : float2( 2800.0 , 2800.0 ) ;
    >;
    
    /**
     * The offset x and y position center of the effect (value between 0.0 and 1.0 and default 0.5).
     */
    parameter float2 center
    <
        defaultValue : float2( 0.5 , 0.5 ) ;
        minValue     : float2( 0.0 , 0.0 ) ;
        maxValue     : float2( 1.0 , 1.0 ) ;
    >;
    
    /**
     * The frequency of the ripple effect (value between 0.0 and 1.0 and default 0.2).
     */
    parameter float frequency
    <
        defaultValue : float( 0.2 ) ;
        minValue     : float( 0.0 ) ;
        maxValue     : float( 1.0 ) ;
    >;
    
    /**
     * The speed of the ripple effect (value between 0.0 and 1.0 and default 0.1).
     */
    parameter float speed
    <
        defaultValue : float( 0.1 ) ;
        minValue     : float( 0.0 ) ;
        maxValue     : float( 1.0 ) ;
    >;
    
    /**
     * The picture to start the transition.
     */
    input image4 from;
    
    /**
     * The picture to finish the transition.
     */
    input image4 to;
    
    /**
     * The output reference.
     */
    output pixel4 result ;
    
    void evaluatePixel()
    {
        float2 uv = ( outCoord() / area ) - center ;
        
        float f = frequency * 100.0 ;
        float s = speed     * 100.0 ;
        
        float  dist  = length( uv ) ;
        float2 ratio = uv / dist ;

        float wave = cos( f * dist - s * amount ) ;
        
        float offset1  = amount * wave * amplitude ;
        float offset2  = ( 1.0 - amount ) * wave * amplitude ;

        float2 uv1     = center + ratio * ( dist + offset1 ) ;
        float2 uv2     = center + ratio * ( dist + offset2 ) ;

        float4 center1 = sampleLinear( from , uv1 * area ) ; 
        float4 center2 = sampleLinear( to   , uv2 * area ) ;

        result = mix( center1 , center2 , amount ) ;
    }
}