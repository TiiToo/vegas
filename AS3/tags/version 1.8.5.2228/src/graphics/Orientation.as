/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2011  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package graphics {    /**     * Constants defining layout orientation options.     */    public class Orientation    {        /**         * Constant indicating a bottom-to-top layout orientation (4).         */        public static const BOTTOM_TO_TOP:uint = 4;                /**         * Constant indicating a none layout orientation, use the default orientation (0).         */        public static const NONE:uint = 0;                /**         * Constant indicating a left-to-right layout orientation (1).         */        public static const LEFT_TO_RIGHT:uint = 1;                /**         * Constant indicating a right-to-left layout orientation (2).         */        public static const RIGHT_TO_LEFT:uint = 2;                /**         * Constant indicating a bottom-to-top layout orientation (8).         */        public static const TOP_TO_BOTTOM:uint = 8;                /**         * Constant indicating a left-to-right layout orientation (5).         */        public static const LEFT_TO_RIGHT_BOTTOM_TO_TOP:uint = 5;                /**         * Constant indicating a left-to-right and top-to-bottom layout orientation (9).         */        public static const LEFT_TO_RIGHT_TOP_TO_BOTTOM:uint = 9;                /**         * Constant indicating a right-to-left layout orientation (6).         */        public static const RIGHT_TO_LEFT_BOTTOM_TO_TOP:uint = 6;                /**         * Constant indicating a right-to-left and top-to-bottom layout orientation (10).         */        public static const RIGHT_TO_LEFT_TOP_TO_BOTTOM:uint = 10;                /**         * Returns the string representation of the specified Align value passed in argument.         * <p><b>Example :</b></p>         * <pre class="prettyprint">         * import graphics.Align ;         * trace( Align.toString(Align.LEFT)) ; // "l"         * trace( Align.toString(Align.TOP_LEFT)) ; // "tl"         * trace( Align.toString(Align.RIGHT_BOTTOM)) ; // "rb"         * </pre>         * @return the string representation of the specified Align value passed in argument.         */        public static function toString( value:uint ):String         {            switch ( value )             {                case BOTTOM_TO_TOP               : return "btt"    ;                case LEFT_TO_RIGHT               : return "ltr"    ;                case RIGHT_TO_LEFT               : return "rtl"    ;                case TOP_TO_BOTTOM               : return "ttb"    ;                case LEFT_TO_RIGHT_BOTTOM_TO_TOP : return "ltrbtt" ;                case LEFT_TO_RIGHT_TOP_TO_BOTTOM : return "ltrttb" ;                case RIGHT_TO_LEFT_BOTTOM_TO_TOP : return "rtlbtt" ;                case RIGHT_TO_LEFT_TOP_TO_BOTTOM : return "rtlttb" ;                default                          : return ""       ;            }        }                /**         * Returns <code class="prettyprint">true</code> if the passed-in uint argument is a valid Orientation value else returns <code class="prettyprint">false</code>.         * @return <code class="prettyprint">true</code> if the passed-in uint argument is a valid Orientation value else returns <code class="prettyprint">false</code>.         */        public static function validate( value:uint ):Boolean         {            var a:Array =             [                 BOTTOM_TO_TOP , LEFT_TO_RIGHT ,                 RIGHT_TO_LEFT , TOP_TO_BOTTOM ,                LEFT_TO_RIGHT_BOTTOM_TO_TOP ,                LEFT_TO_RIGHT_TOP_TO_BOTTOM ,                RIGHT_TO_LEFT_BOTTOM_TO_TOP ,                RIGHT_TO_LEFT_TOP_TO_BOTTOM            ] ;            return a.indexOf(value) > -1 ;        }    }}