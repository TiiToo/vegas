/*  The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at              http://www.mozilla.org/MPL/     Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the License.     The Original Code is LunAS Library.    The Initial Developer of the Original Code is  ALCARAZ Marc (aka eKameleon)  <ekameleon@gmail.com>.  Portions created by the Initial Developer are Copyright (C) 2004-2010  the Initial Developer. All Rights Reserved.    Contributor(s) :    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.  */package lunas.components.buttons {    import graphics.filters.Filters;    import graphics.transitions.TweenTo;    import lunas.events.ButtonEvent;    import system.process.Action;    import flash.display.DisplayObject;    /**     * The builder of the BitmapFilterButton component.     */    public class BitmapFilterButtonBuilder extends FrameLabelButtonBuilder    {        /**         * Creates a new BitmapFilterButtonBuilder instance.         * @param target the target of the component reference to build.         */        public function BitmapFilterButtonBuilder( target:DisplayObject )        {            super( target );            tween = new TweenTo() ;            tween.changeIt.connect( changeFilter ) ;            tween.finishIt.connect( finishFilter ) ;            filters = new Filters() ;        }                /**         * Clear the view of the component.         */        public override function clear():void        {            filters.removeFilter() ;            filters.display = null ;        }                /**         * Invoked when the button is down.         */        public function disabled( e:ButtonEvent ):void        {            if ( tween && tween.running )            {                tween.stop() ;            }            filters.removeFilter() ;        }                /**         * Invoked when the button is down.         */        public function down( e:ButtonEvent ):void        {            if ( tween.running )            {                tween.stop() ;            }            var button:BitmapFilterButton     = target as BitmapFilterButton ;            var style:BitmapFilterButtonStyle = button.style as BitmapFilterButtonStyle ;            if ( style && style.useFilter && style.filter )            {                filters.removeFilter( style.filter ) ;                filters.synchronise() ;                filters.addFilter( style.filter ) ;                                tween.duration   = style.filterDuration ;                tween.easing     = style.filterEasing ;                tween.from       = style.filterFromSelected ;                tween.target     = style.filter ;                tween.to         = style.filterToSelected ;                tween.useSeconds = style.filterUseSeconds ;                tween.run() ;            }        }                /**         * Initialize all register type of this builder.         */        public override function initType():void        {            registerType( ButtonEvent.DISABLED , disabled ) ;            registerType( ButtonEvent.OVER     , over ) ;            registerType( ButtonEvent.DOWN     , down ) ;            registerType( ButtonEvent.UP   ) ;        }                /**         * Invoked when the button is over.         */        public function over( e:ButtonEvent ):void        {            if ( tween.running )            {                tween.stop() ;            }            var button:BitmapFilterButton     = target as BitmapFilterButton ;            var style:BitmapFilterButtonStyle = button.style as BitmapFilterButtonStyle ;            if ( style && style.useFilter && style.filter )            {                filters.removeFilter( style.filter ) ;                filters.synchronise() ;                filters.addFilter( style.filter ) ;                                tween.duration   = style.filterDuration ;                tween.easing     = style.filterEasing ;                tween.from       = style.filterFromOver ;                tween.target     = style.filter ;                tween.to         = style.filterToOver ;                tween.useSeconds = style.filterUseSeconds ;                tween.run() ;            }        }                /**         * Run the builder.         */        public override function run( ...arguments:Array ):void        {            filters.display = target ;        }                /**         * The filters buffer of the builder.         */        protected var filters:Filters ;                /**         * The tween reference of this builder.         */        protected var tween:TweenTo ;                /**         * @private         */        protected function changeFilter( action:Action ):void        {            filters.update() ;        }                /**         * @private         */        protected function finishFilter( action:Action ):void        {            var button:BitmapFilterButton     = target as BitmapFilterButton ;            var style:BitmapFilterButtonStyle = button.style as BitmapFilterButtonStyle ;            if ( filters && style.filter )            {                filters.removeFilter( style.filter ) ;            }        }    }}