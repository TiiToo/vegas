/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2010  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package graphics.drawing {    import system.hack;        import flash.display.GraphicsPathCommand;    import flash.display.GraphicsPathWinding;        /**     * Draws a rough edges rectangle.     * <p><b>Example :</b></p>     * <pre class="prettyprint">     * import flash.display.Shape ;     *      * import graphics.Align ;      * import graphics.FillStyle ;     * import graphics.drawing.RoughEdgedRectanglePen ;     *      * var shape:Shape = new Shape() ;     * shape.x = 740 / 2 ;     * shape.y = 420 / 2 ;     *      * addChild( shape ) ;     *      * var pen:RoughEdgedRectanglePen = new RoughEdgedRectanglePen( shape ) ;     *      * pen.fill = new FillStyle( 0xFF0000 , 0.5 ) ;     *      * pen.draw( 0, 0, 320, 200, 4, 50,  Align.CENTER ) ;     * </pre>     */    public dynamic class RoughEdgedRectanglePen extends RectanglePen     {        use namespace hack ;                /**         * Creates a new RoundedRectanglePen instance.         * @param graphic The Graphics reference to control with this helper. You can passed-in a Shape or Sprite/MovieClip reference in argument.         * @param x (optional) The x position of the pen. (default 0)         * @param y (optional) The y position of the pen. (default 0)         * @param width (optional) The width of the pen. (default 0)         * @param height (optional) The height of the pen. (default 0)         * @param distortion (optional) The amount of edges distortion.         * @param density (optional) The density of distored vertexes.          * @param align (optional) The align value of the pen. (default Align.TOP_LEFT)         */        public function RoughEdgedRectanglePen(graphic:*, x:Number = 0, y:Number = 0, width:Number = 0, height:Number = 0, distortion:int = 2, density:int = 12, align:uint = 10)        {            super( graphic );            setPen(  x, y, width, height, distortion, density, align ) ;         }                /**         *  The density of distored vertexes         */        public var density:Number ;                /**         * The amount of edges distortion.         */        public var distortion:Number ;                /**         * This method contains the basic drawing shape algorithm.         */        public override function drawShape():void        {            var hRatio:Number = density / width  ;            var vRatio:Number = density / height ;                        var ratio:Number = ( hRatio >= vRatio ) ? hRatio : vRatio ;                        _dhorizontal = width  * ratio ;            _dvertical   = height * ratio ;                        if (_dhorizontal%2 != 0)             {                _dhorizontal++ ;            }            if ( _dvertical % 2 != 0 )            {                _dvertical++ ;            }                        var i:int ;            var commands: Vector.<int> = new Vector.<int>();            var coord: Vector.<Number> = new Vector.<Number>();                                    _refreshAlign() ;                        commands[0] = GraphicsPathCommand.MOVE_TO ;            coord.push( _x ) ;            coord.push( _y ) ;                        // top                        for ( i = 0 ; i < _dhorizontal; i++ )             {                if ( i%2 == 0 )                {                    commands.push(GraphicsPathCommand.LINE_TO);                    coord.push( _x + (i / _dhorizontal * width ) ) ;                }                else                {                    coord.push( _y + Math.random() * distortion ) ;                }            }                        // right                         for (i = 0; i < _dvertical; i++)             {                if ( i%2 ==0 )                {                    commands.push( GraphicsPathCommand.LINE_TO ) ;                    coord.push( _x + -distortion/2 + width + Math.random() * distortion ) ;                 }                else                {                    coord.push( _y + ( i / _dvertical * height ) ) ;                }            }                                    //bottom                        for ( i = 0 ; i < _dhorizontal ; i++ )             {                if ( i%2 == 0 )                {                    commands.push( GraphicsPathCommand.LINE_TO ) ;                    coord.push( _x + ( width - ( i / _dhorizontal * width ) ) ) ;                }                else                {                    coord.push( _y + ( -distortion / 2 + height + Math.random() * distortion ) ) ;                }            }                        // left                        for (i = 0; i < _dvertical; i++)             {                if (i%2==0)                {                    commands.push( GraphicsPathCommand.LINE_TO ) ;                    coord.push( _x + ( Math.random() * distortion ) ) ;                }                else                {                    coord.push( _y + ( height - ( i / _dvertical * height ) ) ) ;                }            }            _graphics.drawPath( commands , coord , GraphicsPathWinding.EVEN_ODD ) ;        }                /**         * Sets the shape options to defined all values to draw the shape.         */        public override function setPen( ...args:Array  ):void         {            super.setPen( args[0], args[1], args[2], args[3], args[6] ) ;            if ( args[4] != null && args[4] is Number )            {                this.distortion = isNaN( args[4] ) ? 0 : args[4] ;            }            if ( args[5] != null && args[5] is Number )            {                this.density = args[5] ;            }        }                /**         * @private         */        private var _dhorizontal:int;                /**         * @private         */        private var _dvertical: int;    }}