/*  The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at              http://www.mozilla.org/MPL/     Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the License.     The Original Code is PEGAS Framework.    The Initial Developer of the Original Code is  ALCARAZ Marc (aka eKameleon)  <ekameleon@gmail.com>.  Portions created by the Initial Developer are Copyright (C) 2004-2009  the Initial Developer. All Rights Reserved.    Contributor(s) :    */package pegas.colors {    import system.Cloneable;    import system.Equatable;    import system.Reflection;    import system.Serializable;    import system.hack;    import system.numeric.Mathematics;    /**     * A system which represents color as Hue, Saturation and Value.       * <p>Hue is what is seen as the color.</p>     * <p>Saturation is how “pure” the color is.  0% is grey and 100% is a pure color.</p>     * <p>Value represents the brightness.</p>      */    public class HSV implements Cloneable, Equatable, Serializable    {        use namespace hack ;                /**         * Creates a new HSV instance.         * @param h The hue component (between 0 and 360).         * @param s The saturation component (between 0 and 1).         * @param s The brightness value component of the hsv color (between 0 and 1).         */        public function HSV( h:Number = 0 , s:Number = 0 , v:Number = 0 )        {            this.h = h ;            this.s = s ;            this.v = v ;        }                /**         * The hue component (between 0 and 360).         */        public function get h():Number        {            return _h ;        }                /**         * @private         */        public function set h( value:Number ):void        {            _h = isNaN(value) ? 0 : value ;            _h = (_h % 360 + 360 ) % 360  ;        }                 /**         * The saturation component (between 0 and 1).         */        public function get s():Number        {            return _s ;        }                /**         * @private         */        public function set s( value:Number ):void        {            _s = Mathematics.clamp( isNaN(value) ? 0 : value , 0 , 1 ) ;        }                 /**         * The brightness value component of the hsv color (between 0 and 1).         */        public function get v():Number        {            return _v ;        }                /**         * @private         */        public function set v( value:Number ):void        {            _v = Mathematics.clamp( isNaN(value) ? 0 : value , 0 , 1 ) ;        }                 /**         * Creates and returns a shallow copy of the object.         * @return A new object that is a shallow copy of this instance.         */            public function clone():*         {            return new HSV( _h , _s , _v ) ;        }                /**         * Compares the specified object with this object for equality.         * @return <code class="prettyprint">true</code> if the the specified object is equal with this object.         */        public function equals( o:* ):Boolean        {            if ( o == this )            {                return true ;            }            else if ( o is HSV )            {                return ( (o as HSV)._h == _h ) && ( (o as HSV)._s == _s ) && ( (o as HSV)._v == _v ) ;            }            else            {                return false ;            }        }                /**         * Sets the hsv components (h,s,v)         */        public function set( ...args:Array ):void        {            h = Number( args[0] ) ;            s = Number( args[1] ) ;            v = Number( args[2] ) ;        }                /**         * Converts an object to an equivalent Object value.         * @return the Object representation of the instance.         */        public function toObject():Object         {            return { h:h , s:s , v:v } ;          }                /**         * Returns the source code string representation of the object.         * @return the source code string representation of the object.         */        public function toSource( indent:int = 0 ):String        {            return "new " + Reflection.getClassPath(this) + "(" + h.toString() + "," + s.toString() + "," + v.toString() + ")" ;         }                /**         * Returns a String representation of the object.         * @return a String representation of the object.         */        public function toString():String        {            return "[HSV h:" + h + " s:" + s + " v:" + v + "]";        }                /**         * @private         */        hack var _h:Number ;                /**         * @private         */                hack var _s:Number ;                /**         * @private         */        hack var _v:Number ;    }}