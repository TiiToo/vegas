/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2010  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package system.process {    import core.reflect.getClassName;    /**     * A task-group is a collection with a finite or infinite number of actions.     */    public class TaskGroup extends CoreAction implements Resumable, Startable, Stoppable    {        /**         * Creates a new TaskGroup instance.         * @param length The initial length (number of elements) of the Vector. If this parameter is greater than zero, the specified number of Vector elements are created and populated with the default value appropriate to the base type (null for reference types).         * @param fixed Whether the chain length is fixed (true) or can be changed (false). This value can also be set using the fixed property.         * @param mode Specifies the mode of the chain. The mode can be "normal" (default), "transient" or "everlasting".         * @param actions A dynamic object who contains Action references to initialize the chain.         */        public function TaskGroup( length:uint = 0 , fixed:Boolean = false , mode:String = "normal" , actions:* = null )        {            _actions  = new Vector.<ActionEntry>( length , fixed ) ;            this.mode = mode ;            if ( actions )            {                for each( var action:* in actions )                {                    addAction( action as Action ) ;                }            }        }                /**         * Determinates the "everlasting" mode of the chain. In this mode the action register in the task-group can't be auto-remove.         */        public static const EVERLASTING:String = "everlasting" ;                /**         * Determinates the "normal" mode of the chain. In this mode the task-group has a normal life cycle.         */        public static const NORMAL:String = "normal" ;                /**         * Determinates the "transient" mode of the chain. In this mode all actions are strictly auto-remove in the task-group when are invoked.         */        public static const TRANSIENT:String = "transient" ;                /**         * Indicates whether the group length is fixed (true) or can be changed (false). This value can also be set using the fixed property.         */        public function get fixed():Boolean        {            return _actions.fixed ;        }                /**         * @private         */        public function set fixed( bool:Boolean ):void        {            _actions.fixed = bool ;        }                /**         * Indicates the numbers of actions register in the group.         */        public function get length():uint        {            return _actions.length ;        }                /**         * @private         */        public function set length( value:uint ):void        {            dispose() ;            var old:uint  = _actions.length ;            _actions.length = value ;            var l:int = _actions.length ;            if ( l > 0 )            {                var e:ActionEntry ;                while( --l > -1 )                {                    e = _actions[l] as ActionEntry ;                    if ( e && e.action )                    {                        e.action.finishIt.connect( next ) ;                    }                }            }            else if ( old > 0 )             {                 notifyCleared() ; // clear notification            }        }                /**         * Determinates the mode of the chain. The mode can be "normal", "transient" or "everlasting".         * @see TaskGroup.NORMAL, TaskGroup.EVERLASTING, TaskGroup.TRANSIENT         */        public function get mode():String        {            return _mode ;        }                /**         * @private         */        public function set mode( value:String ):void        {            _mode = ( value == TRANSIENT || value == EVERLASTING ) ? value : NORMAL ;        }                /**         * Indicates if the chain is stopped.         */        public function get stopped():Boolean        {            return _stopped ;        }                /**         * Insert an action in the chain.         * @param priority Determinates the priority level of the action in the chain.         * @param autoRemove Apply a removeAction after the first finish notification.         * @return <code class="prettyprint">true</code> if the insert is success.         */        public function addAction( action:Action , priority:uint = 0 , autoRemove:Boolean = false ):Boolean         {            if ( action )            {                action.finishIt.connect( next ) ;                _actions.push( new ActionEntry( action , priority , autoRemove ) ) ;                shellSort(_actions) ;                return true ;            }            return false ;        }                /**         * Returns a shallow copy of this object.         * @return a shallow copy of this object.         */        public override function clone():*        {            var clone:TaskGroup = new TaskGroup( 0 , false , _mode, _actions.length > 0 ? toVector() : null ) ;            clone.fixed = _actions.fixed ;            return clone ;        }                /**         * Dispose the chain and disconnect all actions but don't remove them.         */        public function dispose():void        {            var l:int = _actions.length ;            if ( l > 0 )            {                var e:ActionEntry ;                while( --l > -1 )                {                    e = _actions[l] as ActionEntry ;                    if ( e && e.action )                    {                        e.action.finishIt.disconnect( next ) ;                    }                }            }        }                /**         * Returns the action register in the chain at the specified index value or <code>null</code>.         * @return the action register in the chain at the specified index value or <code>null</code>.         */        public function getActionAt( index:uint ):Action         {            if ( _actions.length > 0 && index < _actions.length )            {                return (_actions[index] as ActionEntry).action ;            }            return null ;        }                /**         * Returns <code class="prettyprint">true</code> if the specified Action is register in the chain.         * @return <code class="prettyprint">true</code> if the specified Action is register in the chain.         */        public function hasAction( action:Action ):Boolean        {            if ( action )            {                if ( _actions.length > 0 )                {                    var e:ActionEntry ;                    var l:int = _actions.length ;                    while( --l > -1 )                    {                        e = _actions[l] as ActionEntry ;                        if ( e && e.action == action )                        {                            return true ;                        }                    }                }            }            return false ;        }                /**         * Returns <code>true</code> if the chain is empty.         * @return <code>true</code> if the chain is empty.         */        public function isEmpty():Boolean        {            return _actions.length == 0 ;        }                /**         * Remove a specific action register in the chain and if the passed-in argument is null all actions register in the chain are removed.          * If the chain is running the stop() method is called.         * @return <code class="prettyprint">true</code> if the method success.         */        public function removeAction( action:Action = null ):Boolean         {            stop() ;            if ( _actions.length > 0 )            {                if ( action )                {                    var e:ActionEntry ;                    var l:int = _actions.length ;                    while( --l > -1 )                    {                        e = _actions[l] as ActionEntry ;                        if ( e && e.action == action )                        {                            action.finishIt.disconnect( next ) ;                            _actions.splice( l , 1 ) ;                            return true ;                        }                    }                }                else                {                    dispose() ;                    _actions.length = 0 ;                    notifyCleared() ;                    return true ;                }            }            return false ;        }                /**         * Resume the chain.         */        public function resume():void         {            //        }                /**         * Sets the internal Vector of the group.         * @param length The initial length (number of elements) of the Vector. If this parameter is greater than zero, the specified number of Vector elements are created and populated with the default value appropriate to the base type (null for reference types).         * @param fixed Whether the chain length is fixed (true) or can be changed (false). This value can also be set using the fixed property.         */        public function setup( length:uint = 0, fixed:Boolean = false ):void        {             _actions.length = length ;             _actions.fixed  = fixed ;        }                /**         * Starts the chain.         */        public function start():void         {            run() ;        }                /**         * Stops the task group.         */        public function stop():void        {            //        }                /**         * Returns the Array representation of the chain.         * @return the Array representation of the chain.         */        public function toArray():Array        {            if ( _actions.length > 0 )            {                var i:int ;                var e:ActionEntry ;                var r:Array = [] ;                var l:int = _actions.length ;                for( i ; i<l ; i++ )                {                    e = _actions[i] as ActionEntry ;                    if ( e && e.action )                    {                        r[r.length] = e.action ;                    }                }                return r ;            }            else            {                return [] ;            }        }                /**         * Returns the String representation of the object.         * @return the String representation of the object.         */        public function toString( verbose:Boolean = false ):String        {            var name:String = getClassName(this) ;            var s:String = "[" + name ;            if ( verbose )            {                if ( _actions.length > 0 )                {                    s += "<" ;                    var i:int ;                    var e:ActionEntry ;                    var l:int = _actions.length ;                    var r:Vector.<Action> = new Vector.<Action>() ;                    for( i ; i<l ; i++ )                    {                        e = _actions[i] as ActionEntry ;                        r[r.length] = ( e && e.action ) ? e.action : null ;                    }                    s += r.toString() ;                    s += ">" ;                }            }            s += "]" ;            return s ;        }                /**         * Returns the Vector (of Action) representation of the chain.         * @return the Vector (of Action) representation of the chain.         */        public function toVector( fixed:Boolean = false ):Vector.<Action>        {            if ( _actions.length > 0 )            {                var i:int ;                var e:ActionEntry ;                var l:int = _actions.length ;                var r:Vector.<Action> = new Vector.<Action>() ;                for( i ; i<l ; i++ )                {                    e = _actions[i] as ActionEntry ;                    if ( e && e.action )                    {                        r[r.length] = e.action ;                    }                }                return r ;            }            else            {                return new Vector.<Action>() ;            }        }                /**         * @private         */        protected var _actions:Vector.<ActionEntry> ;                /**         * @private         */        protected var _mode:String ;                /**         * @private         */        protected var _stopped:Boolean ;                /**         * Invoked when a task is finished.         */        protected function next( action:Action = null ):void         {            //        }                /**         * Use a shell sort algorithm to sort the Vector of ActionEntry (http://en.wikipedia.org/wiki/Shell_sort). The sort method with a basic PriorityComparator.compare method failed ?         * @private         */        protected function shellSort( data:Vector.<ActionEntry> ):void         {            if( data )            {                var temp:ActionEntry ;                var i:int ;                var j:int ;                var l:int = data.length ;                var inc:int = int( l / 2 + 0.5 ) ;                while( inc )                 {                    for( i = inc ; i<l ; i++ )                     {                        temp = data[i] ;                         j    = i ;                        while( j >= inc && data[int(j - inc)].priority < temp.priority )                         {                            data[j] = data[int(j - inc)] ;                            j = int(j - inc);                        }                        data[j] = temp ;                    }                    inc = int(inc / 2.2 + 0.5);                }            }        }    }}