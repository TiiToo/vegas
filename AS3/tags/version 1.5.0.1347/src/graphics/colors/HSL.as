/*  Version: MPL 1.1/GPL 2.0/LGPL 2.1   The contents of this file are subject to the Mozilla Public License Version  1.1 (the "License"); you may not use this file except in compliance with  the License. You may obtain a copy of the License at  http://www.mozilla.org/MPL/    Software distributed under the License is distributed on an "AS IS" basis,  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License  for the specific language governing rights and limitations under the  License.    The Original Code is [maashaack framework].    The Initial Developers of the Original Code are  Zwetan Kjukov <zwetan@gmail.com> and Marc Alcaraz <ekameleon@gmail.com>.  Portions created by the Initial Developers are Copyright (C) 2006-2009  the Initial Developers. All Rights Reserved.    Contributor(s):    Alternatively, the contents of this file may be used under the terms of  either the GNU General Public License Version 2 or later (the "GPL"), or  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),  in which case the provisions of the GPL or the LGPL are applicable instead  of those above. If you wish to allow use of your version of this file only  under the terms of either the GPL or the LGPL, and not to allow others to  use your version of this file under the terms of the MPL, indicate your  decision by deleting the provisions above and replace them with the notice  and other provisions required by the LGPL or the GPL. If you do not delete  the provisions above, a recipient may use your version of this file under  the terms of any one of the MPL, the GPL or the LGPL.*/package graphics.colors {    import system.Reflection;    import system.hack;    import system.numeric.Mathematics;        /**     * A system which represents color as Hue, Saturation and Lightness.       * <p>Hue is what is seen as the color. Hue is represented as an angle of the color circle and this angle is so typically measured in degrees.</p>     * <p>Saturation is how “pure” the color is.  0% is grey and 100% is a pure color.</p>     * <p>Lightness represents the lightness component of the color..</p>      */    public class HSL implements ColorSpace    {        use namespace hack ;                /**         * Creates a new HSL instance.         * @param h The hue component (between 0 and 360).         * @param s The saturation component (between 0 and 1).         * @param l The lightness value component of the hsl color (between 0 and 1).         */        public function HSL( h:Number = 0 , s:Number = 0 , l:Number = 0 )        {            this.h = h ;            this.s = s ;            this.l = l ;        }                /**         * The hue component (between 0 and 360).         */        public function get h():Number        {            return _h ;        }                /**         * @private         */        public function set h( value:Number ):void        {            _h = isNaN(value) ? 0 : value ;            _h = (_h % 360 + 360 ) % 360  ;        }                 /**         * The lightness value component of the hsl color (between 0 and 1).         */        public function get l():Number        {            return _l ;        }                /**         * @private         */        public function set l( value:Number ):void        {            _l = Mathematics.clamp( isNaN(value) ? 0 : value , 0 , 1 ) ;        }                 /**         * The saturation component (between 0 and 1).         */        public function get s():Number        {            return _s ;        }                /**         * @private         */        public function set s( value:Number ):void        {            _s = Mathematics.clamp( isNaN(value) ? 0 : value , 0 , 1 ) ;        }                 /**         * Creates and returns a shallow copy of the object.         * @return A new object that is a shallow copy of this instance.         */            public function clone():*         {            return new HSL( _h , _s , _l ) ;        }                /**         * Compares the specified object with this object for equality.         * @return <code class="prettyprint">true</code> if the the specified object is equal with this object.         */        public function equals( o:* ):Boolean        {            if ( o == this )            {                return true ;            }            else if ( o is HSL )            {                return ( (o as HSL)._h == _h ) && ( (o as HSL)._s == _s ) && ( (o as HSL)._l == _l ) ;            }            else            {                return false ;            }        }                /**         * Sets the hsl components (h,s,l)         */        public function set( ...args:Array ):void        {            h = Number( args[0] ) ;            s = Number( args[1] ) ;            l = Number( args[2] ) ;        }                /**         * Converts an object to an equivalent Object value.         * @return the Object representation of the instance.         */        public function toObject():Object         {            return { h:h , s:s , l:l } ;          }                /**         * Returns the source code string representation of the object.         * @return the source code string representation of the object.         */        public function toSource( indent:int = 0 ):String        {            return "new " + Reflection.getClassPath(this) + "(" + h.toString() + "," + s.toString() + "," + l.toString() + ")" ;         }                /**         * Returns a String representation of the object.         * @return a String representation of the object.         */        public function toString():String        {            return "[HSL h:" + h + " s:" + s + " l:" + l + "]";        }                /**         * @private         */        hack var _h:Number ;                /**         * @private         */        hack var _l:Number ;                /**         * @private         */                hack var _s:Number ;    }}