/*

  Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is VEGAS Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <ekameleon@gmail.com>.
  Portions created by the Initial Developer are Copyright (C) 2004-2010
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the LGPL or the GPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
*/

/**
 * The Connection object used in the RemotingService class to connect the client with the server and run services.
 */
if ( vegas.net.remoting.RemotingConnection == undefined ) 
{
    /**
     * Creates a new RemotingConnection instance.
     * @param uri The uri of the connection.
     */
    vegas.net.remoting.RemotingConnection = function( uri /*String*/ )
    {
        vegas.net.Connection.call( this) ;
        if ( uri && uri.length > 0 )
        {
            this.setUri( uri ) ;
        }
    }
    
    /////////////////////////////
    
    /**
     * const The name of the AMF server debug id.
     */
    vegas.net.remoting.RemotingConnection.AMF_SERVER_DEBUG /*String*/ = "amf_server_debug" ;
    
    /**
     * const The name of the AMF credentials id.
     */
    vegas.net.remoting.RemotingConnection.CREDENTIALS /*String*/ = "Credentials" ;
    
    /////////////////////////////
    
    /**
     * @extends vegas.net.Connection
     */
    proto = vegas.net.remoting.RemotingConnection.extend( vegas.net.Connection ) ;
    
    /////////////////////////////
    
    /**
     * The debug object used to configurate the debug mode of the server.
     */
    proto.debug /*Object*/ = 
    {
        amf         : false , 
        error       : true ,
        trace       : true ,
        coldfusion  : false , 
        m_debug     : true ,
        httpheaders : false , 
        amfheaders  : false , 
        recordset   : true
    };
    
    /**
     * @param name A string; identifies the header and the ActionScript object data associated with it.
     * @param mustUnderstand If true indicates that the server must understand and process this header before it handles any of the following headers or messages.
     * @param value Any object.
     * 
     */
    proto.setCredentials = function ( authentification /*RemotingAuthentification*/ ) /*void*/
    {
        var RemotingAuthentification = vegas.net.remoting.RemotingAuthentification ;
        var RemotingConnection       = vegas.net.remoting.RemotingConnection ;
        
        var auth /*Object*/ = null ;
        
        if ( authentification instanceof RemotingAuthentification )
        {
            auth = authentification.toObject() ;
        }
        
        this.addHeader( RemotingConnection.CREDENTIALS , false , auth ) ;
    }
    
    /**
     * This method is used to start the server debug mode.
     */
    proto.startDebug = function() /*void*/
    {
        var RemotingConnection = vegas.net.remoting.RemotingConnection ;
        
        var debug /*Object*/ = 
        {
            amf         : false , 
            error       : true ,
            trace       : true ,
            coldfusion  : false , 
            m_debug     : true ,
            httpheaders : false , 
            amfheaders  : false , 
            recordset   : true
        };
        
        this.addHeader( RemotingConnection.AMF_SERVER_DEBUG, true, debug ) ;
    }
    
    /**
     * This method is used to stop the server debug mode.
     */
    proto.stopDebug = function () /*Void*/ 
    {
        this.addHeader( vegas.net.remoting.RemotingConnection.AMF_SERVER_DEBUG , true , undefined ) ;
    }
    
    /**
     * Returns the String representation of the object.
     * @return the String representation of the object.
     */
    proto.toString = function () /*String*/
    {
        return "[RemotingConnection]" ;
    }
    
    /////////////////////////////
    
    delete proto ;
}