/*

  Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is VEGAS Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <ekameleon@gmail.com>.
  Portions created by the Initial Developer are Copyright (C) 2004-2010
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the LGPL or the GPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
*/

/**
 * This locator use a Map to register all RemotingConnection singletons in the application.
 */
if ( vegas.net.remoting.RemotingConnectionCollector == undefined ) 
{
    /**
     * Creates a new RemotingConnectionCollector instance.
     */
    vegas.net.remoting.RemotingConnectionCollector = function() 
    {
        this._map = new system.data.maps.ArrayMap() ;
    }
    
    ////////////////////////
    
    /**
     * @extends Object
     */
    proto = vegas.net.remoting.RemotingConnectionCollector.extend( Object ) ;
    
    ////////////////////////
    
    /**
     * Insert in the locator a new RemotingConnection in the collector and indexed it with the string name in the first parameter.
     * @param uri the name of the RemotingConnection object to register it.
     * @param connection the RemotingConnection reference to register. 
     */
    proto.add = function ( connection /*RemotingConnection*/ ) /*Boolean*/
    {
        if ( connection == null && !(connection instanceof vegas.net.RemotingConnection) )
        {
            return false ;
        }
        else if ( connection.uri == null || connection.uri.length == 0 )
        {
            return false ;
        }
        else if ( this._map.containsKey( connection.uri ) ) 
        {
            return false ;
        }
        else
        {
            this._map.put( connection.uri , connection ) ;
            return true ;
        }
    }
    
    /**
     * Removes all RemotingConnection reference in the collector.
     */
    proto.clear = function () /*void*/
    {
        this._map.clear() ;
    }
    
    /**
     * Returns <code class="prettyprint">true</code> if the collector contains the RemotingConnection.
     * @param connection a RemotingConnection reference or a uri String value.
     * @return <code class="prettyprint">true</code> if the collector contains the RemotingConnection.
     */
    proto.contains = function ( connection ) /*Boolean*/
    {
        var uri /*String*/ = null ;
        if ( typeof(connection) == "string" || connection instanceof String ) 
        {
            uri = connection ;
        }
        else if ( connection instanceof vegas.net.remoting.RemotingConnection )
        {
            uri = connection.uri ;
        } 
        return this._map.containsKey( uri ) ;
    }
    
    /**
     * Returns <code class="prettyprint">true</code> if the collector is empty.
     * @return <code class="prettyprint">true</code> if the collector is empty.
     */
    proto.isEmpty = function () /*Boolean*/
    {
        return this._map.isEmpty() ;
    }
    
    /**
     * Removes the specified RemotingConnection in the collector.
     * @param uri The uri string key of the connection register in the collector.
     */
    proto.remove = function( connection ) /*RemotingConnection*/
    {
        var uri /*String*/ = null ;
        if ( typeof(connection) == "string" || connection instanceof String ) 
        {
            uri = connection ;
        }
        else if ( connection instanceof vegas.net.remoting.RemotingConnection )
        {
            uri = connection.uri ;
        } 
        if ( this._map.containsKey( uri ) )
        {
            return this._map.remove( uri ) ;
        }
        else
        {
            return null ;
        }
    }
    
    /**
     * Returns the number of elements in the collector.
     * @return the number of elements in the collector.
     */
    proto.size = function() /*uint*/
    {
        return this._map.size() ;
    }
    
    /**
     * Returns the String representation of the object.
     * @return the String representation of the object.
     */
    proto.toString = function () /*Object*/
    {
        return "[RemotingConnectionCollector]" ;
    }
    
    ////////////////////////
    
    proto.__defineGetter__( "length" , proto.size ) ;
    
    ////////////////////////
    
    delete proto ;
    
    ////////////////////////
    
    /**
     * The remoting connection collector singleton.
     */
    vegas.net.remoting.collector = new vegas.net.remoting.RemotingConnectionCollector() ;
}
