/*

  Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is VEGAS Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <ekameleon@gmail.com>.
  Portions created by the Initial Developer are Copyright (C) 2004-2010
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
  Alternatively, the contents of this file may be used under the terms of
  either the GNU General Public License Version 2 or later (the "GPL"), or
  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  in which case the provisions of the GPL or the LGPL are applicable instead
  of those above. If you wish to allow use of your version of this file only
  under the terms of either the GPL or the LGPL, and not to allow others to
  use your version of this file under the terms of the MPL, indicate your
  decision by deleting the provisions above and replace them with the notice
  and other provisions required by the LGPL or the GPL. If you do not delete
  the provisions above, a recipient may use your version of this file under
  the terms of any one of the MPL, the GPL or the LGPL.
  
*/

if ( vegas.net.Connection == undefined ) 
{
    /**
     * Creates a new Connection instance.
     */
    vegas.net.Connection = function()
    {
        system.process.CoreAction.call( this) ;
        
        //////
        
        var Signal = system.signals.Signal ;
        
        this._callBadVersion     = new Signal() ;
        this._callFailed         = new Signal() ;
        this._connectAppShutDown = new Signal() ;
        this._connectClosed      = new Signal() ;
        this._connectFailed      = new Signal() ;
        this._connectRejected    = new Signal() ;
        this._connectSuccess     = new Signal() ;
        this._proxyNotResponding = new Signal() ;
        
        //////
        
        this._connection = new NetConnection() ;
        
        //////
        
        this._timer = new system.process.Timer( vegas.net.Connection.DEFAULT_DELAY , 1 ) ;
        
        this._timer.finishIt.connect( this._timeout ) ;
    }
    
    /////////////////////////////
    
    /**
     * The default internal timeout delay value in milliseconds.
     */
    vegas.net.Connection.DEFAULT_DELAY /*uint*/ = 8000 ;
    
    /////////////////////////////
    
    /**
     * @extends system.process.CoreAction ;
     */
    proto = vegas.net.Connection.extend( system.process.CoreAction ) ;
    
    /////////////////////////////
    
    /**
     * @param name A string; identifies the header and the ActionScript object data associated with it.
     * @param mustUnderstand If true indicates that the server must understand and process this header before it handles any of the following headers or messages.
     * @param value Any object.
     * 
     */
    proto.addHeader = function ( name, useUnderstand, value )
    {
        this._connection.addHeader.call( this._connection, name, useUnderstand, value ) ;
    }
     
    /**
     * Invokes a command or method on a Flash Media Server or an application server to which the application instance is connected. 
     * The NetConnection.call method on the server works the same way as the NetConnection.call method on the client: it invokes a command on a remote server.
     * @param resultObj An optional parameter that is used to handle return values from the server. 
     * The result object can be any object you defined and can have two defined methods to handle the returned result: onResult and onStatus. 
     * If an error is returned as the result, onStatus is invoked; otherwise, onResult is invoked. 
     * @param methodName A method specified in the form [objectPath/]method.
     * @param p1, ..., pN Optional parameters that can be of any ActionScript type, including a reference to another ActionScript object. 
     * These parameters are passed to the methodName specified above when the method is executed on the remote application server.
     * @return For RTMP connections, returns a Boolean value of true if a call to methodName is sent to the client ; otherwise, false. 
     * For application server connections, it always returns true.
     */
    proto.call = function ( )
    {
        return this._connection.call.apply( this._connection , Array.fromArguments( arguments ) ) ;
    }
    
    /**
     * Returns the shallow copy of this object.
     * @return the shallow copy of this object.
     */
    proto.clone = function () /*Connection*/ 
    {
        return new vegas.net.Connection() ;
    }
    
    /**
     * Closes the connection with the server. 
     * After you close the connection, you can reuse the NetConnection instance and reconnect to an old application or connect to a new one.
     */
    proto.close = function () /*void*/
    {
        if( this._timer.running )
        {
            this._timer.stop() ;
        }
        this._connection.close() ;
    }
    
    /**
     * Connects to an application server or another Flash Media Server. 
     * <p>The host URI has the following format:</p>
     * <pre>[protocol://]host[:port]/appName[/instanceName]</pre>
     */
    proto.connect = function( uri ) /*Boolean*/
    {
        if ( this._connection.isConnected )
        {
            return false ;
        }
        this.notifyStarted() ;
        this.setUri( uri ) ;
        return this._connection.connect.apply( this._connection, Array.fromArguments(arguments)  ) ;
    }
    
    /**
     * Runs the process of this Connection.
     */
    proto.run = function () /*void*/ 
    {
        if ( !this._running )
        {
            this.connect( this.uri ) ;
        }
    }
    
    /**
     * Returns the source representation of this object.
     * @return the source representation of this object.
     */
    proto.toSource = function () /*String*/ 
    {
        return "new vegas.net.Connection()" ;
    }
    
    /**
     * Returns the String representation of the object.
     * @return the String representation of the object.
     */
    proto.toString = function () /*String*/
    {
        return "[Connection]" ;
    }
    
    /////////////////////////////
    
    /**
     * Returns a Boolean value that indicates whether a connection has been made. 
     * It is set to true if there is a connection to the server. 
     * It's a good idea to check this property value in an onStatus callback function. 
     * This property is always true for AMF connections to application servers.
     */
    proto.getConnected = function ()
    {
        return this._connection.isConnected ;
    }
    
    /**
     * Returns the timeout interval duration.
     * @return the timeout interval duration.
     */
    proto.getDelay = function () /*uint*/ 
    {
        return this._timer.getDelay() ;
    }
    
    /**
     * Set timeout interval duration.
     */
    proto.setDelay = function ( delay /*Number*/ ) /*void*/ 
    {
        this._timer.setDelay( (delay > 0) ? delay : 0 ) ;
    }
    
    /**
     * Returns the timeout policy of this object.
     * @return the timeout policy of this object.
     * @see system.process#TimeoutPolicy
     */
    proto.getTimeoutPolicy = function () /*TimeoutPolicy*/ 
    {
        return this._policy ;
    }
    /**
     * Sets if the connection use an infinity or limited timeout interval.
     * @param policy the TimeoutPolicy.INFINITY or TimeoutPolicy.LIMIT value.
     * @see system.process#TimeoutPolicy
     */
    proto.setTimeoutPolicy  = function ( policy /*TimeoutPolicy*/ ) /*Void*/ 
    {
        var TimeoutPolicy = system.process.TimeoutPolicy ;
        this._policy = policy == TimeoutPolicy.LIMIT ?  TimeoutPolicy.LIMIT : TimeoutPolicy.INFINITY ;
        if ( this._policy == TimeoutPolicy.LIMIT ) 
        {
            this._timer.timerIt.connect( this._timeOut) ;
        }
        else 
        {
            this._timer.timerIt.disconnect( this._timeOut) ;
        }
    }
    
    /**
     * The Action Message Format (AMF) version used to pass binary data between two servers. 
     * The possible values are 3 (ActionScript 3.0 format) and 0 (ActionScript 1.0 and ActionScript 2.0 format). 
     * The default value is 3. 
     * When Flash Media Server acts as a client trying to connect to another server, the encoding of the client 
     * should match the encoding of the remote server.
     */
    proto.getObjectEncoding = function ()
    {
        return this._connection.objectEncoding ;
    }
    
    /**
     * Sets the Action Message Format (AMF) version used to pass binary data between two servers.
     */
    proto.setObjectEncoding = function ( value /*uint*/ ) /*void*/ 
    {
        var ObjectEncoding = vegas.net.ObjectEncoding ;
        this._connection.objectEncoding = value == ObjectEncoding.AMF0 ? ObjectEncoding.AMF0 : ObjectEncoding.AMF3 ;
    }
    
    /**
     * Returns a string indicating the uri that was passed by the NetConnection.connect() method. 
     */
    proto.getUri = function ()
    {
        return this._uri ;
    }
    
    /**
     * Sets the default URI that the NetConnection.connect() method passed.
     */
    proto.setUri = function ( uri /*String*/ ) /*void*/ 
    {
        this._uri = uri ;
    }
    
    /////////////////////////////
    
    /**
     * This signal emit when a packet encoded in an unidentified format.
     */
    proto.getCallBadVersion = function() /*Signal*/
    {
        return this._callBadVersion ;
    }
    
    /**
     * @private
     */
    proto.setCallBadVersion = function( signal /*Signal*/ ) /*void*/
    {
        this._callBadVersion = signal || new Signal() ;
    }
    
    /**
     * This signal emit when the call method was not able to invoke the server-side method or command.
     */
    proto.getCallFailed = function() /*Signal*/
    {
        return this._callFailed ;
    }
    
    /**
     * @private
     */
    proto.setCallFailed = function( signal /*Signal*/ ) /*void*/
    {
        this._callFailed = signal || new Signal() ;
    }
    
    /**
     * This signal emit when the connection is shutting down.
     */
    proto.getConnectAppShutDown = function() /*Signal*/
    {
        return this._connectAppShutDown ;
    }
    
    /**
     * @private
     */
    proto.setConnectAppShutDown = function( signal /*Signal*/ ) /*void*/
    {
        this._connectAppShutDown = signal || new Signal() ;
    }
    
    /**
     * This signal emit when the connection is closed.
     */
    proto.getConnectClosed = function() /*Signal*/
    {
        return this._connectClosed ;
    }
    
    /**
     * @private
     */
    proto.setConnectClosed = function( signal /*Signal*/ ) /*void*/
    {
        this._connectClosed = signal || new Signal() ;
    }
    
    /**
     * This signal emit when the connection is rejected.
     */
    proto.getConnectFailed = function() /*Signal*/
    {
        return this._connectFailed ;
    }
    
    /**
     * @private
     */
    proto.setConnectFailed = function( signal /*Signal*/ ) /*void*/
    {
        this._connectFailed = signal || new Signal() ;
    }
    
    /**
     * This signal emit when the connection is rejected.
     */
    proto.getConnectRejected = function() /*Signal*/
    {
        return this._connectRejected ;
    }
    
    /**
     * @private
     */
    proto.setConnectRejected = function( signal /*Signal*/ ) /*void*/
    {
        this._connectRejected = signal || new Signal() ;
    }
    
    /**
     * This signal emit when the connection attempt succeeded.
     */
    proto.getConnectSuccess = function() /*Signal*/
    {
        return this._connectSuccess ;
    }
    
    /**
     * @private
     */
    proto.setConnectSuccess = function( signal /*Signal*/ ) /*void*/
    {
        this._connectSuccess = signal || new Signal() ;
    }
    
    /**
     * This signal emit when the proxy server is not responding. See the ProxyStream class.
     */
    proto.getProxyNotResponding = function() /*Signal*/
    {
        return this._proxyNotResponding ;
    }
    
    /**
     * @private
     */
    proto.setProxyNotResponding = function( signal /*Signal*/ ) /*void*/
    {
        this._proxyNotResponding = signal || new Signal() ;
    }
    
    /////////////////////////////
     
    proto.__defineGetter__( "connected", proto.getConnected ) ;
    
    proto.__defineGetter__( "callBadVersion", proto.getCallBadVersion ) ;
    proto.__defineSetter__( "callBadVersion", proto.setCallBadVersion ) ;
    
    proto.__defineGetter__( "callFailed", proto.getCallFailed ) ;
    proto.__defineSetter__( "callFailed", proto.setCallFailed ) ;
    
    proto.__defineGetter__( "connectAppShutDown", proto.getConnectAppShutDown ) ;
    proto.__defineSetter__( "connectAppShutDown", proto.setConnectAppShutDown ) ;
    
    proto.__defineGetter__( "connectClosed", proto.getConnectClosed ) ;
    proto.__defineSetter__( "connectClosed", proto.setConnectClosed ) ;
       
    proto.__defineGetter__( "connectFailed", proto.getConnectFailed ) ;
    proto.__defineSetter__( "connectFailed", proto.setConnectFailed ) ;
    
    proto.__defineGetter__( "connectRejected", proto.getConnectRejected ) ;
    proto.__defineSetter__( "connectRejected", proto.setConnectRejected ) ;
    
    proto.__defineGetter__( "connectSuccess", proto.getConnectSuccess ) ;
    proto.__defineSetter__( "connectSuccess", proto.setConnectSuccess ) ;
    
    proto.__defineGetter__( "proxyNotResponding", proto.getProxyNotResponding ) ;
    proto.__defineSetter__( "proxyNotResponding", proto.setProxyNotResponding ) ;
    
    proto.__defineGetter__( "objectEncoding", proto.getObjectEncoding ) ;
    proto.__defineSetter__( "objectEncoding", proto.setObjectEncoding ) ;
     
    proto.__defineGetter__( "uri" , proto.getUri ) ;
    proto.__defineSetter__( "uri" , proto.setUri ) ;
    
    /////////////////////////////
    
    /**
     * @private
     */
    proto._callBadVersion = null ;
    /**
     * @private
     */
    proto._callFailed = null ;
    
    /**
     * @private
     */
    proto._connectAppShutDown = null ;
    
    /**
     * @private
     */
    proto._connectClosed = null ;
    
    /**
     * @private
     */
    proto._connectFailed = null ;
    
    /**
     * @private
     */
    proto._connectRejected = null ;
    
    /**
     * @private
     */
    proto._connectSuccess = null ;
    
    /**
     * @private
     */
    proto._proxyNotResponding = null ;
    
    /**
     * @private
     */
    proto._connection = null ;
    
    /**
     * @private
     */
    proto._uri = null ;
    
    /**
     * @private
     */
    proto._status = function ( info ) /*void*/ 
    {
        if ( this._timer.running )
        {
            this._timer.stop() ;
        }
        
        var code /*String*/ = info.code ;
        var ConnectionCode /*String*/ = vegas.net.ConnectionCode ;
        
        switch ( code )
        {
            case ConnectionCode.CALL_BAD_VERSION :
            {
                this._callBadVersion.emit( this , info ) ;
                break ;
            }
            case ConnectionCode.CALL_FAILED :
            {
               this._callFailed.emit( this , info ) ;
               break ;
            }
            case ConnectionCode.CONNECT_CLOSED :
            {
               this._connectClosed.emit( this , info ) ;
               break ;
            }
            case ConnectionCode.CONNECT_FAILED :
            {
                this._connectFailed.emit( this , info ) ;
                break ;
            }
            case ConnectionCode.CONNECT_REJECTED :
            {
               this._connectRejected.emit( this , info ) ;
               break ;
            }
            case ConnectionCode.CONNECT_SHUTDOWN :
            {
                this._connectAppShutDown.emit( this , info ) ;
               break ;
            }
            case ConnectionCode.CONNECT_SUCCESS :
            {
               this._connectSuccess.emit( this , info ) ;
               break ;
            }
            case ConnectionCode.PROXY_NOT_RESPONDING :
            {
               this._proxyNotResponding.emit( this , info ) ;
               break ;
            }
        }
        
        this.notifyInfo( info ) ;
        
        if ( this._running )
        {
            switch ( code )
            {
                case ConnectionCode.CONNECT_CLOSED   :
                case ConnectionCode.CONNECT_FAILED   :
                case ConnectionCode.CONNECT_REJECTED :
                case ConnectionCode.CONNECT_SUCCESS  :
                {
                   this.notifyFinished() ;
                   break ;
                }
            }
        }
    }
    
    /**
     * @private
     */
    proto._timeout = function( action /*Action*/ )
    {
        if( this._timer.running )
        {
            this._timer.stop() ;
        }
        if ( this._connection.isConnected )
        {
            this._connection.close() ;
        }
        if ( this._running )
        {
            notifyFinished() ;
        }
    }
    
    /////////////////////////////
    
    delete proto ;
}