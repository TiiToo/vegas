
load("src/vegas.asc") ;

// Unit Tests

load("unittests/Application.asc") ;

// Example

EventList = {} ;
EventList.TEST = "test" ;

var onAction = function ( e )
{
    trace( "++++ action type    : " + e.type    ) ;
    trace( "++++ action client  : " + e.client  ) ;
    trace( "++++ action context : " + e.context ) ;
}

var action = new vegas.events.Delegate(this, onAction) ;
asgard.GATEWAY.insert( EventList.TEST, action ) ;

var users = new vegas.data.map.HashMap() ;

onAccept = function ( e /*ApplicationEvent*/ ) 
{
	trace( e ) ;
}
	
onConnect = function ( e /*ApplicationEvent*/ ) 
{
	
	var name   = e.getContext()[0] ;
	var client = e.getClient() ;
	
	trace( e + " : " + client + " : " + name ) ;
	
	if ( users.containsKey(name) == false )
	{
		
		client.name = name ;
		
		users.put( name , client ) ;

		client.readAccess = "" ;
		client.writeAccess = "/stream_test" ;
		
		asgard.APPLICATION.acceptConnection( client ) ;
		

		
		//client.call( "receiveSharedEvent", null , new ClassMappingEvent( "test" ) ) ;
		
	}
	else
	{
		asgard.APPLICATION.rejectConnection( client , "test reject") ;
	}
}

onDisconnect = function ( e /*ApplicationEvent*/ ) 
{
	
	var client = e.getClient() ;
	var name =  client.name ;
	if ( users.containsKey(name))
	{
		users.remove(name) ;
	}
	trace( e + " " + client + " : " +  users.size() ) ;
}

onReject = function ( e /*ApplicationEvent*/ ) 
{
	trace( e ) ;
}

onStart = function ( e /*ApplicationEvent*/ ) 
{
	trace( e ) ;
}

onStop = function ( e /*ApplicationEvent*/ ) 
{
	trace( e ) ;
}

ApplicationEvent = asgard.events.ApplicationEvent ;
Delegate         = vegas.events.Delegate ;

controller = vegas.events.FrontController.getInstance() ;

controller.insert( ApplicationEvent.ACCEPT     , new Delegate  (this, onAccept)) ;
controller.insert( ApplicationEvent.CONNECT    , new Delegate  (this, onConnect)) ;
controller.insert( ApplicationEvent.DISCONNECT , new Delegate  (this, onDisconnect)) ;
controller.insert( ApplicationEvent.REJECT     , new Delegate  (this, onReject)) ;
controller.insert( ApplicationEvent.START      , new Delegate  (this, onStart)) ;
controller.insert( ApplicationEvent.STOP       , new Delegate  (this, onStop)) ;

asgard.APPLICATION.setGlobal(true) ; 
