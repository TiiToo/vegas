load("src/vegas.asc") ;

// ---- Unit Test

load("unittests/Application.asc") ;

/*

LinkedList = vegas.data.list.LinkedList ;
SimpleCollection = vegas.data.collections.SimpleCollection ;

var c1 = new SimpleCollection() ;
c1.insert("item0") ;
c1.insert("item1") ;
c1.insert("item2") ;
c1.insert("item3") ;
c1.insert("item4") ;
c1.insert("item5") ;
c1.insert("item6") ;
c1.insert("item7") ;
c1.insert("item8") ;
c1.insert("item9") ;

trace("c1 : " + c1) ;

var c2 = new SimpleCollection() ;
c2.insert("item7") ;
c2.insert("item8") ;

trace("c2 : " + c1) ;

var list = new LinkedList(c1) ;

trace ("list toSource : " + list.toSource()) ;

trace ("-----") ;

trace ("create list : " + list) ;

trace("list.contains('item1') : " + list.contains("item1") ) ;

list.insertAt(2,'test')
trace("list.insertAt(2,'test')" + list ) ;

list.removeAt(2) ;
trace ("list.removeAt(2) : " + list) ;

list.remove("item4") ;
trace ("list.remove('item4') : " + list) ;

list.removeFirst() ;
trace ("list.removeFirst() : " + list) ;

list.removeLast() ;
trace ("list.removeLast() : " + list) ;

list.removesAt(1, 4) ;
trace ("list.removesAt(1, 4) : " + list) ;

list.removeRange(1, 3) ;
trace ("list.removeRange(1, 3) : " + list) ;

trace ("-----") ;

list.insertAllAt(0, c2) ;
trace ("list.insertAllAt(0, c2) : " + list) ;


trace ("--- ListIterator") ;

var it = list.listIterator() ;
var i = 0 ; 
while (it.hasNext()) 
{
	it.next() ;
	it.set("element" + i++) ;
}
trace (">> " + list) ;

trace ("---") ;

var it = list.listIterator(list.size()) ;
while(it.hasPrevious()) 
{
	trace (it.previous()) ;
}


//*
trace ("-----") ;

list.insertFirst("begin") ;
trace ("list.insertFirst('begin') : " + list) ;

list.insertLast("end") ;
trace ("list.insertLast('end') : " + list) ;

trace ("list.getFirst() : " + list.getFirst()) ;
trace ("list.getLast() : " + list.getLast()) ;

list.removeFirst() ;
trace ("list.removeFirst() : " + list) ;

list.removeLast() ;
trace ("list.removeLast() : " + list) ;

trace ("---- clear") ;

list.clear() ;

trace("list.size() : " + list.size()) ;
trace("list.isEmpty : " + list.isEmpty() ) ;
*/

// ---- Test

// Example to use GATEWAY & APPLICATION with commands & FrontController.
// This example is a ALPHA TEST ... don't use this example for the moment please)

Client.prototype.getMessage = function ( msg ) 
{
	
	return msg ;
	
}


/**
 * Invoqued when an event is dispatcher by the Application singleton.
 */
var onDebug = function (e) {
	
	var type = e.getType() ;
	var target = e.getTarget() ;
	var client = e.client ;

	switch (type) 
	{
		
		case "onConnect" :
		{
			trace("debug > " + type + " : " + client ) ;
			
			asgard.APPLICATION.acceptConnection(client) ;
			// asgard.APPLICATION.rejectConnection(client) ;
			
			break ;
		}
		default :
		{
			trace("debug > " + type + " : " + target ) ;
		}
	}
	
}

var onAction = function ( e ) 
{

	trace("++++ action type    : " + e.type) ;
	trace("++++ action client : " + e.client) ;
	trace("++++ action context : " + e.context) ;
	
}

EventList = {} ;
EventList.TEST = "test" ;

var action = new vegas.events.Delegate(this, onAction) ;
var debug = new vegas.events.Delegate(this, onDebug) ;

asgard.APPLICATION.addGlobalEventListener( debug ) ;

asgard.GATEWAY.insert( EventList.TEST, action ) ;
