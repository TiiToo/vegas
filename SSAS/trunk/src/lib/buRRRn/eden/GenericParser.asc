
/*
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is eden: ECMAScript data exchange notation. 
  
  The Initial Developer of the Original Code is
  Zwetan Kjukov <zwetan@gmail.com>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved. 
  
  Contributor(s):
  
  Alternatively, the contents of this file may be used under the terms of
  the GNU General Public License Version 2 or later (the "GPL"), in which
  case the provisions of the GPL are applicable  instead of those above.
  If you wish to allow use of your version of this file only under the
  terms of the GPL and not to allow others to use your version of this file
  under the MPL, indicate your decision by deleting the provisions above and
  replace them with the notice and other provisions required by the GPL.
  If you do not delete the provisions above, a recipient may use your version
  of this file under either the MPL or the GPL.
*/

/* Singleton: GenericParser
*/
buRRRn.eden.GenericParser = function( /*String*/ source, /*Object*/ callback )
    {
    var controller = buRRRn.eden; //default controller
    
    if( callback == null )
        {
        callback = controller;
        }
    
    this.config = controller.config;
    
    //delegates
    this.log = controller.log;
    this.rez = controller.rez;
    
    this.onParsed = function()
        {
        callback.onParsed();
        }
    
    this.source = source;
    this.pos    = 0;
    this.ch     = "";
    }

/* Method: getCharAt
*/
buRRRn.eden.GenericParser.prototype.getCharAt = function( /*Int*/ pos )
    {
    if( pos == null )
        {
        pos = this.pos;
        }
    
    return this.source.charAt( pos );
    }

/* Method: getChar
*/
buRRRn.eden.GenericParser.prototype.getChar = function()
    {
    return this.source.charAt( this.pos );
    }

/* Method: next
*/
buRRRn.eden.GenericParser.prototype.next = function()
    {
    this.ch = this.getChar();
    //this.ch = this.source.charAt( this.pos );
    //trace( "CH = [" + this.ch + "]" );
    this.pos++;
    return this.ch;
    }

/* Method: hasMoreChar
*/
buRRRn.eden.GenericParser.prototype.hasMoreChar = function()
    {
    return( this.pos <= (this.source.length-1) );
    }

/* Method: eval
   To override.
*/
buRRRn.eden.GenericParser.prototype.eval = function()
    {
    
    }

/* StaticMethod: evaluate
   To override.
*/
buRRRn.eden.GenericParser.evaluate = function( /*String*/ source )
    {
    var parser = new buRRRn.eden.GenericParser( source );
    return parser.eval();
    }

/* Method: isAlpha
*/
buRRRn.eden.GenericParser.prototype.isAlpha = function( /*Char*/ c )
    {
    return( (("A" <= c) && (c <= "Z")) || (("a" <= c) && (c <= "z")) );
    }

/* Method: isASCII
*/
buRRRn.eden.GenericParser.prototype.isASCII = function( /*Char*/ c )
    {
    return( c.charCodeAt( 0 ) <= 255 );
    }

/* Method: isDigit
*/
buRRRn.eden.GenericParser.prototype.isDigit = function( /*Char*/ c )
    {
    return( ("0" <= c) && (c <= "9") );
    }

/* Method: isHexDigit
*/
buRRRn.eden.GenericParser.prototype.isHexDigit = function( /*Char*/ c )
    {
    return( this.isDigit( c ) || (("A" <= c) && (c <= "F")) || (("a" <= c) && (c <= "f")) );
    }

/* Method: isOctalDigit
*/
buRRRn.eden.GenericParser.prototype.isOctalDigit = function( /*Char*/ c )
    {
    return( ("0" <= c) && (c <= "7") );
    }

/* Method: isUnicode
*/
buRRRn.eden.GenericParser.prototype.isUnicode = function( /*Char*/ c )
    {
    return( c.charCodeAt( 0 ) > 255 );
    }

