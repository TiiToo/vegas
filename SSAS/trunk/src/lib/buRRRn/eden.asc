
/*
  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is eden: ECMAScript data exchange notation. 
  
  The Initial Developer of the Original Code is
  Zwetan Kjukov <zwetan@gmail.com>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved. 
  
  Contributor(s):
  
  Alternatively, the contents of this file may be used under the terms of
  the GNU General Public License Version 2 or later (the "GPL"), in which
  case the provisions of the GPL are applicable  instead of those above.
  If you wish to allow use of your version of this file only under the
  terms of the GPL and not to allow others to use your version of this file
  under the MPL, indicate your decision by deleting the provisions above and
  replace them with the notice and other provisions required by the GPL.
  If you do not delete the provisions above, a recipient may use your version
  of this file under either the MPL or the GPL.
*/

_global.buRRRn = {} ;

/* Singleton: buRRRn.eden
   The eden library.
   
   (see eden.gif)
*/
_global.buRRRn.eden = {};


/* GlobalFunction: Serialize
   same as buRRRn.eden.serialize
*/
_global.Serialize = function( /*Object*/ reference, /*Int*/ indent )
    {
    
    if( !buRRRn.eden.config.compress )
        {
        if( indent == null )
            {
            indent = 0;
            }
        }
    
    if( reference === _global )
        {
        return _global.ToSource( indent );
        }
    
    if( reference === undefined )
        {
        return buRRRn.eden.config.undefineable;
        }
    
    if( reference === null )
        {
        return "null";
        }
    
    return reference.toSource( indent );
    }

/* GlobalFunction: Deserialize
   same as buRRRn.eden.deserialize
*/
_global.Deserialize = function( /*String*/ source, /*Object*/ scope, /*Object*/ callback )
    {
    return buRRRn.eden.ECMAScript.evaluate( source, scope, callback );
    }


/* StaticProperty: logs
*/
buRRRn.eden.logs = [];

/* StaticEvent: onParsed
   To override.
*/
buRRRn.eden.onParsed = function()
    {
    // trace( "**************************" );
    // trace( "eden - parsing finished !!" );
    // trace( "eden - show logs" );
    // this.showLogs();
    }

/* StaticMethod: deserialize
   Dynamically interpret a source string.
   That's it, a small and fast ECMAScript parser.
*/
buRRRn.eden.deserialize = function( /*String*/ source, /*Object*/ scope, /*Object*/ callback )
    {
    return buRRRn.eden.ECMAScript.evaluate( source, scope, callback );
    }

/* StaticMethod: log
   Add a message to the logs queue.
*/
buRRRn.eden.log = function( /*String*/ message )
    {
    buRRRn.eden.logs.push( message );
    
    if( this.config.verbose )
        {
        buRRRn.eden._trace( message );
        }
    }

/* StaticMethod: showLogs
   Display all the logs in the console.
*/
buRRRn.eden.showLogs = function()
    {
    for( var i=0; i<this.logs.length; i++ )
        {
        this._trace( this.logs[i] );
        }
    }

/* StaticMethod: serialize
   Takes an object reference
   and serialize it as an ECMAScript string.
*/
buRRRn.eden.serialize = function( /*Object*/ reference, /*Int*/ indent )
    {
    
    if( !this.config.compress )
        {
        if( indent == null )
            {
            indent = 0;
            }
        }
    
    if( reference === _global )
        {
        return _global.ToSource( indent );
        }
    
    if( reference === undefined )
        {
        return this.config.undefineable;
        }
    
    if( reference === null )
        {
        return "null";
        }
    
    return reference.toSource( indent );
    }

/* StaticMethod: multiSerialize
   Takes unlimited string name and reference arguments pair
   and serialize them as an ECMAScript string.
   
   note:
   You have to provide pairs of value
   in the form
   str0, ref0, str1, ref1, strN, refN, etc...
   
*/
buRRRn.eden.multiSerialize = function()
    {
    var result, indent, CRLF, trim, equal, i;
    result = "";
    CRLF   = "";
    trim   = 0;
    equal  = "=";
    
    if( (arguments.length == 0) || (arguments.length%2 != 0) )
        {
        this.log( this.rez.requirePairValue );
        return result;
        }

    if( !this.config.compress )
        {
        CRLF   = "\r\n";
        indent = 1;
        trim   = 6; //equal.length + TAB + CR + LF
        equal  = " = ";
        }
    
    for( i=0; i<arguments.length; i++ )
        {
        name      = arguments[i++];
        reference = arguments[i];
        
        if( GetTypeOf( name ) != "string" )
            {
            this.log( String.format( this.rez.pairIsIgnored, name.toSource(), (i-1), i ) );
            continue;
            }
        
        /* TODO:
           - add a check for reserved keywords
           - perharps add a check for authorized keywords ?
        */
        
        result += name + equal + this.serialize( reference, indent ).substr( trim ) + ";" + CRLF + CRLF;
        }
    
    return result;
    }

/* PrivateStaticMethod: _trace
   Allows to display messages in the console.
*/
buRRRn.eden._trace = function( /*String*/ message )
    {
    trace( message );
    }

