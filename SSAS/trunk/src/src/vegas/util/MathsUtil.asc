/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** MathsUtil

	AUTHOR

		Name : MathsUtil
		type : SSAS
		Package : vegas.util
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-09
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	DESCRIPTION
	
		Maths Tools
	
	METHOD SUMMARY
		
		- clamp(value:Number, min:Number, max:Number) 
		
			DESCRIPTION 
			
				bound a numeric value between 2 numbers.
			
			EXAMPLE
			
				var M = vegas.util.MathsUtil ;
				
				var n = M.clamp(4, 5, 10) ;
				trace ("n : " + n) ;
				
				var n = M.clamp(12, 5, 10) ;
				trace ("n : " + n) ;
				
				var n = M.clamp(6, 5, 10) ;
				trace ("n : " + n) ;

				var n = M.clamp(null, 5, 10) ;
				trace ("n : " + n) ;
				
		- round(n:Number, floatCount:Number) 
		
			DESCRIPTION
			
				rounds a number by a count of floating points
				
			EXAMPLE
			
				var M = vegas.util.MathsUtil ;
				
				var n = M.round(4.572525153, 2) ;
				trace ("n : " + n) ;
				
				var n = M.round(4.572525153, -1) ;
				trace ("n : " + n) ;
				
				var n = M.round(null, 5) ;
				trace ("n : " + n) ;

		- sign(n:Number)
			
			DESCRIPTION 
			
				return 1 if the value is positive or -1
			
			EXAMPLE
			
				var M = vegas.util.MathsUtil ;
				
				var n = M.sign(-150) ;
				trace ("n : " + n) ;
				
				var n = M.sign(200) ;
				trace ("n : " + n) ;
				
				var n = M.sign(0) ;
				trace ("n : " + n) ;
				
				var n = M.sign(null) ;
				trace ("n : " + n) ;

**/ 

_global.getNamespace("vegas.util") ;

if (vegas.util.MathsUtil == undefined) {
	
	// ----o Singleton

	vegas.util.MathsUtil = {} ;

	// ----o Public Methods
	
	vegas.util.MathsUtil.clamp = function (value/*Number*/, min/*Number*/, max/*Number*/)/*Number*/ {
		if (value == null || isNaN(value)) {
			throw new vegas.errors.IllegalArgumentError("MathsUtil.clamp, Argument 'value' must not be 'null' or 'undefined' or 'NaN'") ;
		}
		if (isNaN(min)) min = value ;
		if (isNaN(max)) max = value ;
		return Math.max(Math.min(value, max), min) ;
	}

	vegas.util.MathsUtil.getPercent = function(nValue/*Number*/, nMax/*Number*/) /*Number*/ {
		var nP /*Number*/ = (nValue / nMax) * 100 ;
		return (isNaN(nP) || !isFinite(nP)) ? null : nP ;
	}

	vegas.util.MathsUtil.round = function (n/*Number*/, floatCount/*Number*/)/*Number*/ {
		if (n == null || isNaN(n)) {
			throw new vegas.errors.IllegalArgumentError("MathsUtil.round, Argument 'n' must not be 'null' or 'undefined' or 'NaN'") ;
		}
		var r /*Number*/ = 1 ;
		var i /*Number*/ = -1 ;
		while (++i < floatCount) r *= 10 ;
		return Math.round(n*r) / r  ;
	}
	
	vegas.util.MathsUtil.sign = function  ( n /*Number*/ ) /*Number*/ {
		if (n == null || isNaN(n)) {
			throw new vegas.errors.IllegalArgumentError("MathsUtil.sign, Argument 'n' must not be 'null' or 'undefined' or 'NaN'") ;
		}
		return n<0 ? -1 : 1 ;
	}

	// ----o Encapsulate

	//trace ("***** running vegas.util.MathsUtil") ;
	
}
