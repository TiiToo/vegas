/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** Mixin

	AUTHOR

		Name : Mixin
		type : SSAS
		Package : vegas.util
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-06-13
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	DESCRIPTION 
	
		Fabrique du pattern Decorator basé sur l'injection dans le prototype d'une fonction constructor (Mixin)

	CONSTRUCTOR
	
		var mix:Mixin = new Mixin(constructor[Function], target|Object], attributes[Array])

	METHOD SUMMARY
	
		- getAttributes()
		
		- getConstructor()
		
		- getTarget()
		
		- run()
		
		- setAttributes(ar:Array)
		
		- setContructor(f:Function)
		
		- setTarget(o)
	
	INHERIT
	
		CoreObject → IRunnable → Mixin
	
	IMPLEMENTS
	
		IRunnable

**/ 

if (vegas.util.Mixin == undefined) {

	// ----o Imports
	
	require("vegas.core.CoreObject") ;
	require("vegas.util.factory.PropertyFactory") ;

	// ----o Constructor

	vegas.util.Mixin = function ( fConstructor/*Function*/, target, attributes/*Array*/ ) {
		
		this.setAttributes(attributes) ;
		this.setConstructor(fConstructor);
		this.setTarget(target) ;
		
	}

	// ----o Inherit

	vegas.util.Mixin.extend(vegas.core.IRunnable) ;

	// ----o Public Methods
	
	vegas.util.Mixin.prototype.getAttributes = function () /*Array*/ {
		return this._ar ;
	}

	vegas.util.Mixin.prototype.getConstructor = function () /*Function*/ {
		return this._c ;
	}	
	
	vegas.util.Mixin.prototype.getTarget = function () {
		return this._target ;
	}

	vegas.util.Mixin.prototype.run = function () /*Void*/ {
		if ( !this._ar || !this._c || !this._target ) return ;
		var instance = new this._c() ;
		var l /*Number*/ = this._ar.length ;
		while(--l > -1) {
			var prop /*String*/ = this._ar[l] ;
			this._target[prop] = instance[prop] ; 
		}
	}

	vegas.util.Mixin.prototype.setAttributes = function ( ar /*Array*/ ) /*Void*/ {
		this._ar = ar ;
	}

	vegas.util.Mixin.prototype.setConstructor = function ( f /*Function*/ ) /*Void*/ {
		this._c = f ;
	}

	vegas.util.Mixin.prototype.setTarget = function (o) /*Void*/ {
		this._target = o ;
	}

	// ----o Private Properties
	
	vegas.util.Mixin.prototype._ar /*Array*/ = null ;
	vegas.util.Mixin.prototype._c /*Function*/ = null ;
	vegas.util.Mixin.prototype._target = null ;

	// ----o Encapsulate

	//trace ("***** running vegas.util.Mixin") ;
	
}