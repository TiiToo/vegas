/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** Timer

	AUTHOR

		Name : Timer
		type : SSAS
		Package : vegas.util
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-28
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	USE
	
		Delegate = vegas.events.Delegate ;
		Timer = vegas.util.Timer ;
		
		var onDebug = function ( e  ) {
			trace("> " + e.getType()) ;
		}
		var timer = new Timer(1000, 4) ;
		timer.addGlobalEventListener( new Delegate(this, onDebug) ) ;
		trace("> " + timer) ;
		
		timer.start() ;
	
	PROPERTY SUMMARY
	
		- delay:Number [R/W] 
		
			The delay between timer events, in milliseconds.
		
		- repeatCount:Number [R/W]
			
			Specifies the number of repetitions. 
			If zero, the timer repeats infinitely. 
			If nonzero, the timer runs the specified number of times and then stops.
		
		- running:Boolean [Read Only]

	METHOD SUMMARY
	
		- clear() [override]
		
		- getDelay():Number
		
		- getRepeatCount():Number
		
		- restart()
		
			Restarts the timer. The timer is stopped, and then started.
		
		- run() [override]
		
		- setDelay(n:Number)
		
		- setRepeatCount(n:Number)
		
		- start()
		
			Starts the timer, if it is not already running.
		
		- stop()
		
			Stops the timer.
			

	EVENT SUMMARY
	
		TimerEvent
	
			- TimerEventType.RESTART
			
			- TimerEventType.START
			
			- TimerEventType.STOP
			
			- TimerEventType.TIMER
				A Timer object generates the timer event whenever a timer tick occurs.

	INHERIT
	
		CoreObject → EventDispatcher → AbstractTimer → Timer

	IMPLEMENTS 
	
		EventTarget, ICloneable, IEventDispatcher, IFormattable, ITimer, IRunnable
	
	SEE ALSO
	
		- EventDispatcher
		- TimerEvent
		- TimerEventType
	
**/ 

if (vegas.util.Timer == undefined) {

	// ----o Imports
	
	require("vegas.util.factory.PropertyFactory") ;

	// ----o Constructor

	vegas.util.Timer = function ( d /*Number*/ , count /*Number*/ ) 
	{
		
		// super() ;
		vegas.events.EventDispatcher.call(this) ;
		
		var TimerEvent /*Function*/ = vegas.events.TimerEvent ;
		var TimerEventType /*Function*/ = vegas.events.TimerEventType ;
		
		this._eRestart = new TimerEvent( TimerEventType.RESTART, this ) ;
		this._eStart = new TimerEvent( TimerEventType.START, this ) ;
		this._eStop = new TimerEvent(TimerEventType.STOP, this) ;
		this._eTimer = new TimerEvent( TimerEventType.TIMER , this ) ;
		
		this.setDelay( d ) ;
		
		this.setRepeatCount( count ) ;
		
	}

	// ----o Inherit

	vegas.util.Timer.extend(vegas.events.EventDispatcher) ;

	// ----o Public Methods
	
	vegas.util.Timer.prototype.clear = function () /*Void*/ 
	{
		clearInterval(this._itv) ;
	}

	vegas.util.Timer.prototype.clone = function () 
	{
		return new vegas.util.Timer(this.getDelay(), this.setRepeatCount()) ;
	}

	vegas.util.Timer.prototype.getDelay = function () 
	{
		return this._delay ;
	}
	
	vegas.util.Timer.prototype.getRepeatCount = function () 
	{
		return this._repeatCount ;
	}

	vegas.util.Timer.prototype.getRunning = function() /*Boolean*/ 
	{
		return this._running ;	
	}

	vegas.util.Timer.prototype.restart = function (noEvent /*Boolean*/) /*Void*/ 
	{
		if (this.getRunning()) this.stop() ;
		this._setRunning(true) ;
		this.run() ;
		if (noEvent != true) 
		{
			this.dispatchEvent( this._eRestart ) ;
		}
	}

	vegas.util.Timer.prototype.run = function () 
	{
		this._itv = setInterval(this, "_next", this._delay) ;
	}
	
	vegas.util.Timer.prototype.setDelay = function ( n /*Number*/ ) /*Void*/ 
	{
		this._delay = (n > 0) ? n : 0 ;
		if (this.getRunning()) {
			this.restart() ;
		}
	}

	vegas.util.Timer.prototype.setRepeatCount = function( n /*Number*/ )/*Void*/ 
	{
		this._repeatCount = (n > 0) ? n : 0 ;
	}

	vegas.util.Timer.prototype.start = function() /*Void*/ 
	{
		if (this.getRunning()) return ;
		this._count = 0 ;
		this.dispatchEvent( this._eStart ) ;
		this.restart(true) ;
	}
	
	vegas.util.Timer.prototype.stop = function() /*Void*/ 
	{
		this._setRunning(false) ;
		this.clear() ;
		this.dispatchEvent( this._eStop ) ;
	}

	vegas.util.Timer.prototype.toString = function () 
	{
		return "[Timer]" ;
	}

	// ----o Virtual Properties
	
	vegas.util.factory.PropertyFactory.create(vegas.util.Timer.prototype, "delay") ;
	
	vegas.util.factory.PropertyFactory.create(vegas.util.Timer.prototype, "repeatCount") ;
	
	vegas.util.factory.PropertyFactory.create(vegas.util.Timer.prototype, "running", true) ;

	// -----o Private Properties
	
	vegas.util.Timer.prototype._count /*Number*/ = null ;
	
	vegas.util.Timer.prototype._delay /*Number*/ = null ;
	
	vegas.util.Timer.prototype._itv /*Number*/ = null ;
	
	vegas.util.Timer.prototype._repeatCount /*Number*/ = null ;
	
	vegas.util.Timer.prototype._running /*Boolean*/ = null ;

	// ----o Protected Methods
	
	vegas.util.Timer.prototype._next = function() /*Void*/ 
	{
		this.dispatchEvent( this._eTimer ) ;
		this._count ++ ;
		if (this._repeatCount != 0 && this._repeatCount == this._count) {
			this.stop() ;
		}
	}
	
	/*protected*/ vegas.util.Timer.prototype._setRunning = function (b /*Boolean*/) /*Void*/ 
	{
		this._running = b ;
	}

	//trace ("***** running vegas.util.AbstractTimer") ;
	
}