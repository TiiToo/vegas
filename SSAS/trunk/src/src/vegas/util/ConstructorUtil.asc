/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** ConstructorUtil

	AUTHOR

		Name : ConstructorUtil
		type : SSAS
		Package : vegas.util
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-09
		Mail : vegas@ekameleon.net

	DESCRIPTION
	
		Constructor tools.
	
	METHOD SUMMARY
	
		- static createBasicInstance(class:Function)
		
		- static createInstance(class:Function, args:Array)
		
		- static getName(instance, scope):String
		
		- static getPackage(instance, scope):String
		
		- static getPath(instance, scope):String
		
		- static isImplementationOf(constructor:Function, interface:Function)
		
		- static isSubConstructorOf (subConstructor, superConstructor)

**/ 

_global.getPackage("vegas.util") ;

if (vegas.util.ConstructorUtil == undefined) {
	
	// ----o Singleton

	vegas.util.ConstructorUtil = {}

	var ConstructorUtil = vegas.util.ConstructorUtil ;

	// ----o Public Methods
	
	ConstructorUtil.createBasicInstance = function(c /*Function*/ ) {
		return new c ;
	}
	
	ConstructorUtil.createInstance = function(c/*Function*/ , args/*Array*/ ) {
		if (c == null) return null ;
		var i = vegas.util.ConstructorUtil.createBasicInstance(c) ;
		c.apply(i, args) ;
		return i ;
	}

	ConstructorUtil.getName = function (instance, scope) /*String*/ {
		var path /*String*/ = vegas.util.ConstructorUtil.getPath(instance, scope) ;
		if (path == null) return null ;
		var p /*Array*/ = path.split(".") ;
		return p.pop() || null ;
	}

	ConstructorUtil.getPackage = function (instance, scope) /*String*/ {
		var path /*String*/ = vegas.util.ConstructorUtil.getPath(instance, scope) ;
		if (path == null) {
			return null ;
		}
		var p /*Array*/ = path.split(".") ;
		p.pop() ;
		return p.join(".") ;
	}

	ConstructorUtil.getPath = function (instance, scope) /*String*/ {
		
		if (instance.__path__) {
			return instance.__path__ ;
		} else {
			var o ;
			if (typeof(instance)=="function") {
				o = instance.prototype ;
			} else {
				o = instance.__proto__ ;
			}
			var callee /*Function*/ ;
			var find /*Function*/ = function( s /*String*/, target ) {
				
				for ( var prop /*String*/ in target )  {
					
					var current /*Function*/ = target[prop] ;
					try {
						if ( current["constructor"] === Object ) {
							prop = callee( s + prop + ".", current );
							if ( prop ) return prop ;
						} else if ( current.prototype === o ) {
							return s + prop ;
						}
					} catch(e) {
						//
					}
				}
			};
			callee = find ;
			instance["__path__"] = (find( "", scope || _global )) || null ;
			return instance["__path__"] || null ;
			
		}
	}

	ConstructorUtil.isImplementationOf = function (c /*Function*/, i/*Function*/) /*Boolean*/ {
		if (vegas.util.ConstructorUtil.isSubConstructorOf(c, i)) return false;
		return vegas.util.ConstructorUtil.createBasicInstance(c) instanceof i ;
	}

	ConstructorUtil.isSubConstructorOf = function ( c/*Function*/, sc/*Function*/) /*Boolean*/ {
		if (c instanceof Function ) {
			var p = c.prototype ;
			while(p) {
				p = p.__proto__;
				if(p === sc.prototype) return true ;
			}
			return false;
		} else {
			trace ("c is not a Function")
		}
	}
	
	// ----o Encapsulate

	delete ConstructorUtil ;

	//trace ("***** running vegas.util.ConstructorUtil") ;
	
}