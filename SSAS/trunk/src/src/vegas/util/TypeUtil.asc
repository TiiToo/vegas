/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** TypeUtil

	AUTHOR

		Name : TypeUtil
		type : SSAS
		Package : vegas.util
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-09
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
		
	CONSTANT SUMMARY
	
		- const BOOLEAN
		
		- const DATE
		
		- const ERROR
		
		- const FUNCTION
		
		- const MOVIECLIP
		
		- const NULL
		
		- const NUMBER
		
		- const OBJECT
		
		- const STRING
		
		- const UNDEFINED
		
	METHOD SUMMARY
		
		- static compare(o1, o2) : Compares the type of 2 objects.
			
			Compares the types of two objects.
			
		- static isExplicitInstanceOf(o, class:Function)
			
			Checks if the passed-in object is an explicit instance of the passed-in class.
			
		- static isInstanceOf(o, type:Function)
			
			Checks if the passed-in object is an instance of the passed-in type.
		
		- static isPrimitive(o)
		
			Checks if the passed-in object is a primitive type.
			
		- static isTypeOf(o, type)
		
			Checks if the result of an execution of the typeof method on the passed-in object matches the passed-in type.
			
		- static typesMatch(o, type:Function)
		
			Checks if the type of the passed-in object matches the passed-in type
		
		- static toString(type:Function)
	
**/ 

if (vegas.util.TypeUtil == undefined) {

	// ----o Singleton

	vegas.util.TypeUtil = {}

	// ----o Constant

	vegas.util.TypeUtil.BOOLEAN = "boolean" ;
	vegas.util.TypeUtil.DATE = "date" ;
	vegas.util.TypeUtil.ERROR = "error" ;
	vegas.util.TypeUtil.FUNCTION = "function" ;
	vegas.util.TypeUtil.NULL = "null" ;
	vegas.util.TypeUtil.NUMBER = "number" ;
	vegas.util.TypeUtil.OBJECT = "object" ;
	vegas.util.TypeUtil.STRING = "string" ;
	vegas.util.TypeUtil.UNDEFINED = "undefined" ;
	
	// ----o Public Methods
	
	vegas.util.TypeUtil.compare = function(o1, o2) /*Boolean*/ {
		return typeof(o1) == typeof(o2) ;
	}
	
	vegas.util.TypeUtil.isExplicitInstanceOf = function (o, c/*Function*/) /*Boolean*/ {
		if (vegas.util.TypeUtil.isPrimitive(o)) {
			var tof /*String*/ = typeof(o) ;
			if (c == String) return (tof == vegas.util.TypeUtil.STRING) ;
			else if (c == Number) return (tof == vegas.util.TypeUtil.NUMBER) ;
			else if (c == Boolean) return (tof == vegas.util.TypeUtil.BOOLEAN) ;
		} 
		return o instanceof c ;
	}
	
	vegas.util.TypeUtil.isInstanceOf = function (o, type/*Function*/) /*Boolean*/ {
		if (type === Object) return true ;
		if (type == null) return false ;
		return (o instanceof type) ;
	}
	
	vegas.util.TypeUtil.isPrimitive = function(o) /*Boolean*/ {
		var tof /*String*/ = typeof(o) ;
		return (tof == vegas.util.TypeUtil.STRING || tof == vegas.util.TypeUtil.NUMBER || tof == vegas.util.TypeUtil.BOOLEAN) ;
	}
	
	vegas.util.TypeUtil.isTypeOf = function (o, type /*String*/ ) /*Boolean*/ {
		return typeof(o) == type ;
	}

	vegas.util.TypeUtil.typesMatch = function (o, type /*Function*/) /*Boolean*/ {
		if (type === Object) return true ;
		if ( vegas.util.TypeUtil.isPrimitive(o) ) {
			var tof /*String*/ = typeof(o) ;
			if (tof == vegas.util.TypeUtil.STRING && (type === String || vegas.util.ConstructorUtil.isSubConstructorOf(type, String))) return true;
			else if (tof == vegas.util.TypeUtil.BOOLEAN && (type === Boolean || vegas.util.ConstructorUtil.isSubConstructorOf(type, Boolean))) return true;
			else if (tof == vegas.util.TypeUtil.NUMBER && (type === Number || vegas.util.ConstructorUtil.isSubConstructorOf(type, Number))) return true;
			else return false;
		} else {
			return (vegas.util.TypeUtil.isInstanceOf(o, type));
		}
	}

	vegas.util.TypeUtil.toString = function (type /*Function*/ ) /*String*/ {
		if (type === undefined) return "undefined" ;
		if (type === null) return "null" ;
		var instance = vegas.util.ConstructorUtil.createBasicInstance(type) ;
		var path /*String*/  = instance.getConstructorPath() ;
		if ( path != null) return path ;
		else if (type == Array) return "Array" ;
		else if (type == Boolean) return "Boolean" ;
		else if (type == Date) return "Date" ;
		else if (type == Error) return "Error" ;
		else if (type == Number) return "Number" ;
		else if (type == String) return "String" ;
		else if (type == Function) return "Function" ;
		else return "Object" ;
	}

	// ----o Encapsulate

	//trace ("***** running vegas.util.TypeUtil") ;
	
}