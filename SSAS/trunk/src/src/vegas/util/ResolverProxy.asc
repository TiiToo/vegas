/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** ResolverProxy

	AUTHOR

		Name : ResolverProxy
		type : SSAS
		Package : vegas.util
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-06-13
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	DESCRIPTION
		Allow to link an object with another objet using __resolve
		instead of ASBroadcaster, EventBroadcaster, EventDispatcher, etc...
   
		ATTN: this a 1 to 1 relationship
		EventBroadcaster -> 1 to *    + unidirectional
		ResolverProxy    -> 1 to 1    + unidirectional or bidirectional
   
	NOTE: this can be used to connect a "Model" object
		  to a "View" object as an alternative to
		  "Model-View-Controller" or "visual proxy".
        
     EXAMPLES
     
         ex1:
         myModel = new Model();
         this.createView( "myView" );
         myView.setProxy(myModel);
         myModel.setProxy(myView) ;
         
         ex2:
         myModel = new Model();
         this.createView( "myView" );
         myView.link( myModel );
         
         the View and the Model share their methods
         and properties as they were only one object.

	INHERIT
	
		CoreObject â†’ ResolverProxy

	IMPLEMENTS

		IFormattable, IHashable

	SEE ALSO
	
		Mixin
    
	THANKS 
	
		Zwetan >> http://www.zwetan.com/	

**/ 

if (vegas.util.ResolverProxy == undefined) {

	// ----o Imports
	
	require("vegas.core.CoreObject") ;
	require("vegas.util.factory.PropertyFactory") ;
	require("vegas.util.Mixin") ;

	// ----o Constructor

	vegas.util.ResolverProxy = function ( proxy ) {
		
		this.setProxy( proxy ) ;
		
	}

	// ----o Inherit

	vegas.util.ResolverProxy.extend( vegas.core.CoreObject ) ;

	// ----o Public Methods
	
	vegas.util.ResolverProxy.initialize = function ( target ) {
		
		var attributes  = [ 
			"linkProxy"
			, "getProxy"
			, "setProxy" 
			, "__resolve"
			, "_proxy"
		] ;
		
		var mix = new vegas.util.Mixin( vegas.util.ResolverProxy, target, attributes) ;
		mix.run() ;
		
	}
	
	vegas.util.ResolverProxy.prototype.linkProxy = function ( linkedProxy ) {
		
		linkedProxy.setProxy(this) ;
		this.setProxy(linkedProxy) ;
		
	}	
	
	vegas.util.ResolverProxy.prototype.getProxy = function () {
		
		return this._proxy ;
		
	}
	
	vegas.util.ResolverProxy.prototype.setProxy = function ( proxy ) {
		
		this._proxy = proxy || null ;
		
	}

	// ----o Private Properties
	
	vegas.util.ResolverProxy.prototype._proxy = null ;

	// ----o Protected Methods
	
	vegas.util.ResolverProxy.prototype.__resolve = function ( name ) {
		
		if ( this._proxy == null ) return ;
		
		if( ! this._proxy.hasOwnProperty( name ) ) {
			
			if( this._proxy.__proto__[name] == undefined ) {
				return ;
			}
			
        }
		
		if( typeof( this._proxy[name] ) == "function" ) {
			
			var p = this._proxy ; 
				
			return function( ) {
				return p[name].apply( p, Array.fromArguments(arguments) );
			} ;
			
		} else {
			return this._proxy[name];
		}
	}
		
	// ----o Encapsulate

	//trace ("***** running vegas.util.ResolverProxy") ;
	
}