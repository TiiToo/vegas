/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/* ----- Class AbstractTimer

	AUTHOR

		Name : AbstractTimer
		type : SSAS
		Package : vegas.util
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-11
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
		
	PROPERTY SUMMARY
	
		- delay:Number [R/W] 
		
			The delay between timer events, in milliseconds.
		
		- repeatCount:Number [R/W]
			
			Specifies the number of repetitions. 
			If zero, the timer repeats infinitely. 
			If nonzero, the timer runs the specified number of times and then stops.
		
		- running:Boolean

	METHOD SUMMARY
	
		- clear() [override]
		
		- getDelay():Number
		
		- getRepeatCount():Number
		
		- restart()
		
			Restarts the timer. The timer is stopped, and then started.
		
		- run() [override]
		
		- setDelay(n:Number)
		
		- setRepeatCount(n:Number)
		
		- start()
		
			Starts the timer, if it is not already running.
		
		- stop()
		
			Stops the timer.
			

	EVENT SUMMARY
	
		TimerEvent
	
			- TimerEventType.RESTART
		
			- TimerEventType.START
		
			- TimerEventType.STOP
		
			- TimerEventType.TIMER
		
			A Timer object generates the timer event whenever a timer tick occurs.

	INHERIT
	
		EventDispatcher > AbstractTimer

	IMPLEMENTS 
	
		ITimer, Runnable, ToString

	SEE ALSO
	
		- EventDispatcher
		- TimerEvent
		- TimerEventType
	
	
	TODO : A FINIR !!!! Manque le système événementiel.
	
---------- */ 

load ("src/vegas/events/EventDispatcher.asc") ;
load ("src/vegas/events/TimerEvent.asc") ;
load ("src/vegas/events/TimerEventType.asc") ;
load ("src/vegas/util/ConstructorUtil.asc") ;

var namespace = _global.getPackage("vegas.util") ;

if (namespace.AbstractTimer == undefined) {
	
	// ----o Constructor

	vegas.util.AbstractTimer = function ( ar /*Array*/ ) { 
		//
	}

	var constructor = vegas.util.AbstractTimer ;
	var proto = constructor.extend (vegas.events.EventDispatcher) ;

	// ----o Public Methods
	
	proto.clear = function () {
		// override
	}

	proto.run = function () {
		// override
	}
	
	proto.getDelay = function () {
		return this._delay ;
	}
	
	proto.getRepeatCount = function () {
		return this._repeatCount ;
	}
	
	proto.restart = function (noEvent:Boolean):Void {
		if (this.running) stop() ;
		this.running = true ;
		this.run() ;
		if (noEvent != true) this.dispatchEvent( new vegas.events.TimerEvent( vegas.events.TimerEventType.RESTART, this) ) ;
	}
	
	proto.setDelay = function () {
		
	}

	proto.toString = function () /*String*/ {
		//
	}
	
	// ----o Encapsulate

	delete constructor ;
	delete proto ;
	
	//trace ("***** running vegas.util.AbstractTimer") ;
	
}

delete namespace ;