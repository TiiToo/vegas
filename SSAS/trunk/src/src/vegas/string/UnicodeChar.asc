/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** UnicodeChar

	AUTHOR

		Name : UnicodeChar
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-31
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net

	DESCRIPTION
	
		ECMA 262 Unicode IFormat-Control Characters
		>> http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf

	SPECIAL CHARACTERS
	
		- BACK_SLASH : Back Slash
		- BACK_SPACE : Back Space
		- DOUBLE_QUOTE : Double Quote
		- SIMPLE_QUOTE : Simple Quote
		
	WHITESPACE
	
		- TAB : Tab
		- VT : Vertical Tab
		- FF : Form Feed
		- SP : Space
		- NBSP : No-break space

		- WHITE_SPACE_CHARS : array with all whitespace characters
		
		NB : USP no implement (Any other Unicode "space separator")
	
	LINE TERMINATORS

		- LF : Line Feed
		- CR : Carriage Return
		- LS : Line Separator
		- PS : Paragraph Separator

		- LINE_TERMINATOR_CHARS : array with all line terminators characters
		
	METHOD SUMMARY
	
		- isWhiteSpace( char:String ):Boolean
		
		- isLineTerminators( char:String ):Boolean
		
		- toChar( unicode:String ):Char
		
		- toUnicode(n:Number):String	

	EXAMPLE
	
		var UnicodeChar = vegas.string.UnicodeChar ;
		
		trace(UnicodeChar.isWhiteSpace(" ")) ; // SPACE
		trace(UnicodeChar.isWhiteSpace("	")) ; // TAB
		
		trace(UnicodeChar.isLineTerminators(UnicodeChar.LF)) ; 
		
		trace("> " + UnicodeChar.toChar("0040")) ;
		trace("> " + UnicodeChar.toUnicode(220)) ;

**/ 
/**
 * ECMA 262 Unicode IFormat-Control Characters tools.
 * <p><b>Example :</b></p>
 * {@code
 * Char        = vegas.core.types.Char ;
 * UnicodeChar = vegas.string.UnicodeChar ;
 * 
 * trace (UnicodeChar.WHITE_SPACE_CHARS.length) ;
 *   
 * var str = UnicodeChar.TAB + "coucou" ;
 * trace (str) ;
 *  
 * var s = new Char('\t') ;
 * var b = UnicodeChar.isWhiteSpace(s) ;
 * trace ("isWhiteSpace : " + b) ;
 *  
 * var unicode = "0040" ;
 * var char = UnicodeChar.toChar(unicode) ;
 * trace(">> " + char) ;
 * }
 * @author eKameleon
 * @see <a href='http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf'>ECMAScript 262 specifications</a>
 */
if (vegas.string.UnicodeChar == undefined) {
	
	/**
	 * @requires vegas.core.types.Char
	 */
	require("vegas.core.types.Char") ;
	
	/**
	 * Creates the UnicodeChar reference.
	 */
	vegas.string.UnicodeChar = {} ;

	/**
	 * Back Slash utf8 representation (special char).
	 */
	vegas.string.UnicodeChar.BACK_SLASH /*String*/ = "\u005C" ;	

	/**
	 * Back Space utf8 representation (special char).
	 */
	vegas.string.UnicodeChar.BACK_SPACE /*String*/ = "\u0008" ;
	
	/**
	 * Simple Quote utf8 representation (special char).
	 */
	vegas.string.UnicodeChar.SIMPLE_QUOTE /*String*/ = "\u0027" ;

	/**
	 * Double Quote utf8 representation (special char).
	 */
	vegas.string.UnicodeChar.DOUBLE_QUOTE /*String*/ = "\u0022" ;
	
	/**
	 * Tab utf8 representation (whitespace).
	 */
	vegas.string.UnicodeChar.TAB /*String*/ = "\u0009" ; // Tab

	/**
	 * Vertical Tab utf8 representation (whitespace).
	 */
	vegas.string.UnicodeChar.VT /*String*/ = "\u000B" ; // Vertical Tab
	
	/**
	 * Form Feed utf8 representation (whitespace).
	 */
	vegas.string.UnicodeChar.FF /*String*/ = "\u000C" ; // Form Feed
	
	/**
	 * Space utf8 representation (whitespace).
	 */
	vegas.string.UnicodeChar.SP /*String*/ = "\u0020" ; // Space

	/**
	 * No-break space utf8 representation (whitespace).
	 */
	vegas.string.UnicodeChar.NBSP /*String*/ = "\u00A0" ; // 

	/**
	 * Array with all whitespace characters. NB : USP no implement (Any other Unicode "space separator")
	 */
	vegas.string.UnicodeChar.WHITE_SPACE_CHARS /*Array*/ = 
	[ 
		vegas.string.UnicodeChar.TAB , 
		vegas.string.UnicodeChar.VT , 
		vegas.string.UnicodeChar.FF , 
		vegas.string.UnicodeChar.SP , 
		vegas.string.UnicodeChar.NBSP ,
		" "
	] ;
	
	/**
	 * Line Feed utf8 representation (line terminators).
	 */
	vegas.string.UnicodeChar.LF /*String*/ = "\u000A" ; // Line Feed : UNIX Based Systems - DOS

	/**
	 * Carriage Return utf8 representation (line terminators).
	 */
	vegas.string.UnicodeChar.CR /*String*/ = "\u000D" ; // Carriage Return : Apple Machintosh - DOS

	/**
	 * Line Separator utf8 representation (line terminators).
	 */
	vegas.string.UnicodeChar.LS /*String*/ = "\u2028" ; 

	/**
	 * Paragraph Separator utf8 representation (line terminators).
	 */
	vegas.string.UnicodeChar.PS /*String*/ = "\u2029" ;	
	
	/**
	 * Array with all line terminators characters
	 */
	vegas.string.UnicodeChar.LINE_TERMINATOR_CHARS /*Array*/ = 
	[ 
		vegas.string.UnicodeChar.LF, 
		vegas.string.UnicodeChar.CR, 
		vegas.string.UnicodeChar.LS, 
		vegas.string.UnicodeChar.PS 
	] ;
	
	/**
	 * Returns {@code true} of the specified character is a whitespace.
	 * @return {@code true} of the specified character is a whitespace.
	 */
	vegas.string.UnicodeChar.isWhiteSpace = function ( ch /*String*/ ) /*Boolean*/ 
	{
		var c /*Char*/ = new vegas.core.types.Char(ch) ;
		var ar/*Array*/ = vegas.string.UnicodeChar.WHITE_SPACE_CHARS ;
		var l /*Number*/ = ar.length ;
		while (--l > -1) 
		{
			if (ar[l] == c) return true ;
		}
		return false ;
	}

	/**
	 * Returns {@code true} of the specified character is a line terminator.
	 * @return {@code true} of the specified character is a line terminator.
	 */
	vegas.string.UnicodeChar.isLineTerminators = function ( ch /*String*/ ) /*Boolean*/ 
	{
		var c /*Char*/ = new vegas.core.types.Char(ch) ;
		var ar /*Array*/ = vegas.string.UnicodeChar.LINE_TERMINATOR_CHARS ;
		var l /*Number*/ = ar.length ;
		while (--l > -1) {
			if (ar[l] == c) return true ;
		}
		return false ;
	}

	/**
	 * Converts a unicode representation and returns this char's string.
	 * @return The char of the unicode representation.
	 */
	vegas.string.UnicodeChar.toChar = function ( unicode /*String*/ ) /*Char*/ 
	{
		return new vegas.core.types.Char(String.fromCharCode(parseInt( unicode, 16))) ;
	}

	/**
	 * Converts an unicode number value and returns this string representation.
	 * @return The string representation of a unicode number.
	 */
	vegas.string.UnicodeChar.toUnicode = function (n /*Number*/) /*String*/ 
	{
		var hex /*String*/ = n.toString(16) ;
		while( hex.length < 4 ) {
			hex = "0" + hex ;
		}
		return hex ;
	}

}