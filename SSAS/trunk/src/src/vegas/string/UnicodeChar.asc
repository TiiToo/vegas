/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** UnicodeChar

	AUTHOR

		Name : UnicodeChar
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-31
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net

	DESCRIPTION
	
		ECMA 262 Unicode IFormat-Control Characters
		>> http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf

	SPECIAL CHARACTERS
	
		- BACK_SLASH : Back Slash
		- BACK_SPACE : Back Space
		- DOUBLE_QUOTE : Double Quote
		- SIMPLE_QUOTE : Simple Quote
		
	WHITESPACE
	
		- TAB : Tab
		- VT : Vertical Tab
		- FF : Form Feed
		- SP : Space
		- NBSP : No-break space

		- WHITE_SPACE_CHARS : array with all whitespace characters
		
		NB : USP no implement (Any other Unicode "space separator")
	
	LINE TERMINATORS

		- LF : Line Feed
		- CR : Carriage Return
		- LS : Line Separator
		- PS : Paragraph Separator

		- LINE_TERMINATOR_CHARS : array with all line terminators characters
		
	METHOD SUMMARY
	
		- isWhiteSpace( char:String ):Boolean
		
		- isLineTerminators( char:String ):Boolean
		
		- toChar( unicode:String ):Char
		
		- toUnicode(n:Number):String	

	EXAMPLE
	
		var UnicodeChar = vegas.string.UnicodeChar ;
		
		trace(UnicodeChar.isWhiteSpace(" ")) ; // SPACE
		trace(UnicodeChar.isWhiteSpace("	")) ; // TAB
		
		trace(UnicodeChar.isLineTerminators(UnicodeChar.LF)) ; 
		
		trace("> " + UnicodeChar.toChar("0040")) ;
		trace("> " + UnicodeChar.toUnicode(220)) ;

**/ 

if (vegas.string.UnicodeChar == undefined) {
	
	// ----o Imports
	
	require("vegas.core.types.Char") ;
	
	// ----o Singleton

	vegas.string.UnicodeChar = {} ;

	// ---- Special Char

	vegas.string.UnicodeChar.BACK_SLASH /*String*/ = "\u005C" ;	
	vegas.string.UnicodeChar.BACK_SPACE /*String*/ = "\u0008" ;
	vegas.string.UnicodeChar.SIMPLE_QUOTE /*String*/ = "\u0027" ;
	vegas.string.UnicodeChar.DOUBLE_QUOTE /*String*/ = "\u0022" ;
	
	// ---- WhiteSpace

	vegas.string.UnicodeChar.TAB /*String*/ = "\u0009" ; // Tab
	vegas.string.UnicodeChar.VT /*String*/ = "\u000B" ; // Vertical Tab
	vegas.string.UnicodeChar.FF /*String*/ = "\u000C" ; // Form Feed
	vegas.string.UnicodeChar.SP /*String*/ = "\u0020" ; // Space
	vegas.string.UnicodeChar.NBSP /*String*/ = "\u00A0" ; // 

	vegas.string.UnicodeChar.WHITE_SPACE_CHARS /*Array*/ = [ 
		vegas.string.UnicodeChar.TAB , 
		vegas.string.UnicodeChar.VT , 
		vegas.string.UnicodeChar.FF , 
		vegas.string.UnicodeChar.SP , 
		vegas.string.UnicodeChar.NBSP ,
		" "
	] ;
	
	// ---- Line Terminators
	
	vegas.string.UnicodeChar.LF /*String*/ = "\u000A" ; // Line Feed : UNIX Based Systems - DOS
	vegas.string.UnicodeChar.CR /*String*/ = "\u000D" ; // Carriage Return : Apple Machintosh - DOS
	vegas.string.UnicodeChar.LS /*String*/ = "\u2028" ; 
	vegas.string.UnicodeChar.PS /*String*/ = "\u2029" ;	

	vegas.string.UnicodeChar.LINE_TERMINATOR_CHARS /*Array*/ = [ 
		vegas.string.UnicodeChar.LF, 
		vegas.string.UnicodeChar.CR, 
		vegas.string.UnicodeChar.LS, 
		vegas.string.UnicodeChar.PS 
	] ;

	// ----o Public Methods

	vegas.string.UnicodeChar.isWhiteSpace = function ( ch /*String*/ ) /*Boolean*/ {
		var c /*Char*/ = new vegas.core.types.Char(ch) ;
		var ar/*Array*/ = vegas.string.UnicodeChar.WHITE_SPACE_CHARS ;
		var l /*Number*/ = ar.length ;
		while (--l > -1) {
			if (ar[l] == c) return true ;
		}
		return false ;
	}

	vegas.string.UnicodeChar.isLineTerminators = function ( ch /*String*/ ) /*Boolean*/ {
		var c /*Char*/ = new vegas.core.types.Char(ch) ;
		var ar /*Array*/ = vegas.string.UnicodeChar.LINE_TERMINATOR_CHARS ;
		var l /*Number*/ = ar.length ;
		while (--l > -1) {
			if (ar[l] == c) return true ;
		}
		return false ;
	}

	vegas.string.UnicodeChar.toChar = function ( unicode /*String*/ ) /*Char*/ {
		return new vegas.core.types.Char(String.fromCharCode(parseInt( unicode, 16))) ;
	}

	vegas.string.UnicodeChar.toUnicode = function (n /*Number*/) /*String*/ {
		var hex /*String*/ = n.toString(16) ;
		while( hex.length < 4 ) {
			hex = "0" + hex ;
		}
		return hex ;
	}

	// ----o Encapsulate
	
	// trace ("***** running vegas.string.UnicodeChar") ;

}