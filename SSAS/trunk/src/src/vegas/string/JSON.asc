/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
	
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** JSON
 
	AUTHOR
	
		Name : JSON
		type : SSAS
		Package : vegas.string
		Version : 1.0.0.0
		Date :  2006-04-28
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net

	DESCRIPTION

		JSON (JavaScript object Notation) is a lightweight data-interchange format.
		
		Serializer & deserializer in AS2.
		
		MORE INFORMATION IN : http://www.json.org/
		
		ADD HEXA DIGITS in deserialize method - EDEN inspiration : http://www.burrrn.com/projects/eden.html

	METHOD SUMMARY
	
		- static deserialize(source:String):Object
		
		- static serialize(o):String

	EXAMPLE
	
		var o = { 
			x : 25 , 
			msg : "test" , 
			color : 0xFF0000 , 
			isValid : true, 
			data:[2, true, "hello"]
		} ;
		
		var JSON = vegas.string.JSON ;
		
		var source = JSON.serialize(o) ;
		trace("> " + source) ;
		
		var source = '{ "color":0xFF0000 , "n":2 , "data":[true, "coucou"] }' ;
		
		var o = JSON.deserialize(source) ;
		trace(">JSON.deserialize source : " + source) ;
		trace("     > o.color : " + o.color) ;
		trace("     > o.data : " + o.data) ;
		trace("     > o.n : " + o.n) ;
		
		delete JSON ;

**/

if (vegas.string.JSON == undefined) {
	
	// ----o Imports
	
	require("vegas.string.errors.JSONError") ;
	
	// ----o Singleton
 
	vegas.string.JSON = {}
	
	// ----o Public Methods
	
	vegas.string.JSON.deserialize = function ( source ) {
		
		source = new String(source) ; // Speed ;
		var at /*Number*/ = 0 ;
		var ch /*String*/ = ' ' ;
		
		var _isDigit, _isHexDigit, _white, _string, _next ;
		var _array, _object, _number, _word, _value, _error ;
		
		_isDigit = function( c /*Char*/ ) {
    		return( ("0" <= c) && (c <= "9") );
    	} ;
			
		_isHexDigit = function( c /*Char*/  ) {
    		return( _isDigit( c ) || (("A" <= c) && (c <= "F")) || (("a" <= c) && (c <= "f")) );
    	} ;
				
        _error = function( msg /*String*/ ) {
            throw new vegas.string.errors.JSONError( msg, at - 1 , source) ;
        } ;
		
        _next = function() {
            ch = source.charAt(at);
            at += 1;
            return ch;
        } ;
		
		
		_white = function () {
           while (ch) {
                if (ch <= ' ') {
                    _next();
                } else if (ch == '/') {
                    switch (_next()) {
                        case '/':
                            while (_next() && ch != '\n' && ch != '\r') {}
                            break;
                        case '*':
                            _next();
                            for (;;) {
                                if (ch) {
                                    if (ch == '*') {
                                        if (_next() == '/') {
                                            _next();
                                            break;
                                        }
                                    } else {
                                        _next();
                                    }
                                } else {
                                    _error("Unterminated Comment");
                                }
                            }
                            break;
                        default:
                            _error("Syntax Error");
                    }
                } else {
                    break;
                }
            }
        } ;
		
        _string = function () {
            var i, s = '', t, u;
			var outer /*Boolean*/ = false;
			if (ch == '"') {
				while (_next()) {
                    if (ch == '"') {
                        _next();
                        return s;
                    } else if (ch == '\\') {
                        switch (_next()) {
                        case 'b':
                            s += '\b';
                            break;
                        case 'f':
                            s += '\f';
                            break;
                        case 'n':
                            s += '\n';
                            break;
                        case 'r':
                            s += '\r';
                            break;
                        case 't':
                            s += '\t';
                            break;
                        case 'u':
                            u = 0;
                            for (i = 0; i < 4; i += 1) {
                                t = parseInt(_next(), 16);
                                if (!isFinite(t)) {
                                    outer = true;
									break;
                                }
                                u = u * 16 + t;
                            }
							if(outer) {
								outer = false;
								break;
							}
                            s += String.fromCharCode(u);
                            break;
                        default:
                            s += ch;
                        }
                    } else {
                        s += ch;
                    }
                }
            }
            _error("Bad String");
        };
		
		_array = function() {
            var a = [];
            if (ch == '[') {
                _next();
                _white();
                if (ch == ']') {
                    _next();
                    return a;
                }
                while (ch) {
                    a.push(_value());
                    _white();
                    if (ch == ']') {
                        _next();
                        return a;
                    } else if (ch != ',') {
                        break;
                    }
                    _next();
                    _white();
                }
            }
            _error("Bad Array");
        };
		
        _object = function () {
            var k, o = {} ;
            if (ch == '{') {
                _next();
                _white();
                if (ch == '}') {
                    _next();
                    return o;
                }
                while (ch) {
                    k = _string();
                    _white() ;
                    if (ch != ':') {
                        break;
                    }
                    _next();
                    o[k] = _value();
                    _white();
                    if (ch == '}') {
                        _next();
                        return o;
                    } else if (ch != ',') {
                        break;
                    }
                    _next();
                    _white();
                }
            }
            _error("Bad Object") ;
        };
		
        _number = function () {
            
            var n = '' ;
            var v /*Number*/ ;
			var hex /*String*/ = '' ;
			var sign /*String*/ = '' ;
			
            if (ch == '-') {
                n = '-';
                sign = n ;
                _next();
            }
            
            if( ch == "0" ) {
        		_next() ;
				if( ( ch == "x") || ( ch == "X") ) {
            		_next();
            		while( _isHexDigit( ch ) ) {
                		hex += ch ;
                		_next();
                	}
            		if( hex == "" ) {   
            			_error("mal formed Hexadecimal") ;
					} else {
						return Number( sign + "0x" + hex ) ;
					}
            	} else {
	            	n += "0" ;
            	}
			}
				
            while ( _isDigit(ch) ) {
                n += ch;
                _next();
            }
            if (ch == '.') {
                n += '.';
                while (_next() && ch >= '0' && ch <= '9') {
                    n += ch;
                }
            }
            v = 1 * n ;
            if (!isFinite(v)) {
                _error("Bad Number");
            } else {
                return v;
            }
        };
		
        _word = function () {
            switch (ch) {
                case 't':
                    if (_next() == 'r' && _next() == 'u' && _next() == 'e') {
                        _next();
                        return true;
                    }
                    break;
                case 'f':
                    if (_next() == 'a' && _next() == 'l' && _next() == 's' && _next() == 'e') {
                        _next();
                        return false;
                    }
                    break;
                case 'n':
                    if (_next() == 'u' && _next() == 'l' && _next() == 'l') {
                        _next();
                        return null;
                    }
                    break;
            }
            _error("Syntax Error");
        };
		
        _value = function () {
            _white();
            switch (ch) {
                case '{':
                    return _object();
                case '[':
                    return _array();
                case '"':
                    return _string();
                case '-':
                    return _number();
                default:
                    return ch >= '0' && ch <= '9' ? _number() : _word();
            }
        };
		
        return _value() ;
		
	}
	
	vegas.string.JSON.serialize = function (o) /*String*/ {
		var JSON = vegas.string.JSON ;
        var c, i, l /*Number*/ ;
		var s /*String*/ = '' ;
		var v ;
        switch (typeof o) {
			case 'object':
				if (o) {
					if (o instanceof Array) {
						l = o.length ;
						for (i = 0 ; i < l ; ++i) {
							v = JSON.serialize(o[i]);
							if (s) s += ',' ;
							s += v ;
						}
						return '[' + s + ']';
					} else if (typeof o.toString != 'undefined') {
						for (i in o) {
							v = o[i];
							if (typeof v != 'undefined' && typeof v != 'function') {
								v = JSON.serialize(v);
								if (s) s += ',';
								s += JSON.serialize(i) + ':' + v ;
							}
						}
						return '{' + s + '}';
					}
				}
				return 'null';
			
			case 'number':
				return isFinite(o) ? String(o) : 'null' ;
			
			case 'string':
				l = o.length ;
				s = '"';
				for (i = 0 ; i < l ; i += 1) {
					c = o.charAt(i);
					if (c >= ' ') {
						if (c == '\\' || c == '"') {
							s += '\\';
						}
						s += c;
					} else {
						switch (c) {
							case '\b':
								s += '\\b';
								break;
							case '\f':
								s += '\\f';
								break;
							case '\n':
								s += '\\n';
								break;
							case '\r':
								s += '\\r';
								break;
							case '\t':
								s += '\\t';
								break;
							default:
								c = c.charCodeAt() ;
								s += '\\u00' + (Math.floor(c / 16).toString(16)) + ((c % 16).toString(16)) ;
						}
					}
				}
				return s + '"';
				
			case 'boolean':
				return String(o);
			
			default:
				return 'null';
			
        }
    }

}
