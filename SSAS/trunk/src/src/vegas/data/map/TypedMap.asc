/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** TypedMap

	AUTHOR

		Name : TypedMap
		type : SSAS
		Package : vegas.data.map
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-17
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
		
	CONSTRUCTOR
	
		var tm:TypedMap = new vegas.data.map.TypedMap( type:Function , map:Map) 

	METHOD SUMMARY
	
		- clear():Void
		
		- clone()
		
		- containsKey(o):Boolean
		
		- containsValue(o):Boolean
		
		- get(key)
		
		- getKeys():Array
		
		- getValues():Array
		
		- getType()
		
		- isEmpty()
		
		- iterator()
		
		- keyIterator():Iterator
		
		- put(key, value)
		
		- putAll(m:Map):Void
		
		- remove(o)
		
		- setType(type:Function) : set the type and clear TypedArray
		
		- size():Number
		
		- toSource():String
		
		- toString():String

	INHERIT
	
		Object > AbstractTypeable > TypedMap

	IMPLEMENTS
	
		Cloneable, Iterable, Map, Serializable, Typeable, Validator	
	
	EXAMPLE	

		var map1 = new vegas.data.map.HashMap() ;
		map1.put("key1", "value1") ;
		map1.put("key2", "value2") ;
		map1.put("key3", "value3") ;
		
		var map2 = new vegas.data.map.HashMap() ;
		map2.put("key4", "value1") ;
		map2.put("key5", "value2") ;
		
		var tm = new vegas.data.map.TypedMap(String, map1) ;
		tm.put("key1", "value0") ;
		tm.putAll(map2) ;
		trace ("typedMap : " + tm) ;
		trace ("typedMap toSource : " + tm.toSource()) ;
		tm.put("key7", 2) ;

**/ 

_global.getPackage("vegas.data.map") ;

if (vegas.data.map.TypedMap == undefined) {

	// ----o Imports

	loadFile("vegas/util/AbstractTypeable.asc") ;
	loadFile("vegas/util/TypeUtil.asc") ;

	// ----o Constructor

	vegas.data.map.TypedMap = function ( type /*Function*/ , map /*Map*/ ) { 
		this.__constructor__.call(this, type) ;
		if (map == null) throw new Error("IllegalArgumentError:Argument 'map' must not be 'null' or 'undefined'") ;
		if (map.size() > 0) {
			var it = map.iterator() ;
			while ( it.hasNext() ) this.validate(it.next()) ;
		}
		this._map = map ;
	}

	// ----o Inherit

	var constructor = vegas.data.map.TypedMap ;
	var proto = constructor.extend(vegas.util.AbstractTypeable) ;

	// ----o Public Methods
	
	proto.clear = function () {
		this._map.clear() ;
	}
	
	proto.clone = function () {
		return new vegas.data.map.TypedMap(this.getType(), this._map) ;
	}

	proto.containsKey = function ( key ) /*Boolean*/ {
		return this._map.containsKey(key) ;
	}

	proto.containsValue = function ( value ) /*Boolean*/ {
		return this._map.containsValue(value) ;
	}

	proto.get = function (key) {
		return this._map.get(key) ;
	}
	
	proto.getKeys = function () /*Array*/ {
		return this._map.getKeys() ;
	}

	proto.getValues = function () /*Array*/ {
		return this._map.getValues() ;
	}

	proto.isEmpty = function () /*Boolean*/ {
		return this._map.isEmpty() ;
	}
	
	proto.iterator = function () /*Iterator*/ {
		return this._map.iterator() ;
	}
	
	proto.keyIterator = function () /*Iterator*/ {
		return this._map.keyIterator() ;
	}
	
	proto.put = function (key, value) {
		this.validate(value) ;
		return this._map.put(key, value) ;
	}
	
	proto.putAll = function (m /*Map*/) {
		var it = m.iterator() ;
		while(it.hasNext()) this.validate(it.next()) ;
		this._map.putAll(m) ;
	}
	
	proto.remove = function (key) {
		return this._map.remove() ;
	}
	
	proto.setType = function (type /*Function*/ ) {
		this.__constructor__.prototype.setType.call(this, type) ;
		this._map.clear() ;
	}
	
	proto.size = function () /*Number*/ {
		return this._map.size() ;
	}
	
	proto.toSource = function (indent, indentor) /*String*/ {
		var sourceA/*String*/ = vegas.util.TypeUtil.toString(this._type) ;
		var sourceB/*String*/ = this._map.toSource() ;
		return "new " + vegas.util.ConstructorUtil.getPath(this) + "(" + sourceA + "," + sourceB + ")" ;
	}
	
	proto.toString = function () {
		return this._map.toString() ;
	}
	
	// ----o Encapsulate

	delete constructor ;
	delete proto ;
	
	//trace ("***** running vegas.data.map.TypedMap") ;
	
}