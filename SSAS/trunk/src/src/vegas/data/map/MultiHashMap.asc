/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** MultiHashMap

	AUTHOR

		Name : MultiHashMap
		type : SSAS
		Package : vegas.data.map
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-18
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	CONSTRUCTOR
	
		var m:MultiHashMap = new vegas.data.map.MultiHashMap( m:Map ) ;
	
	ARGUMENTS
	
		m : copies the input map creating an independant copy
		
	METHOD SUMMARY
	
		- clear()
		
		- clone()
		
		- containsKey(key)
		
		- containsValue()
		
		- get(key)
		
		- getkeys()
		
		- getValues()
		
		- isEmpty():Boolean
		
		- iterator([key]) 
		
		- keyIterator()
				
		- put(key, value)
		
			Adds the value to the collection associated with the specified key.
		
		- putCollection(key, collection:Collection)
		
		- putAll(map:Map) 
		
		- remove(key, [value]) 
		
			If value is undefined; removes all values associated with the specified key.
			
			If value is defined, removes a specific value from map.
		
		- size():Number
		
		- toSource():String
		
		- toString():String
		
		- totalSize():Number
		
		- values()
		
			Gets a collection containing all the values in the map.
		
		- valueIterator()
			
			get a iterator to browse collections in MultiMap
	
	INHERIT
	
		HashMap
	
	IMPLEMENTS
	
		Cloneable, Iterable, Map, MultiMap, Serializable, ToString

	SEE ALSO
	
		MapIterator, MapFormat

	EXAMPLE
	
		var map1 = new vegas.data.map.HashMap() ;
		map1.put("key1", "valueD1") ;
		map1.put("key2", "valueD2") ;
		
		trace ("--- user map argument in constructor") ;
		var map = new vegas.data.map.MultiHashMap(map1) ;
		trace ("init map : " + map) ;
		trace("map toSource : " + map.toSource()) ;
		trace ("--- put values in MultiMap") ;
		
		map.put("key1", "valueA1") ;
		map.put("key1", "valueA2") ;
		map.put("key1", "valueA3") ;
		map.put("key2", "valueB1") ;
		map.put("key2", "valueB2") ;
		map.put("key3", "valueC1") ;
		map.put("key3", "valueC2") ;
		
		trace ("key1 >> " + map.get("key1")) ;
		trace ("key2 >> " + map.get("key2")) ;
		trace ("key3 >> " + map.get("key3")) ;
		
		trace ("\r--- toString MultiMap") ;
		trace (map) ;
		
		map.remove("key1", "valueA2") ;
		trace ("\r--- remove a value in key1 >> " + map.get("key1")) ;
		
		trace ("\r--- use a key iterator : key1") ;
		var it = map.iterator("key1") ;
		while(it.hasNext()) {
			trace ("\t :: " + it.next()) ;
		}
		
		trace ("\r--- putCollection key2 in key1") ;
		map.putCollection("key1", map.get("key2")) ;
		trace ("key1 >> " + map.get("key1")) ;
		
		trace ("\r--- different size") ;
		trace ("map size : " + map.size()) ;
		trace ("map totalSize : " + map.totalSize()) ;
		
		trace ("\r--- clone MultiMap") ;
		var clone = map.clone() ;
		clone.remove("key1") ;
		
		trace ("map size : " + map.totalSize()) ;
		trace ("clone size : " + clone.totalSize()) ;
	
	TODO Voir les todo de cette classe.
	TODO vegas.data.map.MultiHashMap.prototype.putAll Voir à créer l'interface/class Collection 
	
**/ 

if (vegas.data.map.MultiHashMap == undefined) {

	// ----o Imports
	
	load(PATH + "vegas/data/map/HashMap.asc") ;

	// ----o Constructor

	vegas.data.map.MultiHashMap = function ( m /*Map*/ ) { 
		
		this._map = new vegas.data.map.HashMap() ;
		// TODO ici utiliser plutot une copy et pas un clone
		if (m != undefined) {
			this.putAll( m ) ;
		}
	}

	// ----o Inherit

	vegas.data.map.MultiHashMap.extend(vegas.data.map.HashMap) ;

	// ----o Public Methods

	/**
	 * This clears each collection in the map, and so may be slow.
	 */
	vegas.data.map.MultiHashMap.prototype.clear = function () {
		this._map.clear() ;
	}

	/**
	 * Creates a new instance of the map value Collection container.
	 * This method can be overridden to use your own collection type.
	 */
	vegas.data.map.MultiHashMap.prototype.createCollection = function () /*Collection*/ {
		return new vegas.data.collections.SimpleCollection() ;	
	}

	/**
	 * Clones the map.
	 */
	vegas.data.map.MultiHashMap.prototype.clone = function () {
		var m = new vegas.data.map.MultiHashMap() ;
		var vItr = this.valueIterator() ;
		var kItr = this.keyIterator() ;
		while (kItr.hasNext()) {
			var key = kItr.next() ;
			var value = vItr.next() ;
			m.putCollection(key, value) ;
		}
		return m ;
	}

	/**
	 * Checks whether the map contains the key specified.
	 */
	vegas.data.map.MultiHashMap.prototype.containsKey = function ( key ) /*Boolean*/ {
		return this._map.containsKey(key) ;
	}

	/**
	 * Checks whether the map contains the value specified or at the specified key contains the value.
	 * @example
	 * <code>
	 * 		var b:Boolean = map.containsValue(key, value) ;
	 * 		
	 * 		var b:Boolean = map.containsValue(value) ;
	 * </code>
	 */
	vegas.data.map.MultiHashMap.prototype.containsValue = function ( value ) /*Boolean*/ {
		var len = arguments.length ;
		if (len == 2) {
			var value = arguments[0] ;
			var it = this._map.iterator() ;
			while (it.hasNext()) {
				var cur = it.next() ;
				if (cur.contains(value)) return true;
			}
		} else if (len == 1) {
			return (this.get(arguments[0])).contains(arguments[1]) ;
		}
		return false ;
	}

	/**
	 * Gets the collection mapped to the specified key. This method is a convenience method to typecast the result of get(key).
	 */
	vegas.data.map.MultiHashMap.prototype.get = function (key) {
		return this._map.get(key) ;
	}

	/**
	 * Checks whether the map contains the key specified .
	 */
	vegas.data.map.MultiHashMap.prototype.getKeys = function () /*Array*/ {
		return this._map.getKeys() ;
	}

	/**
	 * This returns an array containing the combination of values from all keys.
	 */
	vegas.data.map.MultiHashMap.prototype.getValues = function () /*Array*/ {
		var ar = [] ;
		var it = this._map.iterator() ;
		while (it.hasNext()) {
			ar.concat(it.next().getValues()) ;
		}
		return ar ;
	}

	/**
	 * Returns whether this MultiHashSet contains any mappings.
	 * 
	 * @return {@code true} if this MultiHashSet contains any mappings else {@code false}
	 */
	vegas.data.map.MultiHashMap.prototype.isEmpty = function () /*Boolean*/ {
		return _map.isEmpty() ;
	}
	
	/**
	 * Gets an iterator for the collection mapped to the specified key.
	 */	
	vegas.data.map.MultiHashMap.prototype.iterator = function ( /*key*/ ) /*Iterator*/ {
		var key = arguments[0] ;
		if (key != undefined) {
			return this._map.get(key).iterator() ;
		} else {
			return this._map.iterator() ;
		}
	}


	vegas.data.map.MultiHashMap.prototype.keyIterator = function () /*Iterator*/ {
		return this._map.keyIterator() ;
	}

	/**
	 * Adds the value to the collection associated with the specified key.
	 */
	vegas.data.map.MultiHashMap.prototype.put = function (key, value) {
		if (this.containsKey(key) == false) {
			this._map.put(key , this.createCollection()) ;
		}
		var b = this._map.get(key).insert(value) ;
		return b ? value : null ;
	}

	/**
	 * Override superclass to ensure that MultiMap instances are correctly handled.
	 */
	vegas.data.map.MultiHashMap.prototype.putAll = function ( m /*Map*/ ) {
		if (m.size() > 0) {
			var it = m.iterator() ;
			while (it.hasNext()) {
				var value = it.next() ;
				var key = it.key() ;
				trace (key + " : " + value)
				if (value instanceof vegas.data.Collection) { // TODO !!!!
					this.putCollection(key, value) ;
				} else {
					this.put(key, value) ;
				}
			}
		}
	}

	/**
	 * Adds a collection of values to the collection associated with the specified key.
	 */
	vegas.data.map.MultiHashMap.prototype.putCollection = function (key, co /*Collection*/ ) {
		if (this.containsKey(key) == false) {
			this._map.put(key , this.createCollection()) ;
		}
		this._map.get(key).insertAll(co) ;
	}

	/**
	 * Removes a specific value from map.
	 */
	vegas.data.map.MultiHashMap.prototype.remove = function (key, value) {
		if (key == undefined) return null ;
		if (key != undefined && value != undefined) {
			var c = this._map.get(key) ;
			var b = c.remove(value) ;
			return (b) ? value : null ;
		} else {
			return this._map.remove(key) ;
		}
	}

	/**
	 * Gets the size of the collection mapped to the specified key.
	 */
	vegas.data.map.MultiHashMap.prototype.size = function () /*Number*/ {
		return this._map.size() ;
	}
	
	vegas.data.map.MultiHashMap.prototype.toSource = function (indent, indentor) /*String*/ {
		return "new " + this.getConstructorPath() + "(" + this._map.toSource() + ")" ;
	}
	
	vegas.data.map.MultiHashMap.prototype.toString = function () {
		return (new vegas.data.map.MultiMapFormat()).formatToString(this) ;
	}

	/**
	 * Gets the total size of the map by counting all the values.
	 */
	vegas.data.map.MultiHashMap.prototype.totalSize = function() /*Number*/ {
		var result /*Number*/ = 0 ;
		var it = this._map.iterator() ;
		while (it.hasNext()) {
			result += (it.next()).size() || 0 ;
		}
		return result ;
	}
	
	vegas.data.map.MultiHashMap.prototype.values = function () /*Collection*/ {
		var ar /*Array*/ = this.getValues() ;
		return new vegas.data.collections.SimpleCollection(ar) ;
	}
	
	vegas.data.map.MultiHashMap.prototype.valueIterator = function () /*Iterator*/ {
		return new vegas.data.iterator.ArrayIterator(this._map.getValues()) ;
	}
	
	// ----o Encapsulate

	//trace ("***** running vegas.data.map.MultiHashMap") ;
	
}