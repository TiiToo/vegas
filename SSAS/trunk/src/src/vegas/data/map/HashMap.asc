/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** HashMap

	AUTHOR

		Name : HashMap
		type : SSAS
		Package : vegas.data.map
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-17
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
		
	METHOD SUMMARY

		- clear()
		
		- clone()
		
		- containsKey
		
		- containsValue( value )
		
		- get(key)
		
		- getKeys()
		
		- getValues()
		
		- indexOfKey(key)
		
		- indexOfValue(value)
		
		- isEmpty()
		
		- iterator()
		
		- keyIterator()
		
		- put(key, value)
		
		- putAll(m:Map)
		
		- remove(key)
		
		- size()
		
		- toSource():String
		
		- toString():String

	INHERIT
	
		Object > HashMap

	IMPLEMENTS
	
		Cloneable, Iterable, Map, Serializable, ToString
	
	EXAMPLE
	
		var map = new vegas.data.map.HashMap() ;
		
		map.put("key1", "value1") ;
		map.put("key2", "value2") ;
		map.put("key3", "value3") ;
		
		trace ("map toString : " + map) ;
		trace ("map toSource : " + map.toSource()) ;
		
		trace ("------ iterator") ;
		var it = map.iterator() ;
		while (it.hasNext()) {
			trace (it.next() + " : " + it.key()) ;
		}
		trace ("------ clone") ;
		var map2 = map.clone() ;
		map2.put("key1", "value4") ;
		map2.remove("key2") ;
		trace ("initial map : " + map) ;
		trace ("clone map : " + map2) ;

	SEE ALSO
	
		MapIterator, MapFormat

*/ 

if (vegas.data.map.HashMap == undefined) 
{

	// ----o Imports
	
	require("vegas.data.Map") ;

	// ----o Constructor

	vegas.data.map.HashMap = function () 
	{ 
		var k = arguments[0] ;
		var v = arguments[1] ;
		var b = (k instanceof Array && v instanceof Array && k.length == v.length) ;
		this._keys = b ? [].concat(k) : [] ;
		this._values = b ? [].concat(v) : [] ;
	}

	// ----o Inherit
	
	vegas.data.map.HashMap.extend(vegas.data.Map) ;

	// ----o Public Methods
	
	vegas.data.map.HashMap.prototype.clear = function () 
	{
		this._keys = [] ;
		this._values = [] ;
	}
	
	vegas.data.map.HashMap.prototype.clone = function () 
	{
		return new vegas.data.map.HashMap(this._keys, this._values) ;
	}

	vegas.data.map.HashMap.prototype.containsKey = function ( key ) /*Boolean*/ 
	{
		return this._keys.contains(key) ;
	}

	vegas.data.map.HashMap.prototype.containsValue = function ( value ) /*Boolean*/ 
	{
		return this._values.contains( value ) ;
	}

	vegas.data.map.HashMap.prototype.get = function (key) 
	{
		return this._values[this.indexOfKey(key)] ;
	}
	
	vegas.data.map.HashMap.prototype.getKeys = function () /*Array*/ 
	{
		return this._keys.concat() ;
	}

	vegas.data.map.HashMap.prototype.getValues = function () /*Array*/ 
	{
		return this._values.concat() ;
	}

	vegas.data.map.HashMap.prototype.indexOfKey = function (key) /*Number*/ 
	{
		return this._keys.indexOf(key) ;
	}

	vegas.data.map.HashMap.prototype.indexOfValue = function (value) /*Number*/ 
	{
		return this._values.indexOf(value) ;
	}
	
	vegas.data.map.HashMap.prototype.isEmpty = function () /*Boolean*/ 
	{
		return (this.size() == undefined) || (this.size() < 1) ;
	}
	
	vegas.data.map.HashMap.prototype.iterator = function () /*Iterator*/ 
	{
		return new vegas.data.map.MapIterator(this) ;
	}
	
	vegas.data.map.HashMap.prototype.keyIterator = function () /*Iterator*/ 
	{
		return new vegas.data.iterator.ArrayIterator(this._keys) ;
	}
	
	vegas.data.map.HashMap.prototype.put = function (key, value) 
	{
		var r = null ;
		var i /*Number*/ = this.indexOfKey(key) ;
		if (i<0) {
			this._keys.push(key) ;
			this._values.push(value) ;
		} else {
			r = this._values[i] ;
			this._values[i] = value ;
		}
		return r ;
	}
	
	vegas.data.map.HashMap.prototype.putAll = function (m /*Map*/) 
	{
		var aV /*Array*/ = m.getValues() ;
		var aK /*Array*/ = m.getKeys() ;
		var l = aK.length ;
		for (var i = 0 ; i<l ; i = i - (-1) ) {
			this.put(aK[i], aV[i]) ;
		}
	}
	
	vegas.data.map.HashMap.prototype.remove = function (key) 
	{
		var r = null ;
		var i = this.indexOfKey(key) ;
		if (i > -1) {
			r = this._values[i] ;
			this._keys.splice(i, 1) ;
			this._values.splice(i, 1) ;
		}
		return r ;
	}
	
	vegas.data.map.HashMap.prototype.size = function () /*Number*/ 
	{
		return this._keys.length ;
	}
	
	vegas.data.map.HashMap.prototype.toSource = function (indent, indentor) /*String*/ 
	{
		return "new " + this.getConstructorPath() + "(" + this._keys.toSource() + "," + this._values.toSource() + ")" ;
	}
	
	vegas.data.map.HashMap.prototype.toString = function () 
	{
		return (new vegas.data.map.MapFormat()).formatToString(this) ;
	}
	
	// ----o Private Properties
	
	vegas.data.map.HashMap.prototype._keys = [] ;
	vegas.data.map.HashMap.prototype._values = [] ;
	
	// ----o Encapsulate

	// trace ("***** running vegas.data.map.HashMap") ;
	
}