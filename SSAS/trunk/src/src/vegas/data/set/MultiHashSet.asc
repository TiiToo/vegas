/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** MultiHashSet

	AUTHOR

		Name : MultiHashSet
		type : SSAS
		Package : vegas.data.map
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-18
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	CONSTRUCTOR
	
		var m:MultiHashSet = new vegas.data.map.MultiHashSet( m:Map ) ;
	
	ARGUMENTS
	
		m : copies the input map creating an independant copy
		
	METHOD SUMMARY
	
		- clear()
		
		- clone()
		
		- containsKey(key)
		
		- containsValue()
		
		- get(key)
		
		- getkeys()
		
		- getValues()
		
		- isEmpty():Boolean
		
		- iterator([key]) 
		
		- keyIterator()
				
		- put(key, value)
		
			Adds the value to the collection associated with the specified key.
		
		- putCollection(key, collection:Collection)
		
		- putAll(map:Map) 
		
		- remove(key, [value]) 
		
			If value is undefined; removes all values associated with the specified key.
			
			If value is defined, removes a specific value from map.
		
		- size():Number
		
		- toSource():String
		
		- toString():String
		
		- totalSize():Number
		
		- values()
		
			Gets a collection containing all the values in the map.
		
		- valueIterator()
			
			get a iterator to browse collections in MultiMap
	
	INHERIT
	
		HashMap, MultiHashMap
	
	IMPLEMENTS
	
		Cloneable, Iterable, Map, MultiMap, Serializable, ToString

	SEE ALSO
	
		MapIterator, MapFormat

	EXAMPLE
	
		var s = new vegas.data.set.MultiHashSet() ;
		
		trace("----- Test put()") ;
		
		trace("insert key1:valueA1 : " + s.put("key1", "valueA1")) ;
		trace("insert key1:valueA2 : " + s.put("key1", "valueA2")) 
		trace("insert key1:valueA2 : " + s.put("key1", "valueA2")) ;
		trace("insert key1:valueA3 : " + s.put("key1", "valueA3")) ;
		trace("insert key2:valueA2 : " + s.put("key2", "valueA2")) ;
		trace("insert key2:valueB1 : " + s.put("key2", "valueB1")) ;
		trace("insert key2:valueB2 : " + s.put("key2", "valueB2")) ;
		
		trace("----- size") ;
		
		trace("size : " + s.size()) ;
		trace("totalSize : " + s.totalSize()) ;
		
		trace("---- Test remove(key, value)") ;
		
		trace("remove key1:valueA2 : " + s.remove("key1", "valueA2")) ;
		trace("insert key1:valueA2 : " + s.put("key1", "valueA2")) ;
		trace("insert key1:valueA2 : " + s.put("key1", "valueA2")) ;
		
		trace("---- Test remove(key)") ;
		
		trace("remove key2 : " + s.remove("key2")) ;
		trace("size : " + s.size()) ;
		
		trace("---- Test putCollection(key, co:Collection)") ;
		
		var co = new vegas.data.collections.SimpleCollection(["valueA1", "valueA4", "valueA1"]) ;
		s.putCollection("key1", co) ;
		trace("s.toString : " + s) ;
	
**/ 

_global.getPackage("vegas.data.set") ;

if (vegas.data.set.MultiHashSet == undefined) {

	loadFile("vegas/data/Collection.asc") ;
	loadFile("vegas/data/iterator/ArrayIterator.asc") ;
	loadFile("vegas/data/collections/SimpleCollection.asc") ;
	loadFile("vegas/data/map/MultiHashMap.asc") ;
	loadFile("vegas/data/set/HashSet.asc") ;

	// ----o Constructor

	vegas.data.set.MultiHashSet = function ( m /*Map*/ ) { 
		
		this._map = new vegas.data.map.HashMap() ;
		// TODO ici utiliser plutot une copy et pas un clone
		// TODO toutes les classes de type Map doivent h√©riter d'une classe Map !
		if (m != undefined) {
			this.putAll( m ) ;
		}
		this._internalSet = new vegas.data.set.HashSet() ;
	}

	var constructor = vegas.data.set.MultiHashSet ;
	var proto = constructor.extend(vegas.data.map.MultiHashMap) ;

	// ----o Public Methods

	/**
	 * This clears each collection in the map, and so may be slow.
	 */
	proto.clear = function () {
		this._map.clear() ;
		this._internalSet.clear() ;
	}

	/**
	 * Clones the map.
	 */
	proto.clone = function () {
		var m = new vegas.data.map.MultiHashSet() ;
		var vItr = this.valueIterator() ;
		var kItr = this.keyIterator() ;
		while (kItr.hasNext()) {
			var key = kItr.next() ;
			var value = vItr.next() ;
			m.putCollection(key, value) ;
		}
		return m ;
	}

	/**
	 * Checks whether the map contains the value specified .
	 */
	proto.contains = function (o) /*Boolean*/ {
		return this.containsValue(o) ;
	}

	/**
	 * Creates a new instance of the map value Collection container.
	 * This method can be overridden to use your own collection type.
	 */
	/*override*/ proto.createCollection = function () /*Collection*/ {
		return new vegas.data.set.HashSet() ;	
	}

	/**
	 * UnsupportedOperation in MultiHashSet. Use getSet() method ! 
	 */
	proto.get = function ( id ) {
		throw new Error("UnsupportedOperation : This MultiHashSet does not support the get() method, use getSet().") ;
		return null ;
	}

	/**
	 * Gets the collection mapped to the specified key. This method is a convenience method to typecast the result of get(key).
	 */
	proto.getSet = function (key) /*Set*/ {
		return this._map.get(key) ;
	}

	/**
	 * Adds the value to the collection associated with the specified key.
	 */
	proto.put = function (key, value) /*Boolean*/ {
		if(this._internalSet.contains(value)) return false ;
		if (!this.containsKey(key)) {
			this._map.put(key , this.createCollection()) ;
		}
		var b /*Boolean*/ = this._map.get(key).insert(value) ;
		return this._internalSet.insert(value) ;
	}

	/**
	 * Adds a collection of values to the collection associated with the specified key.
	 */
	proto.putCollection = function (key, c /*Collection*/ ) /*Void*/ {
		if (!this.containsKey(key)) {
			this._map.put(key , this.createCollection()) ;
		}
		var s /*HashSet*/ = this._map.get(key) ;
		var it /*Iterator*/ = c.iterator() ;
		var value ;
		while(it.hasNext()) {
			value = it.next() ;
			if (this._internalSet.insert(value)) {
				s.insert(value) ;
			}	
		}
	}

	/**
	 * Removes a specific value from map.
	 */
	proto.remove = function (key, value) /*Boolean*/  {
		var len /*Number*/ = arguments.length ;
		var key ;
		var value ;
		if (len == 2) {
			key = arguments[0] ;
			value = arguments[1] ;
			var c /*Collection*/ = this._map.get(key) ;
			var b /*Boolean*/ = c.remove(value) ;
			return this._internalSet.remove(value) ;
		} else {
			key = arguments[0] ;
			var s /*Set*/ = this._map.get(key) ;
			if (s) {
				var it /*Iterator*/ = s.iterator() ;
				while(it.hasNext()) {
					this._internalSet.remove(it.next()) ;
				}
				this._map.remove(key) ;
				return true ;
			} else {
				return false ;	
			}
			
		}
	}

	/**
	 * This returns an array containing the combination of values from all keys.
	 */
	proto.toArray = function() /*Array*/ {
		return this.getValues() ;
	}
	
	// ----o Encapsulate

	delete constructor ;
	delete proto ;
	
	//trace ("***** running vegas.data.set.MultiHashSet") ;
	
}
