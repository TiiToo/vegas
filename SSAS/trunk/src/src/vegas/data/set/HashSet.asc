/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** HashSet

	AUTHOR

		Name : HashSet
		type : SSAS
		Package : vegas.data.set
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-28
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
		
	METHOD SUMMARY

		- clear()
		
		- contains(o)
		
		- containsAll(c:Collection)
		
		- equals(o):Boolean
		
		- get(id)
		
		- indexOf(o)
		
		- insert(o)
		
		- insertAll(c:Collection)
		
		- isEmpty()
		
		- iterator()
		
		- remove()
		
		+ removeAll(c:Collection)
		
		- retainAll(c:Collection)
		
		- size():Number
		
		- toArray():Array
		
		- toSource():String
		
		- toString():String

	INHERIT
	
		Object > AbstractCollection > SimpleCollection > AbstractSet > HashSet

	IMPLEMENTS
	
		Collection, Set, Serializable, ToString
	
	EXAMPLE
	
		load("lib/vegas.asc") ;
		
		var oSet = new vegas.data.set.HashSet([17, 68]) ;
		trace ("set insert 12 : " + oSet.insert(12)) ;
		trace ("set insert 24 : " + oSet.insert(24)) ;
		trace ("set insert 48 : " + oSet.insert(48)) ;
		trace ("set insert 48 : " + oSet.insert(48)) ;
		trace ("set : " + oSet) ;
		trace ("iterator :") ;
		var it = oSet.iterator() ;
		while(it.hasNext()) {
			trace ("\t-> " + it.next()) ;
		}
		
		var oSet2 = oSet.clone() ;
		trace ("equals : " + oSet.equals(oSet2)) ;
		
		// insert
		
		oSet.insert("test") ;
		oSet.insert("coucou") ;
		
		oSet2.insert(150) ;
		oSet2.insert("hello") ;
		oSet2.insert(true) ;
		oSet2.insert("welcome") ;
		
		// remove
		oSet2.remove(17) ;
		
		trace ("oSet : " + oSet) ;
		trace ("oSet2 : " + oSet2) ;
		
		// --- removeAll
		
		trace ("removeAll : " + oSet.removeAll(oSet2)) ;
		
		trace ("oSet : " + oSet) ;
		
		var ar = oSet.toArray() ;
		trace ("set.toArray : " + ar) ;
		trace ("set.toSource : " + oSet.toSource()) ;

	
**/ 

_global.getPackage("vegas.data.set") ;

if (vegas.data.set.HashSet == undefined) {

	loadFile("vegas/data/iterator/ArrayIterator.asc") ;
	loadFile("vegas/data/map/HashMap.asc") ;
	loadFile("vegas/data/set/AbstractSet.asc") ;

	// ----o Constructor

	vegas.data.set.HashSet = function () { 
		this._map = new vegas.data.map.HashMap ;
		if (arguments.length == 0) return ;
		var arg = arguments[0] ;
		if (arg instanceof Array) {
			it = new vegas.data.array.ArrayIterator(arg) ;
		} else if (arg instanceof Collection) {
			it = arg.iterator() ;
		}
		if (it != undefined) {
			while(it.hasNext()) {
				this.insert(it.next()) ;
			}
		}
	}

	var constructor = vegas.data.set.HashSet ;
	var proto = constructor.extend(vegas.data.set.AbstractSet) ;

	// ----o Public Methods
		
	proto.clear = function()/*Void*/ {
		this._map.clear() ;
	}
	
	/*override*/ proto.clone = function () {
		var s = new vegas.data.set.HashSet ; 
		if (this.size() > 0) {
			var it/*Iterator*/ = this._map.keyIterator() ;
			while(it.hasNext()) {
				s.insert(it.next()) ;
			}
		}
		return s ;
	}

	/*override*/ proto.contains = function (o)/*Boolean*/ {
		return this._map.containsKey(o) ;
    }

	/*override*/ proto.insert = function (o)/*Boolean*/ {
		return this._map.put(o, vegas.data.set.HashSet.PRESENT) == null ;
    }

	/*override*/ proto.isEmpty = function ()/*Boolean*/ {
		return this._map.isEmpty() ;
	}

	/*override*/ proto.iterator = function ()/*Iterator*/ {
		return this._map.keyIterator() ;
	}

    /*override*/ proto.remove = function (o)/*Boolean*/ {
		return this._map.remove(o) == vegas.data.set.HashSet.PRESENT ;
    }

	/*override*/ proto.size = function ()/*Number*/ {
		return this._map.size() ;
	}
	
	/*override*/ proto.toSource = function (indent/*Number*/, indentor/*String*/)/*String*/ {
		return "new " + this.getConstructorName() + "(" + this.toArray().toSource() + ")";
	}
	
	/*override*/ proto.toArray = function ()/*Array*/ {
		return this._map.getKeys() ;
	}

	// ----o Private Properties
	
	vegas.data.set.HashSet.PRESENT = new Object ;

	// ----o Encapsulate

	delete constructor ;
	delete proto ;
	
	//trace ("***** running vegas.data.set.HashSet") ;
	
}