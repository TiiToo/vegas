/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** TypedSet

	AUTHOR

		Name : TypedSet
		type : SSAS
		Package : vegas.data.set
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-28
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
		
	CONSTRUCTOR
	
		var ta:TypedSet = new TypedSet( type:Function , set:Set) 

	METHOD SUMMARY
	
		- clear()
		
		- clone()
		
		- contains(o)
		
		- getType()
		
		- insert(o)
		
		- isEmpty()
		
		- iterator()
		
		- remove(o)
		
		- setType(type:Function) : set the type and clear TypedArray
		
		- size():Number
		
		- toArray():Array
		
		- toSource():String
		
		- toString():String

	INHERIT
	
		Object > AbstractTypeable> TypedSet

	IMPLEMENTS
	
		Cloneable, Iterable, Serializable, Typeable, Validator	
	
	EXAMPLE
	
		var namespace = vegas.data.set ;
		
		var s = new namespace.HashSet([6, 12]) ;
		trace ("set insert 12 : " + s.insert(12)) ;
		trace ("set insert 24 : " + s.insert(24)) ;
		trace ("set insert 48 : " + s.insert(48)) ;
		
		var ts = new namespace.TypedSet(Number, s) ;
		
		trace ("typed set >> " + ts) ;
		trace ("typed set toSource : " + ts.toSource()) ;
		trace ("ts insert true : " + ts.insert(true)) ;
	
**/ 

if (vegas.data.set.TypedSet == undefined) {

	// ----o Imports

	require("vegas.util.AbstractTypeable") ;

	// ----o Constructor

	vegas.data.set.TypedSet = function ( type /*Function*/ , set /*Set*/ ) { 
		this.__constructor__.call(this, type) ;
		if (set == null) throw new vegas.errors.IllegalArgumentError("TypedSet constructor, argument 'set' must not be 'null' or 'undefined'") ;
		if (set.size && set.size() > 0) {
			var it = set.iterator() ;
			while ( it.hasNext() ) this.validate(it.next()) ;
		}
		this._set = set ;
	}

	// ----o Inherit

	vegas.data.set.TypedSet.extend(vegas.util.AbstractTypeable) ;

	// ----o Public Methods
	
	vegas.data.set.TypedSet.prototype.clear = function () {
		this._set.clear() ;
	}
	
	vegas.data.set.TypedSet.prototype.clone = function () {
		return new vegas.data.set.TypedSet(this.getType(), this._set) ;
	}

	vegas.data.set.TypedSet.prototype.contains = function (o) /*Boolean*/ {
		return this._set.contains(o) ;
	}

	vegas.data.set.TypedSet.prototype.get = function (id /*Number*/ ) {
		return this._set.get(id) ;
	}

	vegas.data.set.TypedSet.prototype.insert = function(o) /*Boolean*/ {
		this.validate(o) ;
		return this._set.insert(o) ;
	}

	vegas.data.set.TypedSet.prototype.isEmpty = function () /*Boolean*/ {
		return this._set.isEmpty() ;
	}

	vegas.data.set.TypedSet.prototype.iterator = function ()/*Iterator*/ {
		return this._set.iterator() ;
	}

	vegas.data.set.TypedSet.prototype.setType = function (type /*Function*/) /*Void*/ {
		this.__constructor__.vegas.data.set.TypedSet.prototypetype.setType.call(this, type) ;
		this._set.clear() ;
	}

	vegas.data.set.TypedSet.prototype.remove = function(o) {
		return this._set.remove(o) ;
	}

	vegas.data.set.TypedSet.prototype.size = function ()/*Number*/ {
		return this._set.size() ;
	}
	
	vegas.data.set.TypedSet.prototype.toArray = function ()/*Array*/ {
		return this._set.toArray() ;
	}

	vegas.data.set.TypedSet.prototype.toSource = function (indent/*Number*/, indentor/*String*/)/*String*/ {
		var sourceA /*String*/ = vegas.util.TypeUtil.toString(this._type) ;
		var sourceB /*String*/ = this._set.toSource() ;
		return "new " + this.getConstructorPath() + "(" + sourceA + "," + sourceB + ")" ;
	}

	vegas.data.set.TypedSet.prototype.toString = function () /*String*/ {
		return this._set.toString() ;
	}
	
	// ----o Encapsulate

	//trace ("***** running vegas.data.set.TypedSet") ;
	
}