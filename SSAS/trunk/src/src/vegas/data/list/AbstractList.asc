/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** AbstractList

	AUTHOR

		Name : AbstractList
		type : SSAS
		Package : vegas.data.list
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-01
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
		
	METHOD SUMMARY

		- indexOf(o)
		
		- insertAt(id:Number, o)
		
		- insertAllAt (id:Number, c:Collection)
		
		- lastIndexOf(o) 
		
		- listIterator()
		
		- removeAt(id:Number)
		
		- removesAt(id:Number, len:Number)
		
		- removeRange(from:Number, to:Number) : Removes from this List all of the elements whose index is between fromIndex, inclusive and toIndex, exclusive.
		
		- setAt(id:Number, o):Boolean
		
		- subList(from:Number, to:Number) : return a list
		
	INHERIT
	
		AbstractCollection → AbstractList

	IMPLEMENTS
	
		Collection, ISerializable, IFormattable
	
	SEE ALSO 
	
		Core2 Library
	
**/ 

// TODO revoir les erreurs.
// TODO placer la propriété _modCount dans le prototype ?

if (vegas.data.list.AbstractList == undefined) {

	// ----o Constructor

	vegas.data.list.AbstractList = function ( ar /*Array*/ ) { 
		
		vegas.data.List.call(this, ar) ;
		
		// ----o Private Properties
		
		this._modCount /*Number*/ = 0 ;
		
	}

	// ----o Inherit

	vegas.data.list.AbstractList.extend(vegas.data.List) ;
	
	// ----o Public Methods
	
	vegas.data.list.AbstractList.prototype.containsAll = function ( c /*Collection*/ ) /*Boolean*/ {
		
		try {
			
			if (c instanceof vegas.data.Collection) {
			
				var it /*Iterator*/ = c.iterator() ;
				while(it.hasNext()) {
					
					if ( ! this.contains(it.next()) ) return false ;
					
				}
				
				return true ;
			
			} else {
			
				throw new Error( this.getConstructorName() + ".constainsAll('" + c + "') Illegal Argument, is not a Collection") ;
			
			}
			
			
		
		} catch (e) {
			
			trace(e.toString()) ;
			return false ;
			
		}	 
		

	}
	
	vegas.data.list.AbstractList.prototype.equals = function (o) /*Boolean*/ {
		
		// override this method
		
	}

	
	vegas.data.list.AbstractList.prototype.getModCount = function() /*Number*/ {
		return this._modCount ;
	}
	
	vegas.data.list.AbstractList.prototype.insertAt = function(id/*Number*/, o)/*Void*/ {
		if (id<0 || id>size()) {
			throw new Error(this.getConstructorName() + ".insertAt('" + id + "') : IndexOutOfBoundsError") ;
		}
		this._a.splice(id, 0, o) ;
	}
	
	vegas.data.list.AbstractList.prototype.insertAll = function(c/*Collection*/) /*Boolean*/ {
		
		try {
			
			if (c instanceof vegas.data.Collection) {
		
				if (c.size() > 0) {
					var it /*Iterator*/ = c.iterator() ;
					while(it.hasNext()) {
						this.insert(it.next()) ;
					}
					return true ;
				}
				
			} else {
			
				throw new vegas.errors.IllegalArgumentError( this.getConstructorName() + ".insertAll('" + c + "'), argument is not a Collection") ;
			
			}
		
		} catch (e) {
			
			trace(e.toString()) ;
			
		}	
		
		return false ;
		
	}
	
	vegas.data.list.AbstractList.prototype.insertAllAt = function(id /*Number*/, c/*Collection*/) /*Boolean*/ {
		
		try {
			
			if( c instanceof vegas.data.Collection ) {
				
				if (id <0 || id > this.size()) return false ;
				var aC/*Array*/ = c.toArray() ;
				var aB = this._a.slice(0, id) ;
				var aE = this._a.slice(id) ;
				this._a = aB.concat(aC, aE) ;
				return true ;
				
			} else {
			
				throw new Error( this.getConstructorName() + ".insertAllAt('" + c + "') Illegal Argument, is not a Collection") ;
			
			}
			
		} catch(e) {
			
			trace(e.toString()) ;
			
		}	
		
		return false ;
		
	}
		
	vegas.data.list.AbstractList.prototype.lastIndexOf = function(o) /*Number*/ {
		var l/*Number*/ = this._a.length ;
		while (--l > -1) if (this._a[l] == o) return l ;
		return -1 ;
	}

	vegas.data.list.AbstractList.prototype.listIterator = function() /*ListIterator*/ { 
		var li /*ListIterator*/ = new vegas.data.list.ListItr(this) ;
		var n /*Number*/ = arguments[0] ;
		if (typeof (n) == "number" || n instanceof Number) {
			li.seek(n) ;
		}
		return li ;
	}

	vegas.data.list.AbstractList.prototype.removeAll = function(c/*Collection*/)/*Boolean*/ {
		var b/*Boolean*/ = false ;
		var it/*Iterator*/ = this.iterator() ;
		while (it.hasNext()) {
			if ( c.contains(it.next()) ) {
				it.remove() ;
				b = true ;
			}
		}
		return b ;
	}
	
	vegas.data.list.AbstractList.prototype.removeAt = function(id/*Number*/) {
		return this.removesAt(id, 1) ;
	}

	vegas.data.list.AbstractList.prototype.removesAt = function(id/*Number*/, len/*Number*/) {
		var d /*Number*/ = len - id ;
		var old = this._a.slice(id, d) ;
		this._a.splice(id, len);
		return old ; 
	}
	
	vegas.data.list.AbstractList.prototype.removeRange = function(from /*Number*/ , to/*Number*/) /*Void*/ {
		if (isNaN(from)) return ;
		var it /*ListIterator*/ = this.listIterator(from) ;
		var l /*Number*/ = to - from ;
		for (var i /*Number*/ = 0 ; i<l ; i++) {
			it.next() ; 
			it.remove() ;
		}
	}

	vegas.data.list.AbstractList.prototype.retainAll = function(c/*Collection*/) /*Boolean*/ {
		
		var b /*Boolean*/ = false ;
		
		try {
			
			if( c instanceof vegas.data.Collection ) {
				
				var it /*Iterator*/ = this.iterator() ;
				while(it.hasNext()) {
					if ( ! c.contains(it.next()) ) {
						it.remove() ;
						b = true ;
					}
				}
				
			} else {
			
				throw new Error( this.getConstructorName() + ".retainAll('" + c + "') Illegal Argument, is not a Collection") ;
			
			}
			
		} catch(e) {
			
			trace(e.toString()) ;
			
		}	
			
		return b ;
	}

	vegas.data.list.AbstractList.prototype.setAt = function(id/*Number*/, o) /*Boolean*/ {
		if (this._a[id] == undefined) {
			return false ;
		} else {
			this._a[id] = o ;
			return true ;
		}
	}

	vegas.data.list.AbstractList.prototype.setModCount = function(n/*Number*/) /*Void*/ {
		this._modCount = n ;
	}
	
	vegas.data.list.AbstractList.prototype.subList = function(begin /*Number*/ , end/*Number*/)/*List*/ {
		var list /*List*/ = new vegas.data.list.ArrayList() ;
		var it/*ListIterator*/ = this.listIterator() ;
		var d /*Number*/ = (end - begin) + 1 ; 
		for (var i/*Number*/ = begin ; i<= d ; i++) {
			list.insert(it.next()) ;
		}
		return list ;
	}
	
	
	// ----o Encapsulate

	//trace ("***** running vegas.data.list.AbstractList") ;
	
}