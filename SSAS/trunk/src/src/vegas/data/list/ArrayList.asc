/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** ArrayList

	AUTHOR

		Name : ArrayList
		type : SSAS
		Package : vegas.data.list
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-18
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
	
	METHOD SUMMARY

		- clear()
		
		- clone()
		
		- contains(o)
		
		- containsAll(c:Collection)
		
		- ensureCapacity(n:Number)
		
		- get(id)
		
		- indexOf(o)
		
		- insert(o)
		
		- insertAll(c:Collection)
		
		- insertAllAt (id, c:Collection)
		
		- insertAt(id, o)
		
		- isEmpty():Boolean
	
		- iterator():Iterator
		
		- lastIndexOf(o) 
		
		- listIterator()
		
		- remove()
		
		- removeAll(c:Collection)
		
		- removeAt(id)
		
		- removesAt(id, len)
		
		- removeRange(from, to) : Removes from this List all of the elements whose index is between fromIndex, inclusive and toIndex, exclusive.
		
		- retainAll(c:Collection)
		
		- setAt(id, o)
		
		- size():Number
		
		- subList(from, to) : return a list
		
		- toArray():Array
		
		- toSource():String	
		
		- toString():String
		
	INHERIT
	
		AbstractCollection > AbstractList > ArrayList

	IMPLEMENTS
	
		Collection, ISerializable, IFormattable

	USE
	
		var co = new vegas.data.collections.SimpleCollection(["item0", "item1"]) ;
		
		var list = new vegas.data.list.ArrayList( co ) ;
				
		list.insert("item2") ;
		list.insert("item3") ;
		list.insert("item4") ;
		
		trace("> " + list) ;
		trace("> size : " + list.size()) ;
		trace("> contains co : " + list.containsAll(co)) ;
		
		var it = list.listIterator() ;
		
		trace("--- test next") ;
		
		while(it.hasNext()) {
			
			trace("next : " + it.next()) ;
			
		}
		
		trace("--- test previous") ;
		
		while(it.hasPrevious()) {
			
			trace("previous : " + it.previous()) ;
			
		}
				
		trace("--- ensureCapacity 2") ;
		
		list.ensureCapacity(2) ;
		trace("> " + list) ;

	SEE ALSO 
	
		Core2 Library
	
**/ 

_global.getPackage("vegas.data.list") ;

if (vegas.data.list.ArrayList == undefined) {

	// ----o Imports

	loadFile("vegas/data/iterator/ArrayIterator.asc") ;
	loadFile("vegas/data/list/AbstractList.asc") ;
	
	// ----o Constructor

	vegas.data.list.ArrayList = function ( o ) { 
		
		vegas.data.list.AbstractList.call(this) ;
		
		this._a = [] ;
		
		var arg = arguments[0] ;
		
		if (arg instanceof Array) {
			
			var it = new vegas.data.iterator.ArrayIterator(arg) ;
			while (it.hasNext()) {
				
				this.insert(it.next()) ;
				
			}
			
		} else if (arg instanceof vegas.data.Collection) {
			
			var it = arg.iterator() ;
			while (it.hasNext()) {
				
				this.insert( it.next() ) ;
				
			}
		
		} else if (typeof (arg) == "number") {
			
			this._a.length = arg ;
		}
		
	}
	
	// ----o Inherit

	var constructor = vegas.data.list.ArrayList ;
	var proto = constructor.extend(vegas.data.list.AbstractList) ;
	
	// ----o Public Methods
	
	proto.clone = function() {
		return new vegas.data.list.ArrayList( this.toArray() ) ;
	}
	
	proto.ensureCapacity = function(n) {
		this._a.length = n ;
	}
	
	
	// ----o Encapsulate

	delete constructor ;
	delete proto ;
	
	//trace ("***** running vegas.data.list.ArrayList") ;
	
}