/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** SimpleStack

	AUTHOR

		Name : SimpleStack
		type : SSAS
		Package : vegas.data.stack
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-16
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
		
	CONSTRUCTOR
	
		new vegas.data.stack.SimpleStack(ar:Array) ;

	METHODS
	
		- clear()
		
		- contains(o)
		
		- get(id)
		
			return an element but if id = 0, it's the last element in the stack
		
		- clone()
		
		- iterator()
		
		- insert(o):Boolean 
		
			the same of push() method
		
		- isEmpty()
		
		- iterator()
		
		- peek()
		
		- pop()
		
		- push(o)
		
		- remove(o):Boolean
		
		- search(o):Number
		
		- size():Number
		
		- toArray():Array
		
		- toSource():String
		
		- toString():String
		
	INHERIT
	
		CoreObject > AbstractCollection > SimpleStack

	IMPLEMENTS
	
		Cloneable, Collection, Iterable, Serializable, Stack, ToString
	
	EXAMPLE
	
		var s = new vegas.data.stack.SimpleStack() ;
		s.push("item1") ;
		s.push("item2") ;
		s.push("item3") ;
		trace ("stack.toSource : " + s.toSource()) ;
		trace ("stack peek : " + s.peek()) ;
		trace ("toString : " + s) ;
		trace ("stack pop : " + s.pop()) ;
		trace ("toString : " + s) ;
		trace ("--- stack iterator") ;
		var it = s.iterator() ;
		while (it.hasNext()) trace (it.next()) ;

**/ 

if (vegas.data.stack.SimpleStack == undefined) {
	
	// ----o Constructor

	vegas.data.stack.SimpleStack = function ( ar/*Array*/ ) { 
		vegas.data.collections.AbstractCollection.apply(this, [ar]) ;
	}

	// ----o Inherit

	vegas.data.stack.SimpleStack.extend(vegas.data.collections.AbstractCollection) ;

	// ----o Public Methods
	
	vegas.data.stack.SimpleStack.prototype.clone = function () {
		return new vegas.data.stack.SimpleStack(this._a) ;
	}
	
	vegas.data.stack.SimpleStack.prototype.get = function ( id/*Number*/ )  {
		var a/*Array*/ = this.toArray() ;
		return a[id]  ;
	}
	
	vegas.data.stack.SimpleStack.prototype.iterator = function () {
		return new vegas.data.iterator.ProtectedIterator(new vegas.data.iterator.ArrayIterator(this.toArray())) ;
	}

	vegas.data.stack.SimpleStack.prototype.peek = function () {
		return this._a[this._a.length - 1] ;
	}

	vegas.data.stack.SimpleStack.prototype.pop = function () {
		return this.isEmpty() ? null : this._a.pop() ;
	}

	vegas.data.stack.SimpleStack.prototype.push = function (o)/*Void*/ {
		this._a.push(o) ;
	}

	vegas.data.stack.SimpleStack.prototype.search = function (o)/*Number*/ {
		return this.indexOf(o) ;
	}

	vegas.data.stack.SimpleStack.prototype.toArray = function ()/*Array*/ {
		var aReverse/*Array*/ = this._a.slice() ;
		aReverse.reverse() ;
		return aReverse ;
	}
	
	// ----o Encapsulate
	
	//trace ("***** running vegas.data.stack.SimpleStack") ;
	
}