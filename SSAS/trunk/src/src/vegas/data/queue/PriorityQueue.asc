/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** PriorityQueue

	AUTHOR

		Name : PriorityQueue
		type : SSAS
		Package : vegas.data.queue
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-09
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
		
	CONSTRUCTOR
	
		new vegas.data.queue.PriorityQueue( [ar] ) ;

	METHODS
	
		- dequeue() : Retrieves and removes the head of this queue.
		
		- element() : Retrieves, but does not remove, the head of this queue.
		
		- enqueue(o) : Inserts the specified element into this queue, if possible.
		
		- peek() : Retrieves, but does not remove, the head of this queue, returning null if this queue is empty.
		
		- poll() : Retrieves and removes the head of this queue.
		
		- toArray():Array
		
		- toSource():String
		
		- toString():String
		
	INHERIT
	
		CoreObject > AbstractCollection > LinearQueue > PriorityQueue

	IMPLEMENTS
	
		Cloneable, Collection, Iterable, Queue, Serializable, ToString
	
**/ 

if (vegas.data.queue.PriorityQueue == undefined) {
	
	// ----o Constructor

	vegas.data.queue.PriorityQueue = function ( comp/*Comparator*/ , ar /*Array*/  ) { 
		if (comp == undefined) throw new vegas.errors.IllegalArgumentError("PriorityQueue constructor, argument 'comp' must not be 'null' or 'undefined'") ;
		this._comparator = comp ;
		if (ar instanceof Array && ar.length > 0) {
			this._a = [].concat(ar) ;
			this._sort() ;
		} else {
			this._a = [] ;
		}
	}

	// ----o Inherit

	vegas.data.queue.PriorityQueue.extend(vegas.data.queue.LinearQueue) ;

	// ----o Public Properties
	
	vegas.data.queue.PriorityQueue.prototype._comparator = null ;
	
	// ----o Public Methods
	
	vegas.data.queue.PriorityQueue.prototype.clone = function () {
		return new vegas.data.queue.PriorityQueue(this._comparator) ;
	}
	
	vegas.data.queue.PriorityQueue.prototype.comparator = function() /*Comparator*/ {
		return this._comparator ;
	}

	vegas.data.queue.PriorityQueue.prototype.enqueue = function (o) /*Boolean*/ {
		var isEnqueue /*Boolean*/ = this.__constructor__.prototype.enqueue.call(this, o) ;
		if ( isEnqueue ) this._sort() ;
		return isEnqueue ;
	}

	// ----o Private Methods
	
	vegas.data.queue.PriorityQueue.prototype._sort = function () {
		if (this._comparator != undefined ) {
			this._a.sort(this._comparator.compare) ;
		}
	}

	// ----o Encapsulate
	
	//trace ("***** running vegas.data.queue.PriorityQueue") ;
	
}