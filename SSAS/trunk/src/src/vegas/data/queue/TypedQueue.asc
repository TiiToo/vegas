/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** Class TypedQueue

	AUTHOR

		Name : TypedQueue
		type : SSAS
		Package : vegas.data.queue
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-16
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
		
	CONSTRUCTOR
	
		var ta:TypedQueue = new TypedQueue( type:Function , queue:Queue) 

	METHOD SUMMARY
	
		- dequeue() : removes the head of this queue and return true if removes.
		
		- element() : Retrieves, but does not remove, the head of this queue.
		
		- enqueue(o) : Inserts the specified element into this queue, if possible and return true.
		
		- getType() : return the type of the TypedQueue
		
		- peek() : Retrieves, but does not remove, the head of this queue, returning null if this queue is empty.
		
		- poll() : Retrieves and removes the head of this queue.
		
		- setType(type:Function) : set the type and clear TypedArray
		
		- toArray():Array
		
		- toSource():String
		
		- toString():String

	INHERIT
	
		CoreObject > AbstractTypeable> TypedQueue

	IMPLEMENTS
	
		Cloneable, Iterable, Serializable, Typeable, Validator	
	
	EXAMPLE	

		var tq = new vegas.data.queue.TypedQueue(String, new vegas.data.queue.LinearQueue()) ;

		trace("----o enqueue") ;
		trace ("enqueue item1 : " + tq.enqueue("item1")) ;
		trace ("enqueue item2 : " + tq.enqueue("item2")) ;
		trace ("queue size : " + tq.size()) ;
		trace ("tq toSource : " + tq.toSource()) ;
		trace("----o supports") ;
		trace ("supports a string : " + tq.supports("bobo")) ;
		trace ("supports a number : " + tq.supports(150)) ;
		trace ("---o setType") ;
		tq.setType(Number) ;
		trace ("tq : " + tq) ;
		trace ("---o Validate") ;
		trace ("enqueue true : " + tq.enqueue(true)) ;
	
	SEE ALSO 
	
		Core2 Library
	
*/ 

if (vegas.data.queue.TypedQueue == undefined) {

	// ----o Imports

	require("vegas.util.AbstractTypeable") ;
	
	// ----o Constructor

	vegas.data.queue.TypedQueue = function ( type /*Function*/ , queue /*Queue*/ ) { 
		vegas.util.AbstractTypeable.call(this, type) ;
		if (queue == null) throw new vegas.errors.IllegalArgumentError("TypedQueue constructor, Argument 'queue' must not be 'null' or 'undefined'") ;
		if (queue.size() > 0) {
			var it = co.iterator() ;
			while ( it.hasNext() ) this.validate(it.next()) ;
		}
		this._queue = queue ;
	}

	// ----o Inherit

	vegas.data.queue.TypedQueue.extend(vegas.util.AbstractTypeable) ;
	
	// ----o Public Methods
	
	vegas.data.queue.TypedQueue.prototype.clear = function () {
		this._queue.clear() ;
	}
	
	vegas.data.queue.TypedQueue.prototype.clone = function () {
		return new vegas.data.queue.TypedQueue(this.getType(), this._queue.clone()) ;
	}

	vegas.data.queue.TypedQueue.prototype.dequeue = function ()/*Boolean*/ {
		return this._queue.dequeue() ;
	}

	vegas.data.queue.TypedQueue.prototype.element = function () {
		return this._queue.element() ;
	}
	
	vegas.data.queue.TypedQueue.prototype.enqueue = function (o)/*Boolean*/ {
		this.validate(o) ;
		return this._queue.enqueue(o) ;  
	} 

	vegas.data.queue.TypedQueue.prototype.isEmpty = function () /*Boolean*/ {
		return this._queue.isEmpty() ;
	}

	vegas.data.queue.TypedQueue.prototype.iterator = function ()/*Iterator*/ {
		return this._queue.iterator() ;
	}

	vegas.data.queue.TypedQueue.prototype.peek = function () {
		return this._queue.peek() ;
	}
	
	vegas.data.queue.TypedQueue.prototype.poll = function () {
		return this._queue.poll() ;
	}

	vegas.data.queue.TypedQueue.prototype.setType = function (type /*Function*/) /*Void*/ {
		vegas.util.AbstractTypeable.prototype.setType.call(this, type) ;
		this._queue.clear() ;
	}

	vegas.data.queue.TypedQueue.prototype.size = function ()/*Number*/ {
		return this._queue.size() ;
	}
	
	vegas.data.queue.TypedQueue.prototype.toArray = function ()/*Array*/ {
		return this._queue.toArray() ;
	}

	vegas.data.queue.TypedQueue.prototype.toSource = function (indent/*Number*/, indentor/*String*/)/*String*/ {
		var sourceA/*String*/ = vegas.util.TypeUtil.toString(this._type) ;
		var sourceB/*String*/ = this._queue.toSource() ;
		return "new vegas.data.queue.TypedQueue(" + sourceA + "," + sourceB + ")" ;
	}

	vegas.data.queue.TypedQueue.prototype.toString = function ()/*String*/ {
		return this._queue.toString() ;
	}
	
	// ----o Encapsulate

	//trace ("***** running vegas.data.queue.TypedQueue") ;
	
}