/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** TypedCollection

	AUTHOR

		Name : TypedCollection
		type : SSAS
		Package : vegas.data.collections
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-09
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
		
	METHOD SUMMARY

		- clear()
		
		- contains(o)
		
		- containsAll(c:Collection)
		
		- get(id)
		
		- indexOf(o)
		
		- insert(o)
		
		- insertAll(c:Collection)
		
		- isEmpty()
		
		- iterator()
		
		- remove()
		
		- removeAll(c:Collection)
		
		- retainAll(c:Collection)
		
		- size():Number
		
		- toArray():Array
		
		- toSource():String
		
		- toString():String

	INHERIT
	
		Object → AbstractTypeable → TypedCollection

	IMPLEMENTS
	
		Iterable, Serializable, Typeable, Validator	
	
	EXAMPLE	
		var ar = ["item1", "item2", "item3"]
		var co1 = new vegas.data.collections.TypedCollection(ar) ;
		var co2 = new vegas.data.collections.TypedCollection(["item2", "item3"]) ;
		var co3 = new vegas.data.collections.TypedCollection(["item5", "item3"]) ;
		trace ("co1 : " + co1) ;
		trace ("co1.toSource : " + co1.toSource()) ;
		trace ("co1.constainsAll(co2) : " + co1.containsAll(co2)) ;
		trace ("co1.retainAll(co2) : " + co1.retainAll(co2)) ;
		trace ("co1 : " + co1) ;
		trace ("co1.insertAll(co3) : " + co1.insertAll(co3)) ;
		trace ("co1.removeAll(co2) : " + co1.removeAll(co2)) ;
		trace ("co1 : " + co1) ;
	
	SEE ALSO 
	
		Core2 Library
	
**/ 

if (vegas.data.collections.TypedCollection == undefined) {

	// ----o Imports

	if (vegas.util.AbstractTypeable == undefined) {
		
		require("vegas.util.AbstractTypeable") ;
		
	}

	// ----o Constructor

	vegas.data.collections.TypedCollection = function ( type /*Function*/ , co /*Collection*/ ) { 
		vegas.util.AbstractTypeable.call(this, type) ;
		if ( !(co instanceof vegas.data.Collection) || co == null ) {
			throw new vegas.events.IllegalArgumentError("TypedCollection constructor, argument 'co' must be a Collection or not be 'null' or 'undefined'") ;
		}
		if (co.size() > 0) {
			var it = co.iterator() ;
			while ( it.hasNext() ) {
				this.validate( it.next() ) ;
			}
		}
		this._co = co ;
	}

	// ----o Inherit
	
	vegas.data.collections.TypedCollection.extend(vegas.util.AbstractTypeable) ;

	// ----o Public Methods
	
	vegas.data.collections.TypedCollection.prototype.clear = function () {
		this._co.clear() ;
	}
	
	vegas.data.collections.TypedCollection.prototype.clone = function () {
		return new vegas.data.collections.TypedCollection(this.getType(), this._co.clone()) ;
	}

	vegas.data.collections.TypedCollection.prototype.contains = function (o) /*Boolean*/ {
		return this._co.contains(o) ;
    }

	vegas.data.collections.TypedCollection.prototype.get = function (id /*Number*/) {
		return this._co.get(id) ;
	}

	vegas.data.collections.TypedCollection.prototype.insert = function (o) /*Boolean*/ {
		this.validate(o) ;
		return this._co.insert(o) ;
    }

	vegas.data.collections.TypedCollection.prototype.isEmpty = function () /*Boolean*/ {
		return this._co.isEmpty() ;
	}

	vegas.data.collections.TypedCollection.prototype.iterator = function () /*Iterator*/ {
		return this._co.iterator() ;
	}

	vegas.data.collections.TypedCollection.prototype.remove = function (o) /*Boolean*/ {
		return this._co.remove(o);
    }

	vegas.data.collections.TypedCollection.prototype.setType = function (type /*Function*/) /*Void*/ {
		vegas.util.AbstractTypeable.prototype.setType.call(this, type) ;
		this._co.clear() ;
	}

	vegas.data.collections.TypedCollection.prototype.size = function ()/*Number*/ {
		return this._co.size() ;
	}
	
	vegas.data.collections.TypedCollection.prototype.toArray = function ()/*Array*/ {
		return this._co.toArray() ;
	}

	vegas.data.collections.TypedCollection.prototype.toSource = function (indent/*Number*/, indentor/*String*/)/*String*/ {
		var sourceA/*String*/ = vegas.util.TypeUtil.toString(this._type) ;
		var sourceB/*String*/ = this._co.toSource() ;
		return "new " + this.getConstructorPath() + "(" + sourceA + "," + sourceB + ")" ;
	}

	vegas.data.collections.TypedCollection.prototype.toString = function ()/*String*/ {
		return this._co.toString() ;
	}
	
	//trace ("***** running vegas.data.collections.TypedCollection") ;
	
}