/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** SimpleCollection

	AUTHOR

		Name : SimpleCollection
		type : SSAS
		Package : vegas.data.collections
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-09
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
		
	METHOD SUMMARY

		- clear()
		
		- contains(o)
		
		- containsAll(c:Collection)
		
		- get(id)
		
		- indexOf(o)
		
		- insert(o)
		
		- insertAll(c:Collection)
		
		- isEmpty()
		
		- iterator()
		
		- remove()
		
		- removeAll(c:Collection)
		
		- retainAll(c:Collection)
		
		- size():Number
		
		- toArray():Array
		
		- toSource():String
		
		- toString():String

	INHERIT
	
		Object > AbstractCollection > SimpleCollection

	IMPLEMENTS
	
		Collection, Serializable, ToString
	
	EXAMPLE
	
		var ar = ["item1", "item2", "item3"]
		var co1 = new vegas.data.collections.SimpleCollection(ar) ;
		var co2 = new vegas.data.collections.SimpleCollection(["item2", "item3"]) ;
		var co3 = new vegas.data.collections.SimpleCollection(["item5", "item3"]) ;
		trace ("co1 : " + co1) ;
		trace ("co1.toSource : " + co1.toSource()) ;
		trace ("co1.constainsAll(co2) : " + co1.containsAll(co2)) ;
		trace ("co1.retainAll(co2) : " + co1.retainAll(co2)) ;
		trace ("co1 : " + co1) ;
		trace ("co1.insertAll(co3) : " + co1.insertAll(co3)) ;
		trace ("co1.removeAll(co2) : " + co1.removeAll(co2)) ;
		trace ("co1 : " + co1) ;
	
**/ 

_global.getPackage("vegas.data.collections") ;

if (vegas.data.collections.SimpleCollection == undefined) {

	// ----o Imports

	loadFile("vegas/data/collections/AbstractCollection.asc") ;

	var AbstractCollection = vegas.data.collections.AbstractCollection ;

	// ----o Constructor

	vegas.data.collections.SimpleCollection = function ( ar /*Array*/ ) { 
		AbstractCollection.call(this, ar) ;
	}

	// ----o Inherit

	var constructor = vegas.data.collections.SimpleCollection ;
	var proto = constructor.extend(vegas.data.collections.AbstractCollection) ;

	// ----o Public Methods
		
	proto.clone = function () {
		return new vegas.data.collections.SimpleCollection(this._a) ;
	}

	proto.containsAll = function (c/*Collection*/) /*Boolean*/ {
		var it = c.iterator() ;
		while(it.hasNext()) {
			if ( ! this.contains(it.next()) ) return false ;
		}
		return true ;
	}

	proto.insertAll = function (c/*Collection*/) /*Boolean*/ {
		if (c.size() > 0) {
			if (c.iterator()) {
				var it = c.iterator() ;
				while(it.hasNext()) this.insert(it.next()) ;
				return true ;
			}
		}
		return false
	}
	
	proto.removeAll = function (c/*Collection*/) /*Boolean*/ {
		var b = false ;
		var it = this.iterator() ;
		while (it.hasNext()) {
			if ( c.contains(it.next()) ) {
				it.remove() ;
				b = true ;
			}
		}
		return b ;
	}

	proto.retainAll = function (c/*Collection*/) /*Boolean*/ {
		var b = false ;
		var it = this.iterator() ;
		while(it.hasNext()) {
			if ( ! c.contains(it.next() ) ) {
				it.remove() ;
				b = true ;
			}
		}
		return b ;
	}
	
	// ----o Encapsulate

	delete AbstractCollection ;

	delete constructor ;
	delete proto ;
	
	//trace ("***** running vegas.data.collections.SimpleCollection") ;
	
}