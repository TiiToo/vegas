/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** ObjectIterator

	AUTHOR

		Name : ObjectIterator
		type : SSAS
		Package : vegas.data.iterator
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-11
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	DESCRIPTION
	
		Permet de parcourir les attributs d'un objet à condition que les attributs soient énumérables."
	
	METHOD SUMMARY

		- hasNext()
		
			renvoi true si il existe encore une propriété dans l'objet
		
		- index()
			
			récupère la position du pointeur 
		
		- key()
		
			récupère le nom de l'attribut en cours aprés un it.next()
		
		- next()
		
			récupère le prochain attribut dans l'objet
		
		- remove()
		
			supprime une propriété aprés un it.next()
		
		- reset()
		
			Réinitialise l'iterator
		
		- seek() 
		
			Permet de changer l'index de l'iterator (entre 0 et nombre de propriétés dans l'objet)
	
	INHERIT
	
		CoreObject → ObjectIterator
	
	EXAMPLE
	
		var it = new vegas.data.iterator.ObjectIterator( { a : 1 , b : 2 , c : 3 } ) ;
		while(it.hasNext()) {
			var value = it.next() ;
			var key = it.key() ;
			trace (key + " : " + value) ;
		}
		trace ("--- seek(2)") ;
		it.seek(2) ;
		while(it.hasNext()) {
			trace (it.next()) ;
		}
	
**/ 

if (vegas.data.iterator.ObjectIterator == undefined) {

	// ----o Constructor

	vegas.data.iterator.ObjectIterator = function ( o /*Object*/ ) { 
		this._o = o ;
		this._a = new Array ;
		this._k = -1 ;
		for (var each in o) if ( typeof(o[each]) != "function") this._a.push(each) ;
		this._len = this._a.length ;
	}

	// ----o Inherit

	vegas.data.iterator.ObjectIterator.extend(vegas.core.CoreObject) ;

	// ----o Public Methods
	
	vegas.data.iterator.ObjectIterator.prototype.hasNext = function () {
		return this._k < (this._len-1)  ;
	}
	
	vegas.data.iterator.ObjectIterator.prototype.index = function () {
		return this._k ;
	}
	
	vegas.data.iterator.ObjectIterator.prototype.key = function() {
		return this._a[this._k] ;
	}
	
	vegas.data.iterator.ObjectIterator.prototype.next = function () {
		return this._o[ this._a[++this._k] ]  ;
	}

	vegas.data.iterator.ObjectIterator.prototype.remove = function() {
		var p /*String*/ = this._a[this._k] ;
		this._a.splice(this._k--, 1) ;
		delete this._o[p] ;
		this._len -- ;
		return p ;
	}

	vegas.data.iterator.ObjectIterator.prototype.reset = function() {
		this._k = -1 ;
	}
	
	vegas.data.iterator.ObjectIterator.prototype.seek = function (n) {
		this._k = vegas.util.MathsUtil.clamp(n-1, -1, this._len-1) ;
	}
	
	// ----o Encapsulate

	//trace ("***** running vegas.data.array.ObjectIterator") ;
	
}