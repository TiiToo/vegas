
/** Class TypedArray

	AUTHOR

		Name : TypedArray
		type : SSAS
		Package : vegas.array
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-09
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	METHOD SUMMARY

		- clone()
		
		- concat()
		
			return a TypedArray
		
		- iterator()
		
		- getType()
		
		- push(value)
		
		- setType(type:Function) : set the type and clear TypedArray
		
		- supports(value)
		
		- unshift(value)
		
		- toSource(indent:Number, indentor:String)
		
		- validate(value)
	
	INHERIT
	
		Object > Array
	
	SEE ALSO
	
		vegas.util.ConstructorUtil, vegas.util.TypeUtil
	
	EXAMPLE
	
		var ar = [2, 4, 10] ;
		var ta = new vegas.data.array.TypedArray(Number, ar) ;
		ta.push(10) ;
		trace ("ta : " + ta) ;
		trace ("ta toSource : " + ta.toSource()) ;
		ta.push("hello") ; 
		// --- output
		// ta : 2,4,10,12
		// ta toSource : new vegas.data.array.TypedArray(Number,[2,4,10,12])
		//  Sending error message: uncaught exception: ## TypeMismatchError : TypedArray.validate('hello') is mismatch. ##
	
**/ 

if (vegas.data.array.TypedArray == undefined) {
	
	// ----o Constructor

	vegas.data.array.TypedArray = function ( type/*Function*/, ar /*Array*/ ) { 
		if (type == null) throw new vegas.events.IllegalArgumentError("TypedArray constructor, Argument 'type' must not be 'null' nor 'undefined'.") ;
		this._type = type ;
		if (ar instanceof Array && ar.length > 0) {
			var len = ar.length ;
			for (var i = 0 ; i<len ; i++) {
				var value = ar[i] ;
				if (this.supports(value)) this.push(value) ;
			}
		}
	}

	// ----o Inherit

	vegas.data.array.TypedArray.extend( Array ) ;

	// ----o Public Methods
		
	vegas.data.array.TypedArray.prototype.clone = function () {
		return new vegas.data.array.TypedArray(this.getType(), this.slice()) ;
	}
	
	vegas.data.array.TypedArray.prototype.concat = function () {
		var r = new this.constructor(this._type) ;
		var i, j, k, l1, l2 ;
		i = this.length ;
		while(--i>-1) r[i] = this[i];
		l1 = arguments.length ;
		j = -1 ;
		while(++j < l1) {
			var cur = arguments[j] ;
			if (cur instanceof Array) {
				l2 = cur.length ;
				k = -1 ;
				while (++k < l2) r.push(cur[k]);
			} else {
				r.push(cur);
			}
		}
		return r ;
	}
	
	vegas.data.array.TypedArray.prototype.iterator = function () /*Iterator*/ {
		return new vegas.data.iterator.ArrayIterator(this) ;
	}
	
	vegas.data.array.TypedArray.prototype.getType = function() {
		return this._type;
	}
	
	vegas.data.array.TypedArray.prototype.push = function (value) {
		if (arguments.length > 1) {
			var len = arguments.length;
			var i = 0 ;
			while (++i < len) {
				this.validate(arguments[i]) ;
			}
		} else {
			this.validate(value) ;
		}
		return this.__constructor__.prototype.push.apply(this, arguments) ;
	}
	
	vegas.data.array.TypedArray.prototype.setType = function(type/*Function*/) {
		this._type = type ;
		this.length = 0 ;
	}

	vegas.data.array.TypedArray.prototype.supports = function(value) {
		return ( vegas.util.TypeUtil.typesMatch(value, this._type) == true ) ;
	}
	
	vegas.data.array.TypedArray.prototype.toSource = function(indent/*Number*/, indentor/*String*/) /*String*/ {
		var sourceA = vegas.util.TypeUtil.toString(this._type) ;
		var sourceB = Array.vegas.data.array.TypedArray.prototypetype.toSource.apply(this) ;
		return "new vegas.data.array.TypedArray(" + sourceA + "," + sourceB + ")" ;
	}

	vegas.data.array.TypedArray.prototype.unshift = function(value) {
		if (arguments.length > 1) {
			var len = arguments.length ;
			var i = -1 ;
			while (++i < l )  this.validate(arguments[i]);
		} else {
			this.validate(value) ;
		}
		return Number(Array.vegas.data.array.TypedArray.prototypetype.unshift.apply(this, arguments)) ;
	}

	vegas.data.array.TypedArray.prototype.validate = function(value) {
		if (!this.supports(value)) throw new vegas.errors.TypeMismatchError("TypedArray.validate('" + value + "') is mismatch.")
	}

	//trace ("***** running vegas.data.array.TypedArray") ;
	
}