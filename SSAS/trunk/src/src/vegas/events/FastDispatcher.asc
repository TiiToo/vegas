/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** FastDispatcher
 
	AUTHOR
	
		Name : FastDispatcher
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Date :  2006-05-30
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
 
 	CONSTRUCTOR
	
		var dispatcher:FastDispatcher = new FastDispatcher( ar:Array ) ;
		
	USE

		var EVENT_TYPE = "onTest" ;
		
		var o = {} ;
		o[EVENT_TYPE] = function () {
			trace ("  > scope : " + this) ;
			trace ("  > type : " + e.getType()) ;
			trace ("  > target : " + e.getTarget()) ;
			trace ("  > context : " + e.getContext()) ;
		}	
		o.toString = function () {
			return "[MyObject]" ;
		}
		
		var fd = new vegas.events.FastDispatcher() ;
		
		trace("> fd addListener o : " + fd.addListener(o))
		trace("> fd size : " + fd.size()) ;
		
		trace("---- 1 - isObject") ;
		trace("> fd dispatch : " + fd.dispatch( { type : EVENT_TYPE , target : this , context : "hello world" } ) );
		
		trace("---- 2 - isEvent") ;
		trace("> fd dispatch : " + fd.dispatch( new vegas.events.BasicEvent(EVENT_TYPE, this, "hello world") ) ) ;
		
		trace("---- 3 - isObject") ;
		trace("> fd dispatch : " + fd.dispatch( EVENT_TYPE, this, "hello world" ) ) ;
		
		trace ("-------") ;
		
		trace("> fd removeListener o : " + fd.removeListener( o ) );
		
		trace ("-------") ;
		
		trace("> fd dispatch : " + fd.dispatch( { type : EVENT_TYPE , target : this } ) );

	METHOD SUMMARY
	
		- addListener(listener):Boolean
		
			Registers an object to receive event notification messages. 
			This method is called on the broadcasting object and the listener object is sent as an argument.
		
		- broadcastMessage(eventName:String, [param1, param2, .., paramN]) ;

			Sends an event message to each object in the list of listeners.
			When the message is received by the listening object, Flash Player attempts to invoke a function of the same name on the listening object.
					
		- dispatch(event)

			Sends an Event Object to each object in the list of listeners. 
			When the Event is received by the listening object, Flash Player attempts to invoke a function of the same name on the Event.type property.

		- isEmpty():Boolean
		
			Return true is the listeners list is empty.
		
		- iterator():Iterator
		
			Return an iterator of _listeners list.
		
		- removeAllListeners():Boolean
			
			clear listeners list.
		
		- removeListener()
		
			Removes an object from the list of objects that receive event notification messages. 
		
		- size():Number

			Return count of listeners.
		
		- toString():String

	INHERIT
	
		CoreObject â†’ FastDispatcher

	IMPLEMENTS
	
		Iterable, IFormattable, IHashable
 
 **/
 
if (vegas.events.FastDispatcher == undefined) {
	
	// ----o Constructor
 
	vegas.events.FastDispatcher = function( ar /*Array*/ ) {
		this._listeners = (ar instanceof Array && ar.length > 0) ? [].concat(ar) : [] ;
	}
	
	// ----o Inherit
 
	vegas.events.FastDispatcher.extend(vegas.core.CoreObject) ;
 
	// ----o Public Methods
 
 	vegas.events.FastDispatcher.prototype.addListener = function ( listener ) /*Boolean*/ {
		if (this._listeners.contains(listener)) {
			return false ;
		} else {
			this._listeners.push(listener) ;
			return true ;
		}
	}

	vegas.events.FastDispatcher.prototype.clone = function () {
		return new vegas.events.FastDispatcher(this._listeners) ;
	}

	vegas.events.FastDispatcher.prototype.dispatch = function ( event ) /*Event*/ {
		
		if (event == null || this.isEmpty()) return null ;
		
		var e /*Event*/ = null ;
		
		if (event instanceof vegas.events.Event) 
		{
			e = event ;
		} 
		else if ( vegas.util.TypeUtil.typesMatch( event, String ) )
		{
			e = new vegas.events.DynamicEvent(event) ;
			e.setTarget(arguments[1]) ;
			e.setContext(arguments[2]) ;
		}
		else {
			if (event["type"] == undefined) {
				return null ;
			}
			e = new vegas.events.DynamicEvent() ;
			e.setType(event.type ) ;
			e.setTarget( event.target) ;
			e.setContext(event.context) ;
		}
		this._propagate(e) ;
		return e ;
	}

	vegas.events.FastDispatcher.prototype.getListeners = function () /*Array*/ {
		return [].concat(this._listeners) ;
	}
	
	vegas.events.FastDispatcher.prototype.isEmpty = function () /*Boolean*/ {
		return this._listeners.length == 0 ;
	}
	
	vegas.events.FastDispatcher.prototype.iterator = function () /*Iterator*/ {
		return new vegas.data.iterator.ArrayIterator(this._listeners) ;
	}
	
	vegas.events.FastDispatcher.prototype.removeAllListeners = function () /*Void*/ {
		this._listeners.splice(0) ;
	}
	
	vegas.events.FastDispatcher.prototype.removeListener = function (listener) /*Boolean*/ {
		
		var index /*Number*/ = this._listeners.indexOf(listener) ;
		
		if ( index != -1 ) {
			
			this._listeners.splice(index, 1) ;
			return true ;
			
		}
		
		return false ;
		
	}

	vegas.events.FastDispatcher.prototype.size = function () /*Number*/ {
		return this._listeners.length ;
	}

	// ----o Private Properties
	
	vegas.events.FastDispatcher.prototype._listeners = null ;

	// ----o Private Methods
	
	vegas.events.FastDispatcher.prototype._propagate = function ( e /*Event*/ ) /*Void*/ {
		var eType /*String*/ = e.getType() ;
		if (eType == null) return ;
		var ar /*Array*/ = this._listeners.concat() ;
		var l /*Number*/ = ar.length ;
		for (var i /*Number*/ = 0 ; i<l ; i++) {
			var listener = ar[i] ;
			listener[eType].apply(listener, Array.fromArguments(arguments)) ;
		}
		
	}

	// ----o Encapsulate

	// trace ("***** running vegas.events.FastDispatcher") ;
	
}
