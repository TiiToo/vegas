/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** AbstractEventDispatcher

	AUTHOR
	
		Name : AbstractEventDispatcher
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-28
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
 	DESCRIPTION

		Cette classe est privée, elle est utilisée en tant qu'abstraction pour créer par la suite des classes qui vont utiliser la classe EventDispatcher? par composition et qui vont implémenter également IEventDispatcher.
		
		Il est possible de redéfinir l'instance interne de la classe EventDispatcher en surchargeant la méthode getEventDispatcher(). Il peut être intéressant de faire cet overriding dans certaines conditions comme pour passer le système événmentiel sur un modèle global et non plus local au niveau de l'instance (Notion de Front Controller).  

	METHOD SUMMARY
	
		- addEventListener(eventName:String, listener:EventListener, useCapture:Boolean, priority:Number, autoRemove:Boolean):Void
		
		- addGlobalEventListener(listener:EventListener, priority:Number, autoRemove:Boolean):Void
		
		- dispatchEvent( event , [isQueue, [target, [context]]]):Event
		
		- getEventDispatcher():EventDispatcher 
		
 		- getEventListeners(eventName:String):EventListenerCollection
		
		- getGlobalEventListeners():EventListenerCollection
		
		- getParent():EventDispatcher
		
		- getRegisteredEventNames():Set
		
		- initEventDispatcher():EventDispatcher 
		
 		- hasEventListener(eventName:String):Boolean
		
		- removeEventListener(eventName:String, listener, useCapture:Boolean ):EventListener
		
		- removeGlobalEventListener(o):EventListener
		
		- setParent(parent:EventDispatcher):Void
	
	INHERIT

		 CoreObject → AbstractCoreEventDispatcher
 
 	IMPLEMENTS
 
		EventTarget, IEventDispatcher, IFormattable, IHashable
	
**/ 

_global.getPackage("vegas.events") ;

if (vegas.events.AbstractCoreEventDispatcher == undefined) {

	// ----o Import
	
	loadFile("vegas/events/IEventDispatcher.asc") ;
	loadFile("vegas/events/EventDispatcher.asc") ;
	
	// ----o Constructor

	vegas.events.AbstractCoreEventDispatcher = function ( target /*IEventDispatcher*/ , parent /*EventDispatcher*/ ) { 
		this._oED = this.initEventDispatcher() ;
	}

	// ----o Inherit

	var constructor = vegas.events.AbstractCoreEventDispatcher ;
	var proto = constructor.extend( vegas.events.IEventDispatcher ) ;

	// ----o Public Methods
	
	proto.addEventListener = function ( eventName/*String*/, listener/*EventListener*/, useCapture/*Boolean*/, priority/*Number*/, autoRemove/*Boolean*/) /*Void*/ {
		this._oED.addEventListener.apply(this._oED, Array.fromArguments(arguments)) ;
	}

	proto.addGlobalEventListener = function(listener/*EventListener*/, priority/*Number*/, autoRemove/*Boolean*/) /*Void*/ {
		this._oED.addGlobalEventListener.apply(this._oED, Array.fromArguments(arguments)) ;
	}

	proto.dispatchEvent = function (event, isQueue/*Boolean*/, target, context) /*Event*/ {
		return this._oED.dispatchEvent.apply(this._oED, Array.fromArguments(arguments)) ;
	}

	proto.getEventDispatcher = function() /*EventDispatcher*/ {
		return this._oED ;	
	}	

	proto.getEventListeners = function(eventName/*String*/)/*EventListenerCollection*/ {
		return this._oED.getEventListeners.apply(this._oED, Array.fromArguments(arguments)) ;
	}
	
	proto.getGlobalEventListeners = function()/*EventListenerCollection*/ {
		return this._oED.getGlobalEventListeners.apply(this._oED, Array.fromArguments(arguments)) ;
	}

	proto.getParent = function () /*EventDispatcher*/ {
		return this._oED.parent ;
	}

	proto.getRegisteredEventNames = function()/*Set*/ {
		return this._oED.getRegisteredEventNames.apply(this._oED, Array.fromArguments(arguments)) ;
	}

	proto.hasEventListener = function(eventName/*String*/)/*Boolean*/ {
		return this._oED.hasEventListener.apply(this._oED, Array.fromArguments(arguments)) ;
	}

	proto.initEventDispatcher = function () /*EventDispatcher*/ {
		return new vegas.events.EventDispatcher( this ) ;
	}

	proto.removeEventListener = function (eventName/*String*/, listener, useCapture/*Boolean*/)/*EventListener*/ {
		return this._oED.removeEventListener.apply(this._oED, Array.fromArguments(arguments)) ;
	}

	proto.removeGlobalEventListener = function( listener )/*EventListener*/ {
		return this._oED.removeGlobalEventListener.apply(this._oED, Array.fromArguments(arguments)) ;
	}

	// ----o Encapsulate

	delete constructor ;
	delete proto ;
	
	//trace ("***** running vegas.events.AbstractCoreEventDispatcher") ;
	
}