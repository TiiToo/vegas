/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** BasicEvent
 
	AUTHOR
	
		Name : BasicEvent
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Date :  2006-05-21
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
 
	USE
	
	
		var EventType = vegas.events.EventType ;
		
		var e = new vegas.events.BasicEvent(EventType.CHANGE, this, "Hello World") ;
		
		trace("> " + e) ;
		trace("> target : " + e.getTarget()) ;
		trace("> type : " + e.getType()) ;
		trace("> context : " + e.getContext()) ;
		trace("> timeStamp : " + new Date(e.getTimeStamp()) ) ;
 
	METHOD SUMMARY

		- cancel():Void
		
		- clone():BasicEvent
		
		- getBubbles():Boolean
		
		- getContext()
		
		- getCurrentTarget()
		
		- getEventPhase():Number
		
		- getTarget()
		
		- getTimeStamp():Number
		
		- getType():String
		
		- initEvent(type:String, bubbles:Boolean, cancelable:Boolean)
		
		- isCancelled():Boolean
		
		- isQueued():Boolean
		
		- queueEvent():Void
		
		- setBubbles(b:Boolean):Void
		
		- setContext(context):Void
		
		- setCurrentTarget(target):Void
		
		- setEventPhase(n:Number):Void
		
		- setTarget(target):Void
		
		- setType(type:String):Void
		
		- stopImmediatePropagation():Void
		
		- toString():String
	
	INHERIT
	
		CoreObject → Event → BasicEvent
 
	IMPLEMENTS 
	
		Event, ICloneable, IFormattable, IHashable
 
 **/
 
if (vegas.events.BasicEvent == undefined) {
	
	// ----o Imports
	
	if (vegas.events.Event == null) {
		require("vegas.events.Event") ;
	}
	
	// ----o Constructor
 
 	/**
	 * Constructs a new {@code BasicEvent} instance.
	 * 
	 * <p>
	 *    <code>
	 *     var e:BasicEvent = new BasicEvent(type, target, context, [bubbles:Boolean, [eventPhase:Number, [time:Number, [stop:Boolean]]]]) ;
	 *    </code>
	 * </p>
	 * @param type:String 
	 * @param target
	 * @param context
	 * @param bubbles:Boolean
	 * @param eventPhase:Number
	 * @param time:Number
	 * @param stop:Boolean
	 */
	_global.vegas.events.BasicEvent = function (
		
		type/*String*/
		, target/*Object*/
		, context/*Object*/
		, p_bubbles /*Boolean*/
		, p_eventPhase /*Number*/
		, p_time /*Number*/
		, p_stop /*Number*/
		
	) 
		{
		
		var EventPhase = vegas.events.EventPhase ;
		
		this._context = context || null ;
		this._target = target || null ;
		this._type = type || null ;
		
		this._bubbles = (p_bubbles != null) ? p_bubbles : true ;
		this._eventPhase = isNaN(p_eventPhase) ? EventPhase.AT_TARGET : p_eventPhase ;
		this._time = (p_time > 0) ? p_time : ( (new Date()).valueOf() ) ;
		
		this.stop = isNaN(p_stop) ? EventPhase.NONE : p_stop ;
		
		}
	
	// ----o Inherit
 
	vegas.events.BasicEvent.extend(vegas.events.Event) ;
 
	// ----o Public Properties
	
	vegas.events.BasicEvent.prototype.stop /*Number*/ = null ;
 
	// ----o Private Properties
	
	vegas.events.BasicEvent.prototype._bubbles /*Boolean*/ = null ;
	vegas.events.BasicEvent.prototype._cancelled /*Boolean*/ = null ;
	vegas.events.BasicEvent.prototype._context /*Object*/ = null ;
	vegas.events.BasicEvent.prototype._currentTarget /*Object*/ = null ;
	vegas.events.BasicEvent.prototype._inQueue /*Boolean*/ = null ;
	vegas.events.BasicEvent.prototype._target /*Object*/ = null ;
	vegas.events.BasicEvent.prototype._time /*Number*/ = null ;
	vegas.events.BasicEvent.prototype._type /*String*/ = null ;
 
	// ----o Public Methods
 
 	vegas.events.BasicEvent.prototype.cancel = function () /*Void*/ {
		this._cancelled = true ;
	}

	/**
	 * @return a new clone reference.
	 */
	vegas.events.BasicEvent.prototype.clone = function () {
		return new vegas.events.BasicEvent(this.getType(), this.getTarget(), this.getContext()) ;
	}

	/**
	 * @return 'true' if the event is bubbling.
	 */
 	vegas.events.BasicEvent.prototype.getBubbles = function () /*Boolean*/ {
		return this._bubbles ;
	}

 	vegas.events.BasicEvent.prototype.getContext = function () /*Object*/ {
		return this._context ;
	}

 	vegas.events.BasicEvent.prototype.getCurrentTarget = function () /*Object*/ {
		return this._currentTarget ;
	}

 	vegas.events.BasicEvent.prototype.getEventPhase = function () /*Number*/ {
		return this._eventPhase ;
	}

 	vegas.events.BasicEvent.prototype.getTarget = function () /*Object*/ {
		return this._target ;
	}

 	vegas.events.BasicEvent.prototype.getTimeStamp = function () /*Number*/ {
		return this._time ;
	}
	
 	vegas.events.BasicEvent.prototype.getType = function () /*String*/ {
		return this._type ;
	}
	
	vegas.events.BasicEvent.prototype.initEvent = function (type /*String*/ , bubbles /*Boolean*/, cancelable /*Boolean*/ ) /*Void*/ {
		this._type = type ;
		this._bubbles = bubbles ;
		this._cancelled = cancelable ;
		this._time = (new Date()).valueOf() ;
	}

	vegas.events.BasicEvent.prototype.isCancelled = function() /*Boolean*/ {
		return this._cancelled ;	
	}
	
	vegas.events.BasicEvent.prototype.isQueued = function() /*Boolean*/ {
		return this._inQueue ;
	}

	vegas.events.BasicEvent.prototype.queueEvent = function() /*Void*/ {
		this._inQueue = true ;
	}

 	vegas.events.BasicEvent.prototype.setBubbles = function ( b /*Boolean*/ ) /*Void*/ {
		this._bubbles = b ;
	}

 	vegas.events.BasicEvent.prototype.setContext = function ( context /*Object*/ ) /*Void*/ {
		this._context = context || null ;
	}

 	vegas.events.BasicEvent.prototype.setCurrentTarget = function ( target /*Object*/ ) /*Void*/ {
		this._currentTarget = target ;
	}

 	vegas.events.BasicEvent.prototype.setEventPhase = function ( n /*Number*/ ) /*Void*/ {
		this._eventPhase = n ;
	}

 	vegas.events.BasicEvent.prototype.setTarget = function ( target /*Object*/ ) /*Void*/ {
		this._target = target || null ;
	}

 	vegas.events.BasicEvent.prototype.setType = function ( type /*String*/ ) /*Void*/ {
		this._type = type || null ;
	}

 	vegas.events.BasicEvent.prototype.stopPropagation = function () /*Void*/ {
		this.stop = vegas.events.EventPhase.STOP ;
	}
	
	vegas.events.BasicEvent.prototype.stopImmediatePropagation = function () /*Void*/ {
		this.stop = vegas.events.EventPhase.STOP_IMMEDIATE ;
	}

	vegas.events.BasicEvent.prototype.toSource = function () /*String*/ {
		var pattern /*String*/ = "new " + this.getConstructorPath() + "({0}, {1}, {2}, {3}, {4}, {5}, {6})" ;
		var args /*Array*/ = [] ;
		args[0] = (this._type != null ) ? this._type.toSource() : null ;
		args[1] = (this._target == null || this._target == _global) ? null : this._target.toSource() ;
		args[2] = (this._context != null) ? this._context.toSource() : null ;
		args[3] = (this._bubbles != null) ? this._bubbles.toSource() : false ;
		args[4] = isNaN(this._eventPhase) ? 0 : this._eventPhase.toSource() ;
		args[5] = isNaN(this._time) ? 0 : this._time ;
		args[6] = this.stop.toSource() ;
		return String.format.apply(this, [pattern].concat(args)) ;
	}

	vegas.events.BasicEvent.prototype.toString = function () /*String*/ {
		var EventPhase = vegas.events.EventPhase ;
		var phase /*Number*/ = this._eventPhase ;
		var name /*String*/ = this.getConstructorName() ;
		var txt /*String*/ = "[" + name ;
		if (this._type) txt += " " + this._type ;
		switch (phase) {
			case EventPhase.CAPTURING_PHASE :
				txt += ", CAPTURING" ;
				break;
			case EventPhase.AT_TARGET:
				txt += ", AT TARGET" ;
				break ;
			case EventPhase.BUBBLING_PHASE:
				txt += ", BUBBLING" ;
				break ;
			default :
				txt += ", (inactive)" ;
				break;
		}
		if (this._bubbles && phase != EventPhase.BUBBLING_PHASE) {
			txt += ", bubbles" ;
		}
		if (this.isCancelled()) {
			txt += ", can cancel" ;
		}
		txt += "]" ;
		return txt ;
	}

	// ----o Protected Methods
	
	vegas.events.BasicEvent.prototype._setTimeStamp = function ( t/*Number*/ ) {
		this._time = t ;
	}

	// ----o Encapsulate

	// trace ("***** running vegas.events.BasicEvent") ;
	
}