/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** FrontController
 
	AUTHOR
	
		Name : FrontController
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Date :  2006-05-29
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
 
	CONSTRUCTOR
	
		var oC:FrontController = new FrontController([oE:EventDispatcher]) ;

	METHOD SUMMARY
	
		- fireEvent(ev:Event):Void
		
		- getListener(eventName:String):EventListener 
		
		- insert(eventName:String, listener:EventListener):Void
		
		- remove(eventName:String):Void
		
	INHERIT
	
		CoreObject â†’ FrontController
	
	IMPLEMENTS 
		
		IFormattable, IHashable
 
	EXAMPLE
	
		load("src/vegas.asc") ;
		
		var action1 = function ( e ) {
			trace("> action1 : " + e.getType()) ;
		}
		
		var action2 = function ( e ) {
			trace("> action2 : " + e.getType()) ;
		}
		
		var ACTION1 = "onAction1" ;
		var ACTION2 = "onAction2" ;
		
		var listener1 = new vegas.events.Delegate(this, action1) ;
		var listener2 = new vegas.events.Delegate(this, action2) ;
		
		var controller = new vegas.events.FrontController() ;
		controller.insert( ACTION1, listener1 ) ;
		controller.insert( ACTION2, listener2 ) ;
		
		var e1 = new vegas.events.BasicEvent( ACTION1, this ) ;
		var e2 = new vegas.events.BasicEvent( ACTION1, this ) ;
		
		controller.fireEvent( e1 ) ;
		controller.fireEvent( e2 ) ;
 
 **/

_global.getPackage("vegas.events") ;

if (vegas.events.FrontController == undefined) {
	
	// ----o Imports
	
	loadFile("vegas/core/CoreObject.asc") ;
	loadFile("vegas/events/EventDispatcher.asc") ;
	loadFile("vegas/events/EventListener.asc") ;
	loadFile("vegas/data/map/HashMap.asc") ;
	
	// ----o Constructor
 
	vegas.events.FrontController = function( oEDispatcher /*EventDispatcher*/ , name /*String*/ ) {
		this._map = new vegas.data.map.HashMap() ;
		this._oE = oEDispatcher || vegas.events.EventDispatcher.getInstance(name); 
	}
	
	// ----o Inherit
 
	var constructor = vegas.events.FrontController ;
	var proto = constructor.extend(vegas.core.CoreObject) ;
 
	// ----o Public Methods
 
 	/**
	 * Dispatch an event into the FrontController
	 * @param e:Event 
	 */
	proto.fireEvent = function(e /*Event*/) /*Void*/ {
		this._oE.dispatchEvent(e) ;
	}

	/**
	 * Returns a EventListener
	 * @usage  myController.get( myEvent:String ) ;	
	 * @param  eventName:String
	 * @return an EventListener  
	 */
	proto.getListener = function(eventName /*String*/ ) /*EventListener*/ {
		return _map.get(eventName) ;
	}
	
	/**
	 * Add a new entry into the FrontController.
	 * @param eventName:String
	 * @param listener:EventListener
	 */
	proto.insert = function(eventName /*String*/ , listener /*EventListener*/ ) /*Void*/ {
		try {
			
			if ( !vegas.util.TypeUtil.typesMatch(eventName, String) ) {
				throw new Error("IllegalArgument : " + this + ".insert method, eventName argument must be a 'String'.") ;
			}
			
			if (listener instanceof vegas.events.EventListener) {
				this._map.put.apply( this._map, arguments ) ;
				this._oE.addEventListener(eventName, listener) ;
			} else {
				
				throw new Error("IllegalArgument : " + this + ".insert method, listener argument must be an 'vegas.events.EventListener' object.") ;
				
			}
		} catch (e /*Error*/) {
			
			trace(e.toString()) ;
			
		}
	}
	
	/**
	 * Remove an entry into the FrontController.
	 * @param eventName:String
	 * @return  
	 */
	proto.remove = function(eventName /*String*/ ) /*Void*/ {
		var listener /*EventListener*/ = this._map.remove.apply(this._map, arguments ) ;
		if (listener != null) {
			this._oE.removeEventListener(eventName, listener);
		}
	}

	// ----o Private Properties
	
	proto._map /*Map*/ = null ;
	proto._oE /*EventDispatcher*/ = null ;
 
	// ----o Encapsulate

	delete constructor ;
	delete proto ;

	// trace ("***** running vegas.events.FrontController") ;

}
