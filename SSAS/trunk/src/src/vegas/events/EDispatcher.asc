/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/* ---------- EDispatcher
 
	AUTHOR
	
		Name : EDispatcher
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Date :  2005-10-22
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
 
	METHODS
	
		- addEventListener( eventName , o , f ) 
		
		- dispatchEvent(ev)
		
		- eventListenerExists(eventName, obj, func)
		
		- removeAllEventListeners(eventName)
		
		- removeEventListener(eventName, o, f)
		
		- updateEvent(eventName, oInit)
 
	EXAMPLE
	
		trace ("#### TEST :: EventDispatcher") ;
		
		// ---- MyClass
		
		MyClass = function () {}
		
		vegas.events.EDispatcher.initialize(MyClass.prototype) ;
		
		MyClass.prototype.speak = function () {
			this.dispatchEvent( { type : "onSpeak" , target : this } ) ;
		}
		
		MyClass.prototype.toString = function () {
			
			return "[MyClass]" ;
			
		}
		
		// ---- test
		
		var listener = {} ;
		listener.toString = function () { return "<listener>" }
		listener.test = function (ev) {
		
			trace (this + " >> test : " + ev.type + " / "  + ev.target ) ;
			
		}
		
		this.onSpeak = function (ev) {
		
			trace (this + " >> " + ev.type + " / " + ev.target) ;
		
		}
		
		
		var i = new MyClass() ;
		
		i.addEventListener("onSpeak", this) ;
		i.addEventListener("onSpeak", listener, this.onSpeak) ;
		i.addEventListener("onSpeak", listener, "test") ;
		
		i.speak() ;
	
		trace ("----")  ;
		
		i.removeEventListener("onSpeak", this) ;
		
		i.speak() ;
	
		
		trace ("#### END TEST") ;
 
	THANKS :
	
		Inspiration & Compatibility : GDispatcher by Grant Skinner, http://gskinner.com/
 
----------  */
 
var p = _global.getPackage("vegas.events") ;

if (p.EDispatcher == undefined) {
	
	// ----o Constructor
 
	vegas.events.EDispatcher = function() {}
		
	// ----
 
	var constructor = vegas.events.EDispatcher ;
	var proto = constructor.extend(Object) ;
 
	// ----o Public Methods
 
	constructor.initialize = function (target /*Object*/ ) {
		if (target == undefined) return null ;
		var attributes = [
			"addEventListener" , "dispatchEvent", "eventListenerExists" ,
			"removeAllEventListeners" , "removeEventListener" , "updateEvent" 
		] ;
		var i = new vegas.events.EDispatcher ;
		var l = attributes.length ;
		while(--l > -1) {
			var prop = attributes[l] ;
			target[prop] = i[prop] ;
		}
	}
 
	constructor.toString = function() /*String*/ {
		return "[EDispatcher]" ;
	}
 
	// -----o Private Properties
 
	proto._listeners = null ;
	
	// -----o Private Methods
 
	proto.addEventListener = function ( eventName /*String*/ , obj /*Object*/, func ) /*Void*/ {
		if (typeof(eventName) == "string") {
			if (this._listeners == null) this._listeners = {} ;
			var a = this._listeners[eventName] ;
			if (a == undefined) this._listeners[eventName] = a = [] ;
			if (vegas.events.EDispatcher.indexOf( a , obj , func) == -1) {
				a.push( { o:obj , f:func } ) ;
			}
		}
	}
	
	constructor.dispatch = function ( target /*Object*/ , a /*Array*/ , ev /*Object*/ ) /*Void*/ {
		for (var each in a) {
			var item = a[each] ;
			var o = item.o ;
			var f = item.f ;
			var tof = typeof(o) ;
			if (tof == "object") {
				if (f instanceof Function) {
					f = p.Delegate.create(o, f) ;
					if (f != undefined) f(ev) ;
				} else if (o["handleEvent"] != undefined && f == undefined) {
					o["handleEvent"](ev) ;
				} else {
					if (f == undefined) f = ev.type ;
					if (typeof(f) == "string" && o[f] != undefined) {
						o[f].apply(o, [ev]) ;
					}
				}
			} else { // function
				o.apply(target, [ev]) ;
			}
		}	
	}
	
	proto.dispatchEvent = function ( ev /*Object*/ ) /*Void*/{
		if ( typeof (ev.type) == "string") {
			if ( ev.type == "ALL") return ;
			var a ;
			if (ev.target == undefined) ev.target = this ;
			var f = this[ev.type + "_handler"] ;
			if (f != undefined) f(ev) ;
			a = this._listeners[ev.type] ;
			if (a != undefined ) vegas.events.EDispatcher.dispatch(ev.target, a, ev) ;
			a = this._listeners["ALL"] ;
			if (a != undefined) vegas.events.EDispatcher.dispatch(ev.target, a, ev) ;
		}
	}
	
	proto.eventListenerExists = function (eventName/*String*/, obj /*Object*/, func/*Object*/) /*Boolean*/ {
		var a = _listeners[eventName] ;
		if (a == undefined) return false ;
		return (EDispatcher.indexOf(a, obj, func)  > -1) ;
	}

	constructor.indexOf = function ( a /*Array*/ , o /*Object*/ , f /*Object*/ ) /*Number*/ {
		var l = a.length ;
		while (--l > -1) {
			var item = a[l] ;
			if (item.o == o && item.f == f) return l ; 
		}
		return -1;
	}
 
	p.removeAllEventListeners = function(eventName/*String*/) /*Void*/ {
		if (eventName) delete this._listeners[eventName] ;
		else delete this._listeners ;
	}
 
	proto.removeEventListener = function ( eventName /*String*/ , obj /*Object*/ , func /*Object*/ ) /*Void*/ {
		var a = this._listeners[eventName] ;
		if (a == undefined) return ;
		var id = EDispatcher.indexOf(a, obj, func) ;
		if (id > -1) a.splice(id, 1) ;
	}
	
	proto.updateEvent = function ( eventName/*String*/, oInit/*Object*/) /*Void*/ {
		var ev = {} ;
		ev.dynamic = true ;
		ev.type = eventName ;
		ev.target = this ;
		if ( oInit != undefined ) for (var each in oInit) ev[each] = oInit[each] ;
		this.dispatchEvent( ev ) ;
	}
 
	// ----o Encapsulate
 
	delete constructor ;
	delete proto ;
 
	//trace ("+++ EDispatcher is ready") ;
	
}