/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** Delegate
 
	AUTHOR
	
		Name : Delegate
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Date :  2006-04-05
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
 
	METHOD SUMMARY
	
		- create( scope:Object, method:Function ):Function

	USAGE 1

		var o = {} ;
		o.toString = function () {
			return "[myObject]" ;
		}
		
		var action = function () {
			trace(this + " - action") ;
			var l = arguments.length ;
			for (var i = 0 ; i<l ; i++) {
				trace("   > " + arguments[i]) ;
			}
		}
		
		var fProxy = vegas.events.Delegate.create(o, action, "arg3") ;
		fProxy("arg1", "arg2") ;
	
	USAGE 2
	
		var fProxy = new Delegate(o, action, "arg3") ;
		fProxy.run("arg1", "arg2") ; // TODO voir l'ordre des arguments
 
**/
 
var p = _global.getPackage("vegas.events") ;

if (p.Delegate == undefined) {
	
	loadFile("vegas/events/EventListener.asc") ;
	
	// ----o Constructor
 
	vegas.events.Delegate = function(scope, method /*, [arg1, arg2, ..., argN]*/ ) {
		this._s = scope ;
		this._m = method ;
		this._a = [].concat( (Array.fromArguments(arguments)).splice(2) ) ;
		this._p = vegas.events.Delegate.create.apply(this, [this._s, this._m].concat(this._a) ) ;
	}
	
	// ----
 
	var constructor = vegas.events.Delegate ;
	var proto = constructor.extend(vegas.events.EventListener) ;
 
	// ----o Public Methods
 
 	proto.addArguments = function (/*[arg1, arg2, ..., argN]*/) {
		
		var args = Array.fromArguments(arguments) ;
		
		if (args.length > 0) {
			this._a = this._a.concat(args) ;
			this._p = vegas.events.Delegate.create.apply(this, [this._s, this._m].concat(this._a) ) ;
		}
		
	}
	
	proto.clone = function () {
		return new vegas.events.Delegate(this.getScope(), this.getMethod()) ;
	}
 
	/*static*/ constructor.create = function (scope /*Object*/ , method /*Function*/ ) /*Function*/ {
		
		var args /*Array*/ = Array.fromArguments(arguments) ;
		args = args.splice(2) ;
		
		trace(">> " + args) ;
		
		return function() {
			var ar /*Array*/ = Array.fromArguments(arguments).concat(args) ;
			method.apply(scope, ar) ;
		}
		
	}

	proto.getArguments = function () /*Array*/ {
		return this._a ;
	}

	proto.getMethod = function () /*Function*/ {
		return this._m ;
	}
	
	proto.getScope = function () /*Object*/ {
		return this._s ;
	}
	
	proto.handleEvent = function ( e /*Event*/ ) {
		return this._m.apply( this._s, [e].concat(this._a) ) ;
	}

	proto.run = function() {
		this.addArguments.apply(this, Array.fromArguments(arguments)) ;
		this._p() ;
	}

	proto.setArguments = function () {
		var args = Array.fromArguments(arguments) ;
		if (args.length > 0) {
			this._a = [].concat(args) ;
			this._p = vegas.events.Delegate.create.apply(this, [this._s, this._m].concat(this._a) ) ;
		}
	}

	// ----o Encapsulate
 
	delete constructor ;
	delete proto ;

}
