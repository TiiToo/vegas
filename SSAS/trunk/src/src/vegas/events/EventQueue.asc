/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** EventQueue

	AUTHOR

		Name : EventQueue
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-27
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	DESCRIPTION
	
		Classe utilisée par la classe !EventDispatcher (en AS3 cette classe serait une classe privée)

	METHOD SUMMARY

		- enqueue(e:Event):Void
		
		- getQueuedEvents([eventType:String]):Queue
		
			return a queue with all events
			
			return queued events of a specific event name
		
		- size():Number
		
		- toString():String

	INHERIT
	
		CoreObject → EventQueue

	IMPLEMENTS
	
		IFormattable, IHashable
	
**/ 

if (vegas.events.EventQueue == undefined) {

	// ----o Constructor

	vegas.events.EventQueue = function ( container /*EventListenerContainer*/ ) {
		this._events = new vegas.data.queue.LinearQueue() ;
	}

	// ----o Inherit

	vegas.events.EventQueue.extend(vegas.core.CoreObject) ;
	
	// ----o Private Properties
	
	vegas.events.EventQueue.prototype._events /*LinearQueue*/ = null ;

	// ----o Public Methods
    
	vegas.events.EventQueue.prototype.enqueue = function ( e/*Event*/ ) /*Void*/ {
        e.queueEvent() ;
        this._events.enqueue(e) ;
    }

    vegas.events.EventQueue.prototype.getQueuedEvents = function () /*Queue*/ {
		if (vegas.util.TypeUtil.typesMatch(arguments[0], String)) {
			var q /*LinearQueue*/ = new vegas.data.queue.LinearQueue() ;
			var eventType /*String*/ = arguments[0] ;
			var it /*Iterator*/ = this._events.iterator() ;
			while (it.hasNext()) {
				var e /*Event*/ = it.next() ;
				if (e.getType() == eventType) q.enqueue(e) ;
			}
			return q ;
		} else {
			return this._events ;
		}
    }
    
	vegas.events.EventQueue.prototype.size = function () /*Number*/ {
		return this._events.size() ;
	}

	// ----o Encapsulate

	// trace ("***** running vegas.events.EventQueue") ;
	
}