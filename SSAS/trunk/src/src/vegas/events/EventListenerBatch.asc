/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/* ----- EventListenerBatch

	AUTHOR

		Name : EventListenerBatch
		type : SSAS
		Package : vegas.events
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-25
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net

	USE
	
		BasicEvent = vegas.events.BasicEvent ;
		Delegate = vegas.events.Delegate ;
		EventListenerBatch = vegas.events.EventListenerBatch ;
		
		var EVENT_TYPE = "onTest" ;
		
		var action1 = function (e) {
			trace ("> action1 : " + e.getType()) ;
		}
		
		var action2 = function (e) {
			trace ("> action2 : " + e.getType()) ;
		}
		
		var oListener1 = new Delegate(this, action1) ;
		var oListener2 = new Delegate(this, action2) ;
		
		var batch = new EventListenerBatch() ;
		batch.insert(oListener1) ;
		batch.insert(oListener2) ;
		
		trace(batch) ;
		trace(batch.size()) ;

	METHOD SUMMARY
	
		- handleEvent(e:Event)
			Permet d'intercepter un événement.
	
	INHERIT
	
		ITypeable → AbstractTypeable → TypedCollection → EventListenerBatch
	
	IMPLEMENTS
	
		ITypeable
	
---------- */ 

var namespace = _global.getPackage("vegas.events") ;

if (namespace.EventListenerBatch == undefined) {

	// ----o Import

	loadFile("vegas/events/EventListener.asc") ;
	loadFile("vegas/data/collections/SimpleCollection.asc") ;
	loadFile("vegas/data/collections/TypedCollection.asc") ;

	var EventListener = vegas.events.EventListener ;
	var SimpleCollection = vegas.data.collections.SimpleCollection ;
	var TypedCollection = vegas.data.collections.TypedCollection ;

	// ----o Constructor

	vegas.events.EventListenerBatch = function () { 
		var type = vegas.events.EventListener ;
		TypedCollection.call(this, EventListener, new SimpleCollection()) ;
	}

	var constructor = vegas.events.EventListenerBatch ;
	var proto = constructor.extend(vegas.data.collections.TypedCollection) ;
	
	// ----o Public Methods
		
	proto.handleEvent = function (e /*Event*/ ) {
		
		var ar /*Array*/ = this.toArray() ;
		var i /*Number*/ = -1 ;
		var l /*Number*/ = ar.length ;
		if (l>0) {
			while (++i < l) { 
				ar[i].handleEvent.apply(ar[i], Array.fromArguments(arguments)) ; 
			}
		}
		
	}

	// ----o Encapsulate

	delete EventListener ;
	delete SimpleCollection ;
	delete TypedCollection ;

	delete constructor ;
	delete proto ;
	
	//trace ("***** running vegas.events.EventListenerBatch") ;
	
}

delete namespace ;