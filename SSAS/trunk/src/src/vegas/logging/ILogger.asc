/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** ILogger [Interface]

	AUTHOR

		Name : ILogger
		type : SSAS
		Package : vegas.logging
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-31
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	METHOD SUMMARY
	
		- addEventListener(eventName:String, listener:EventListener, useCapture:Boolean, priority:Number, autoRemove:Boolean):Void
		
		- addGlobalEventListener(listener:EventListener, priority:Number, autoRemove:Boolean):Void
		
		+ debug(context, ...rest):Void
		
			Logs the specified data using the LogEventLevel.DEBUG level.
		
		- dispatchEvent( event , [isQueue, [target, [context]]]):Event
		
		+ error(context, ...rest):Void
		
			Logs the specified data using the LogEventLevel.ERROR level.
		
		+ fatal(context, ...rest):Void
		
			Logs the specified data using the LogEventLevel.FATAL level.
		
		- getEventListeners(eventName:String) : EventListenerCollection
		
		- getGlobalEventListeners():EventListenerCollection
		
		- getRegisteredEventNames():Set
			
		- hasEventListener(eventName:String):Boolean
		
		- info(context, ...rest):Void
		
			Logs the specified data using the LogEvent.INFO level.
		
		- log(context, message:String, ...rest):Void
		
			Logs the specified data at the given level.
		
		- removeEventListener(eventName:String, listener, useCapture:Boolean ):EventListener
		
		- removeGlobalEventListener(o):EventListener
		
		- warn(context, ...rest):Void
		
			Logs the specified data using the LogEventLevel.WARN level.

	INHERIT
	
		CoreObject → AbstractCoreEventDispatcher → ILogLogger

	IMPLEMENTS
	
		 IFormattable → IEventDispatcher → ILogger
	
**/ 

if (vegas.logging.ILogger == undefined) {

	// ----o Imports
	
	require("vegas.events.EventDispatcher") ;

	// ----o Constructor

	vegas.logging.ILogger = function () { 
		vegas.events.EventDispatcher.call(this) ;
	}

	// ----o Inherit

	vegas.logging.ILogger.extend( vegas.events.EventDispatcher ) ;
	
	// ----o Public Methods
	
	vegas.logging.ILogger.prototype.debug = function (context) /*Void*/ {
		//
	}
	
	vegas.logging.ILogger.prototype.error = function (context) /*Void*/ {
		//
	}
	
	vegas.logging.ILogger.prototype.fatal = function (context) /*Void*/ {
		//
	}
	
	vegas.logging.ILogger.prototype.info = function (context) /*Void*/ {
		//
	}
	
	vegas.logging.ILogger.prototype.log = function (level /*Number*/, context) /*Void*/ {
		//
	}
	
	vegas.logging.ILogger.prototype.warn = function (context) /*Void*/ {
		//
	}

	// ----o Encapsulate
	
	//trace ("***** running vegas.logging.ILogger") ;
	
}