/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** SOSTarget

	AUTHOR

		Name : SOSTarget
		type : SSAS - FMS2 only
		Package : vegas.logging.targets
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-06-12
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	PROPERTY SUMMARY
		
		- filters:Array
		
			In addition to the level setting, filters are used to provide a pseudo hierarchical 
			mapping for processing only those events for a given category.
		
		- includeCategory:Boolean
		
			Indicates if the category for this target should added to the trace.
		
		- includeDate:Boolean
		
			Indicates if the date should be added to the trace.
		
		- includeLevel:Boolean
		
			Indicates if the level for the event should added to the trace.
		
		- includeLines:Boolean
		
			Indicates if a line number should be added to the trace.
		
		- includeTime:Boolean
		
			Indicates if the time should be added to the trace.
		
		- level:Number
		
			Provides access to the level this target is currently set at.

	METHOD SUMMARY
	
		- addLogger(logger:ILogger):Void
		
			Sets up this target with the specified logger.
			
			NOTE this method is called by the framework and should not be called by the developer.
		
		- addNamespace(namespace:String):Boolean
		
		- formatLogEvent(ev:LogEvent):String
		
		- handleEvent(event:Event) : Void
		
			This method handles a LogEvent from an associated logger.
		
		- logEvent(e:LogEvent)
		
			Override this method.
		
		- removeLogger(logger:ILogger):Void
		
			Stops this target from receiving events from the specified logger.
			
			NOTE this method is called by the framework and should not be called by the developer.
		
		- removeNamespace(namespace:String):Boolean
		
		- toString():String
	
	INHERIT
	
		CoreObject → EventListener → ITarget → AbstractTarget → LineFormattedTarget
	
	IMPLEMENTS
	
		EventListener, IFormattable, IHashable
	
	EXAMPLE
	
		// create writer
		
		sos = new vegas.logging.targets.SOSTarget(0xCDD6F5) ;
		
		// setup writer 
		sos.filters = ["vegas.logging.*"] ;
		sos.includeDate = true ;
		sos.includeTime = true ;
		sos.includeLevel = true ;
		sos.includeCategory = true ;
		sos.includeLines = true ;
		sos.level = vegas.logging.LogEventLevel.ALL ; 
		
		// start writing log data 
		
		vegas.logging.Log.addTarget( sos ) ; 
		
		// get a logger for the 'vegas.logging.*' category 
		// and send some data to it.
		var logger = vegas.logging.Log.getLogger("vegas.logging.targets") ;
		
		logger.debug("here is some myDebug info : {0} and {1}", 2.25 , true) ; 
		logger.info("here a little info") ; 
		logger.fatal("here a little fatal") ; 
		logger.warn("here a little warning") ; 
		logger.error("here a little error") ; 
	
**/ 

// TODO voir pour la déconnexion 
// TODO voir les Units Test.

if (vegas.logging.targets.SOSTarget == undefined) {

	// ----o Import
	
	require("vegas.data.queue.LinearQueue") ;
	require("vegas.events.Delegate") ;
	require("vegas.logging.SOSType") ;
	require("vegas.logging.targets.TraceTarget") ;
	
	// ----o Constructor

	vegas.logging.targets.SOSTarget = function ( color /*Number*/ ) { 
		
		// --- Init Buffer queue object
		
		this._queue = new vegas.data.queue.LinearQueue() ;
		
		// --- Init Application Color
		
		this.setAppColor( isNaN(color) ? vegas.logging.SOSType.DEFAULT_COLOR : color ) ;
		
		// --- Init XMLSocket object
		
		this._xs = new XMLSocket() ;
		this._xs.onConnect = vegas.events.Delegate.create(this, this._connect) ;
		
		// ----o Init Colors
		
		this.setLevelColor( vegas.logging.LogEventLevel.ALL ) ;
		this.setLevelColor( vegas.logging.LogEventLevel.DEBUG ) ;
		this.setLevelColor( vegas.logging.LogEventLevel.ERROR ) ;
		this.setLevelColor( vegas.logging.LogEventLevel.FATAL ) ;
		this.setLevelColor( vegas.logging.LogEventLevel.INFO ) ;
		this.setLevelColor( vegas.logging.LogEventLevel.WARN ) ;
		
		this.levelPolicy = vegas.logging.SOSType.ENABLE ;
		
		// ----o Connect Console
		
		this.connect() ;
		
	}

	// ----o Inherit

	vegas.logging.targets.SOSTarget.extend(vegas.logging.targets.TraceTarget) ;
	
	// ----o Public Properties
	
	vegas.logging.targets.SOSTarget.prototype.isConnected /*Boolean*/ = null ;
	vegas.logging.targets.SOSTarget.prototype.levelPolicy /*Number*/ = null ;
	
	// ----o Public Methods

	vegas.logging.targets.SOSTarget.prototype.clear = function ()/*Void*/ {
		this.sendMessage( vegas.logging.SOSType.CLEAR ) ;
	}

	vegas.logging.targets.SOSTarget.prototype.close = function () /*Void*/ {
		this._isConnected = false ;
		this._xs.close() ;
	}

	vegas.logging.targets.SOSTarget.prototype.connect = function () {
		if (this._isConnected) this.close() ;
		this._xs.connect(vegas.logging.SOSType.HOST, vegas.logging.SOSType.PORT) ;
	}

	vegas.logging.targets.SOSTarget.prototype.exit = function ()/*Void*/ {
		this.sendMessage(vegas.logging.SOSType.EXIT) ;
	}

	vegas.logging.targets.SOSTarget.prototype.getIdentify = function ()/*Void*/ {
		this.sendMessage("!SOS<identify/>") ;
	}

	vegas.logging.targets.SOSTarget.prototype.getIsConnected = function () /*Boolean*/ {
		return this._isConnected ;
	}

	/*override*/ vegas.logging.targets.SOSTarget.prototype.logEvent = function (e/*LogEvent*/) {
		var msg /*String*/ = this.formatLogEvent(e) ;
		this.sendLevelMessage(e.level, msg) ;
	}

	vegas.logging.targets.SOSTarget.prototype.sendLevelMessage = function (level/*Number*/, message /*String*/)/*Void*/ {
		if (this.levelPolicy == vegas.logging.SOSType.ENABLE) {
			message = "!SOS<showMessage key='" + String(level) + "'>" + String(message) + "</showMessage>\n" ;
		}
		this.sendMessage(message) ;
	}

	vegas.logging.targets.SOSTarget.prototype.sendMessage = function (msg /*String*/)/*Void*/ {
		if (this._isConnected) {
			this._xs.send(msg) ;
		} else {
			this._queue.enqueue(msg) ;
		}
	}

	vegas.logging.targets.SOSTarget.prototype.setAppName = function (name /*String*/)/*Void*/ {
		this.sendMessage("!SOS<appName>" + name + "</appName>") ;
	}
	
	vegas.logging.targets.SOSTarget.prototype.setAppColor = function (color /*Number*/ )/*Void*/ {
		this.sendMessage("!SOS<appColor>" + color + "</appColor>") ;
	}
	
	vegas.logging.targets.SOSTarget.prototype.setLevelColor = function (level/*LogEventLevel*/, color/*Number*/) /*Void*/ {
		if (!vegas.logging.LogEventLevel.isValidLevel(level)) return ;
		var msg /*String*/ = "!SOS<setKey>" ;
		msg += "<name>" + level.toString() + "</name>" ;
		msg += "<color>"+ (color || vegas.logging.SOSType[level.toString()+"_COLOR"]) + "</color>" ;
		msg += "</setKey>\n" ;
		this.sendMessage(msg) ;
	}
	
	// ----o Private Properties
	
	vegas.logging.targets.SOSTarget.prototype._queue /*LinearQueue*/ = null ;
	vegas.logging.targets.SOSTarget.prototype._xs /*XMLSocket*/ = null ;

	// ----o Private Methods
	
	vegas.logging.targets.SOSTarget.prototype._connect = function (success /*Boolean*/ ) /*Void*/ {
		if (success) {
			this._flush() ;
			this._isConnected = true ;
		} else {
			throw new Error("SOS Socket connection failed") ;
		}
	}
	
	vegas.logging.targets.SOSTarget.prototype._flush = function() {
		if (this._queue.size() > 0) {
			var it /*Iterator*/ = this._queue.iterator() ;
			while (it.hasNext()) {
				this._xs.send( it.next() ) ;
			}
		}
	}
	
	// ----o Encapsulate

	//trace ("***** running vegas.logging.targets.SOSTarget") ;
	
}