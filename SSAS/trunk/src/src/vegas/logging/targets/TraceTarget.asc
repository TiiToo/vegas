/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * Provides a logger target that uses the global trace() method to output log messages.
 * <code>
 *       Log = vegas.logging.Log ;
 *       LogEventLevel = vegas.logging.LogEventLevel ;
 *       
 *       TraceTarget = vegas.logging.targets.TraceTarget ;
 *       
 *       // setup writer 
 *       var traceTarget = new TraceTarget() ;
 *       traceTarget.filters = ["vegas.logging.*", "vegas.errors.*"] ;
 *       traceTarget.includeDate = true ;
 *       traceTarget.includeTime = true ;
 *       traceTarget.includeLevel = true ;
 *       traceTarget.includeCategory = true ;
 *       traceTarget.includeLines = true ;
 *       traceTarget.level = LogEventLevel.ALL ; 
 *       
 *       // start writing log data 
 *       Log.addTarget( traceTarget ) ; 
 *       
 *       // get a logger for the 'myDebug' category 
 *       // and send some data to it.
 *       
 *       var logger = Log.getLogger("vegas.logging.targets") ;
 *       logger.log(LogEventLevel.DEBUG, "here is some myDebug info : {0} and {1}", 2.25 , true) ; 
 *       
 *       traceTarget.includeDate = false ;
 *       traceTarget.includeTime = false ;
 *       traceTarget.includeCategory = false ;
 *       logger.log(LogEventLevel.DEBUG, [2, 3, 4]) ; 
 * </code>
 * @author eKameleon
 * @version 1.0.0.0
 */
if (vegas.logging.targets.TraceTarget == undefined) {

	/**
	 * Import
	 */
	require("vegas.logging.targets.LineFormattedTarget") ;
	require("vegas.logging.LogEvent") ;

	/**
	 * Creates a new TraceTarget instance.
	 */
	vegas.logging.targets.TraceTarget = function () 
	{ 
		//
	}

	/** 
	 * Inherit
	 */
	vegas.logging.targets.TraceTarget.extend(vegas.logging.targets.LineFormattedTarget) ;
	
	/**
	 * Returns the string representation with format of the log event.
	 */
	vegas.logging.targets.TraceTarget.prototype.formatLogEvent = function (e/*LogEvent*/) /*String*/ 
	{
		if (e instanceof vegas.logging.LogEvent) 
		{
			var category = e.getTarget().category ;
			var date = new Date(e.getTimeStamp()) ;
			var level =  e.level.toString() ;
			var message = e.message ;
			return this._formatMessage(message, level, category, date) ;
		}
		else 
		{
			return "" ;
		}
	}

	/**
	 * This method handles a LogEvent from an associated logger.
	 */
	/*override*/ vegas.logging.targets.TraceTarget.prototype.logEvent = function (e /*LogEvent*/ ) /*Void*/ 
	{
		var msg /*String*/ = this.formatLogEvent(e) ;
		trace (msg) ;
	}

	/**
	 * The current line number.
	 */
	vegas.logging.targets.TraceTarget.prototype.__lineNumber /*Number*/ = 1 ;

	/**
	 * This method format the passed Date in arguments.
	 */
	vegas.logging.targets.TraceTarget.prototype._formatDate = function ( d /*Date*/) /*String*/ 
	{
		var sDate /*String*/ = "" ;
		sDate += this._getDigit( d.getDate() ) ;
		sDate += "/" + this._getDigit( d.getMonth() + 1) ;
		sDate += "/" + d.getFullYear() ;
		return sDate ;
	}

	/**
	 * This method format the passed level in arguments.
	 */
	vegas.logging.targets.TraceTarget.prototype._formatLevel = function (level/*String*/)/*String*/ 
	{
		return '[' + level + ']' ;
	}	

	/**
	 * This method format the current line value.
	 */
	vegas.logging.targets.TraceTarget.prototype._formatLines = function () /*String*/ 
	{
		return "[" + this.__lineNumber++ + "]" ; 
	}	
	
	/**
	 * This method format the log message.
	 */
	vegas.logging.targets.TraceTarget.prototype._formatMessage = function (message/*String*/, level/*String*/, category/*String*/, date/*Date*/)/*String*/ 
	{
		var msg /*String*/ = "" ;
		var d /*Date*/ = date || new Date() ;
		if (this.includeLines) msg += this._formatLines() + " " ; // lines
		if (this.includeDate) msg += this._formatDate(d) + " " ; // date
		if (this.includeTime) msg += this._formatTime(d) + " " ; // time
		if (this.includeLevel) msg += this._formatLevel(level || "" ) + " " ; // level
		if (this.includeCategory) msg += (category || "") + " " ; // category
		msg += message ;
		return msg ;
	}

	/**
	 * This method format the current Date passed in argument.
	 */
	vegas.logging.targets.TraceTarget.prototype._formatTime = function (d /*Date*/ ) /*String*/ 
	{
		var sTime /*String*/ = "" ;
		sTime += this._getDigit(d.getHours()) ;
		sTime += ":" + this._getDigit(d.getMinutes()) ;
		sTime += ":" + this._getDigit(d.getSeconds()) ;
		return sTime ;
	}

	/**
	 * Returns the string representation of a number and use digit conversion.
	 */
	vegas.logging.targets.TraceTarget.prototype._getDigit = function ( n/*Number*/) /*String*/ 
	{
		if (isNaN(n)) return "00" ;
		return ((n < 10) ? "0" : "") + n ;
	}
	
}