/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** TraceTarget

	AUTHOR

		Name : TraceTarget
		type : SSAS
		Package : vegas.logging.targets
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-31
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
	PROPERTY SUMMARY
		
		- filters:Array
		
			In addition to the level setting, filters are used to provide a pseudo hierarchical 
			mapping for processing only those events for a given category.
		
		- includeCategory:Boolean
		
			Indicates if the category for this target should added to the trace.
		
		- includeDate:Boolean
		
			Indicates if the date should be added to the trace.
		
		- includeLevel:Boolean
		
			Indicates if the level for the event should added to the trace.
		
		- includeLines:Boolean
		
			Indicates if a line number should be added to the trace.
		
		- includeTime:Boolean
		
			Indicates if the time should be added to the trace.
		
		- level:Number
		
			Provides access to the level this target is currently set at.

	METHOD SUMMARY
	
		- addLogger(logger:ILogger):Void
		
			Sets up this target with the specified logger.
			
			NOTE this method is called by the framework and should not be called by the developer.
		
		- addNamespace(namespace:String):Boolean
		
		- formatLogEvent(ev:LogEvent):String
		
		- handleEvent(event:Event) : Void
		
			This method handles a LogEvent from an associated logger.
		
		- logEvent(e:LogEvent):Void
		
			Override this method.
		
		- removeLogger(logger:ILogger):Void
		
			Stops this target from receiving events from the specified logger.
			
			NOTE this method is called by the framework and should not be called by the developer.
		
		- removeNamespace(namespace:String):Boolean
		
		- toString():String
	
	INHERIT
	
		CoreObject → EventListener → ITarget → AbstractTarget → LineFormattedTarget
	
	IMPLEMENTS
	
		EventListener, IFormattable, IHashable

	EXAMPLE
	
		Log = vegas.logging.Log ;
		LogEventLevel = vegas.logging.LogEventLevel ;
		
		TraceTarget = vegas.logging.targets.TraceTarget ;
		
		// setup writer 
		var traceTarget = new TraceTarget() ;
		traceTarget.filters = ["vegas.logging.*", "vegas.errors.*"] ;
		traceTarget.includeDate = true ;
		traceTarget.includeTime = true ;
		traceTarget.includeLevel = true ;
		traceTarget.includeCategory = true ;
		traceTarget.includeLines = true ;
		traceTarget.level = LogEventLevel.ALL ; 
		
		// start writing log data 
		Log.addTarget( traceTarget ) ; 
		
		// get a logger for the 'myDebug' category 
		// and send some data to it.
		
		var logger = Log.getLogger("vegas.logging.targets") ;
		logger.log(LogEventLevel.DEBUG, "here is some myDebug info : {0} and {1}", 2.25 , true) ; 
		
		traceTarget.includeDate = false ;
		traceTarget.includeTime = false ;
		traceTarget.includeCategory = false ;
		logger.log(LogEventLevel.DEBUG, [2, 3, 4]) ; 

**/ 

if (vegas.logging.targets.TraceTarget == undefined) {

	// ----o Import
	
	require("vegas.logging.targets.LineFormattedTarget") ;
	require("vegas.logging.LogEvent") ;

	// ----o Constructor

	vegas.logging.targets.TraceTarget = function () { 
		//
	}

	// ----o Inherit

	vegas.logging.targets.TraceTarget.extend(vegas.logging.targets.LineFormattedTarget) ;
	
	// ----o Public Methods

	vegas.logging.targets.TraceTarget.prototype.formatLogEvent = function (e/*LogEvent*/) /*String*/ {
		if (e instanceof vegas.logging.LogEvent) {
			var category = e.getTarget().category ;
			var date = new Date(e.getTimeStamp()) ;
			var level =  e.level.toString() ;
			var message = e.message ;
			return this._formatMessage(message, level, category, date) ;
		} else {
			return "" ;
		}
	}
	
	/*override*/ vegas.logging.targets.TraceTarget.prototype.logEvent = function (e /*LogEvent*/ ) /*Void*/ {
		var msg /*String*/ = this.formatLogEvent(e) ;
		trace (msg) ;
	}

	// ----o Private Properties
	
	vegas.logging.targets.TraceTarget.__lineNumber /*Number*/ = 1 ;

	// ----o Private Methods
	
	vegas.logging.targets.TraceTarget.prototype._formatDate = function ( d /*Date*/) /*String*/ {
		var sDate /*String*/ = "" ;
		sDate += this._getDigit( d.getDate() ) ;
		sDate += "/" + this._getDigit( d.getMonth() + 1) ;
		sDate += "/" + d.getFullYear() ;
		return sDate ;
	}
	
	vegas.logging.targets.TraceTarget.prototype._formatLevel = function (level/*String*/)/*String*/ {
		return '[' + level + ']' ;
	}	
	
	vegas.logging.targets.TraceTarget.prototype._formatLines = function () /*String*/ {
		return "[" + vegas.logging.targets.TraceTarget.__lineNumber++ + "]" ; 
	}	
	
	vegas.logging.targets.TraceTarget.prototype._formatMessage = function (message/*String*/, level/*String*/, category/*String*/, date/*Date*/)/*String*/ {
		var msg /*String*/ = "" ;
		var d /*Date*/ = date || new Date() ;
		if (this.includeLines) msg += this._formatLines() + " " ; // lines
		if (this.includeDate) msg += this._formatDate(d) + " " ; // date
		if (this.includeTime) msg += this._formatTime(d) + " " ; // time
		if (this.includeLevel) msg += this._formatLevel(level || "" ) + " " ; // level
		if (this.includeCategory) msg += (category || "") + " " ; // category
		msg += message ;
		return msg ;
	}
	
	vegas.logging.targets.TraceTarget.prototype._formatTime = function (d /*Date*/ ) /*String*/ {
		var sTime /*String*/ = "" ;
		sTime += this._getDigit(d.getHours()) ;
		sTime += ":" + this._getDigit(d.getMinutes()) ;
		sTime += ":" + this._getDigit(d.getSeconds()) ;
		return sTime ;
	}
	
	vegas.logging.targets.TraceTarget.prototype._getDigit = function ( n/*Number*/) /*String*/ {
		if (isNaN(n)) return "00" ;
		return ((n < 10) ? "0" : "") + n ;
	}

	// ----o Encapsulate
	
	//trace ("***** running vegas.logging.targets.TraceTarget") ;
	
}