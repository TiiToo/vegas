/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** AbstractTarget

	AUTHOR

		Name : AbstractTarget
		type : SSAS
		Package : vegas.logging
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-05-31
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net
	
**/ 

if (vegas.logging.AbstractTarget == undefined) {

	// ----o Import
	
	require("vegas.logging.ITarget") ;
	
	// ----o Constructor

	vegas.logging.AbstractTarget = function () { 
		//
	}

	// ----o Inherit

	vegas.logging.AbstractTarget.extend( vegas.logging.ITarget ) ;
	
	// ----o Public Properties
	
	vegas.logging.AbstractTarget.prototype.filters /*Array*/ = null ;
	vegas.logging.AbstractTarget.prototype.level /*Number*/ = null ;
	
	// ----o Public Methods
	
	vegas.logging.AbstractTarget.prototype.addLogger = function ( logger /*ILogger*/ ) /*Void*/ {
		
		logger.addEventListener( vegas.logging.LogEvent.LOG , this) ;
		
	}

	vegas.logging.AbstractTarget.prototype.addNamespace = function ( namespace/*String*/) /*Boolean*/ {
		if (this.filters == undefined) this.filters = [] ;
		if (this.filters.contains(namespace)) return false ;
		this.filters.push(namespace) ;
	}

	vegas.logging.AbstractTarget.prototype.logEvent = function (e /*LogEvent*/ )/*Void*/ {
		//
	}

	vegas.logging.AbstractTarget.prototype.handleEvent = function ( e /*Event*/ ) {
		
		//trace(this + ".handleEvent() : " + e.message + " : " + e.level) ;
		
		var LogEvent = vegas.logging.LogEvent ;
		var LogEventLevel = vegas.logging.LogEventLevel ;
		
		if ( this.level == LogEventLevel.ALL || this.level == e.level ) {
			
			var category /*String*/ = e.getTarget()["category"] ;
			
			var isValid /*Boolean*/ = this._isValidCategory( category ) ;
			
			if (isValid) {
				
				this.logEvent( e ) ;
				
			}
		}
	}

	vegas.logging.AbstractTarget.prototype.removeLogger = function ( logger /*ILogger*/ ) /*Void*/ {
		logger.removeEventListener(vegas.logging.LogEvent.LOG, this) ;
	}
	
	vegas.logging.AbstractTarget.prototype.removeNamespace = function (namespace/*String*/)/*Boolean*/ {
		var pos/*Number*/ = this.filters.indexOf(namespace) ;
		if ( pos > -1) {
			this.filters.splice(pos, 1) ;
			return true ;
		} else {
			return false ;
		}
	}
	
	// ----o Private Methods
	
	vegas.logging.AbstractTarget.prototype._isValidCategory = function (category /*String*/ ) /*Boolean*/ {
		if (category == vegas.logging.Log.DEFAULT_CATEGORY) {
			return true ;
		}
		var l /*Number*/ = this.filters.length ;
		var WildExp = vegas.string.WildExp ;
		if (l > 0) {
			for (var i/*Number*/ = 0 ; i<l ; i++) {
				var pattern/*String*/ = this.filters[i] ;
				var we /*WildExp*/ = new WildExp( pattern, WildExp.IGNORECASE | WildExp.MULTIWORD );
				var result = we.test( category ) ;
				if (result == true || pattern == category) return true ;
			}
			return false ;
		} else {
			return true ;
		}
	}
	
	// ----o Encapsulate

	//trace ("***** running vegas.logging.AbstractTarget") ;
	
}