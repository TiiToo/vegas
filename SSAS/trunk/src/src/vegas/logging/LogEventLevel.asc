/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** LogEventLevel
 
	AUTHOR
	
		Name : LogEventLevel
		type : SSAS
		Package : vegas.logging
		Version : 1.0.0.0
		Date :  2006-05-30
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net

	CONSTANT SUMMARY
	
		- ALL
		
			intended to force a target to process all messages.
		
		- DEBUG
		
			designates informational level messages that are fine grained and most helpful when debugging an application.
		
		- ERROR
		
			designates error events that might still allow the application to continue running.
		
		- FATAL
		
			designates events that are very harmful and will eventually lead to application failure
		
		- INFO
		
			designates informational messages that highlight the progress of the application at coarse-grained level.
		
		- WARN
			
			designates events that could be harmful to the application operation	

	METHOD SUMMARY

		- hashCode():Number

		- static isValidLevel(level:Number):Boolean

		- toSource():String

		- toString():String
		
		- valueOf()

	INHERIT
	
		Int â†’ LogEventLevel
	
	IMPLEMENTS
	
		IFormattable, IHashable, ISerializable

 **/
 
if (vegas.logging.LogEventLevel == undefined) {
	
	// ----o Constructor
 
	vegas.logging.LogEventLevel = function( name /*String*/ , value /*Number*/ ) {
		
		this._n = value ;
		this._name = name ;
		
	}
	
	// ----o Inherit
	
	vegas.logging.LogEventLevel.extend( vegas.core.CoreObject ) ;

	// ----o Public Methods

	/*static*/ vegas.logging.LogEventLevel.isValidLevel = function ( nLevel /*Number*/ ) /*Boolean*/ {
		
		if (nLevel instanceof Number || typeof nLevel == "number") {
			
			var levels /*Array*/ = [
				vegas.logging.LogEventLevel.ALL, 
				vegas.logging.LogEventLevel.DEBUG, 
				vegas.logging.LogEventLevel.ERROR, 
				vegas.logging.LogEventLevel.FATAL, 
				vegas.logging.LogEventLevel.INFO, 
				vegas.logging.LogEventLevel.WARN
			] ;
			var l /*Number*/ = levels.length ;
			while (--l > -1) {
				if (nLevel == levels[l].valueOf()) return true ;
			}
			return false ;
		}
		
	}

	vegas.logging.LogEventLevel.prototype.toSource = function() {
		var source = "new " + this.getConstructorPath() + "(" ;
		source += '"' + (this._name ? this._name : "undefined")  + '"' ;
		source += "," ;
		source +=  this._n ;
		source += ")" ;
		return source ;
	}

	vegas.logging.LogEventLevel.prototype.toString = function () {
		return this._name ;
	}

	vegas.logging.LogEventLevel.prototype.valueOf = function () {
		return this._n ;
	}
	
	// ----o Constants
	
	vegas.logging.LogEventLevel.ALL = new vegas.logging.LogEventLevel("ALL", 1000) ;
	
	vegas.logging.LogEventLevel.DEBUG = new vegas.logging.LogEventLevel("DEBUG", 8) ;
	
	vegas.logging.LogEventLevel.ERROR = new vegas.logging.LogEventLevel("ERROR", 2) ;
	
	vegas.logging.LogEventLevel.FATAL = new vegas.logging.LogEventLevel("FATAL", 6) ;
	
	vegas.logging.LogEventLevel.INFO = new vegas.logging.LogEventLevel("INFO", 0) ;
	
	vegas.logging.LogEventLevel.WARN = new vegas.logging.LogEventLevel("WARN", 4) ;

	// ----o Encapsulate
 
	// trace ("***** running vegas.logging.LogEventLevel") ;

}
