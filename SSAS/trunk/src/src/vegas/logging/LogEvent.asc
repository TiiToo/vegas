/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** LogEvent
 
	AUTHOR
	
		Name : LogEvent
		type : SSAS
		Package : vegas.logging
		Version : 1.0.0.0
		Date :  2006-05-30
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
 
	PROPERTY SUMMARY

		- bubbles:Boolean [R/W]
		
		- context [R/W]
		
		- currentTarget [R/W]
		
		- eventPhase:Number [R/W]
		
		- level:Number
		
		- message:String
		
		- target [R/W]
		
		- text:String
		
		- type:String [R/W]

	METHOD SUMMARY

		- cancel():Void
		
		- clone():BasicEvent
		
		- getBubbles():Boolean
		
		- getContext()
		
		- getCurrentTarget()
		
		- getEventPhase():Number
		
		- static getLevelString(value:Number):String 
		
			Returns a string value representing the level specified.
		
		- getTarget()
		
		- getTimeStamp():Number
		
		- getType():String
		
		- initEvent(type:String, bubbles:Boolean, cancelable:Boolean)
		
		- isCancelled():Boolean
		
		- isQueued():Boolean
		
		- queueEvent():Void
		
		- setBubbles(b:Boolean):Void
		
		- setContext(context):Void
		
		- setCurrentTarget(target):Void
		
		- setEventPhase(n:Number):Void
		
		- setTarget(target):Void
		
		- setType(type:String):Void
		
		- stopImmediatePropagation():Void
		
		- toString():String
	
	INHERIT
	
		CoreObject → Event → BasicEvent → DynamicEvent → LogEvent
 
	IMPLEMENTS
	
		Event, ICloneable, IFormattable, IHashable
 
 **/
 
if (vegas.logging.LogEvent == undefined) {
	
	// ----o Imports
	
	require("vegas.events.DynamicEvent") ;
	require("vegas.logging.LogEventLevel") ;
	
	// ----o Constructor
 
	vegas.logging.LogEvent = function(msg/*String*/, level /*LogEventLevel*/ ) {
		
		vegas.events.DynamicEvent.call(this, vegas.logging.LogEvent.LOG) ;
		
		if (level instanceof vegas.logging.LogEventLevel) {
			
			this.level = level ;
			
		} else {
			
			this.level = vegas.logging.LogEventLevel.ALL ;
			
		}
		
		this.message = msg || "" ;
		
	}
	
	// ----o Inherit
 
	vegas.logging.LogEvent.extend( vegas.events.DynamicEvent ) ;

	// ----o Constants
	
	vegas.logging.LogEvent.LOG /*String*/ = "log" ;

	// ----o Public Properties
	
	vegas.logging.LogEvent.prototype.level /*String*/ = null ;
	vegas.logging.LogEvent.prototype.message /*String*/ = null ;
 
	// ----o Public Methods
	
	vegas.logging.LogEvent.prototype.clone = function () {
		return new vegas.logging.LogEvent(this.message, this.level) ;
	}
	
	vegas.logging.LogEvent.getLevelString = function (value /*Number*/) /*String*/ {
		
		var LogEventLevel = vegas.logging.LogEventLevel ;
		
		switch (value) {
			
			case LogEventLevel.ALL : 
				return (vegas.logging.LogEventLevel.ALL).toString() ;
			
			case LogEventLevel.DEBUG :
				return vegas.logging.LogEventLevel.DEBUG.toString() ;
			
			case LogEventLevel.ERROR :
				return vegas.logging.LogEventLevel.ERROR.toString() ;
		
			case LogEventLevel.FATAL :
				return vegas.logging.LogEventLevel.FATAL.toString() ;
		
			case LogEventLevel.INFO :
				return vegas.logging.LogEventLevel.INFO.toString() ;
			
			case LogEventLevel.WARN :
				return vegas.logging.LogEventLevel.WARN.toString() ;
			
			default :
			
				return null ;
		}
		
		
	}
	
	// ----o Encapsulate
 
	// trace ("***** running vegas.logging.LogEvent") ;

}
