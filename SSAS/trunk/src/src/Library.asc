/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/* ----- Class Library

	AUTHOR

		Name : Library
		type : SSAS
		Package : 
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-01-11
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
	
	CONSTRUCTOR
	
		new Library(path:String, files:Array, debug:Boolean) ;
	
	PROPERTY SUMMARY
	
		- debug:Boolean
		
		- files:Array
		
		- path:String

	METHOD SUMMARY
	
		- loadFile( file:String ):Void
		
		- static LOADFILE(path:String, file:String, debug:Boolean):Void
		
		- run():Void
		
		- size():Number
		
		- toString():String
		
---------- */ 

// ----o Init _global.loadFile function

_global.loadFile = function (file) /*Boolean*/ {
	if(_global.__PATH__ == undefined) _global.__PATH__ = "" ;
	return load(_global.__PATH__ + file) ;
}

if ( _global.Library == undefined) {

	Library = function (path/*String*/, files/*Array*/, debug/*Boolean*/) {
		this.path = path || "" ;
		this.files = files || null ;
		this.debug = debug || false ;
		if (files == null) return ;
		else this.run() ;
	}
	
	var constructor = Library ;
	var proto = Library.prototype ;

	// ----o Static Methods
	
	Library.LOADFILE = function (path/*String*/, file/*String*/, debug/*Boolean*/) {
		path = path || "" ;
		file = file || "" ;
		file = path + file ;
		var isLoad = load(file) ;
		if (debug) trace ( ((isLoad) ? "+++" : "---") +  " load -> " + file ) ;
	}
	
	// ----o Public Methods
	
	proto.loadFile = function ( file/*String*/ ) {
		Library.LOADFILE( this.path, file, this.debug) ;
	}
	
	proto.run = function () {
		if (this.files != null && this.files.length > 0) {
			var len = this.files.length ;
			for (var i = 0 ; i<len ; i++) {
				Library.LOADFILE( this.path , this.files[i], this.debug) ;
			}
		}
	}
	
	proto.size = function () /*Number*/ {
		if (this.files instanceof Array) {
			return this.files.length ;
		} else {
			return 0 ;
		}
	}
	
	proto.toString = function () {
		return "[Library]" ;
	}
	
}