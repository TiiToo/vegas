/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * The event dispatched in the Application class.
 * @author eKameleon
 */
if (asgard.events.ApplicationEvent == undefined) 
{
	
	/**
	 * @require vegas.events.DynamicEvent
	 */
	require("vegas.events.DynamicEvent") ;
	
	/**
	 * Creates a new ApplicationEvent instance.
	 */
	asgard.events.ApplicationEvent = function(type/*String*/, target/*Object*/, context ) 
	{
		vegas.events.DynamicEvent.apply(this, Array.fromArguments(arguments)) ;
	}
	
	/**
	 * @extends vegas.events.DynamicEvent
	 */
	proto = asgard.events.ApplicationEvent.extend( vegas.events.DynamicEvent ) ;

	/**
	 * const The name of the event when the server accept the connection.
	 */ 
	asgard.events.ApplicationEvent.ACCEPT = "onConnectAccept" ;

	/**
	 * const The name of the event when the server notify a new client's connection.
	 */ 
	asgard.events.ApplicationEvent.CONNECT = "onConnect" ;

	/**
	 * The name of the event when the server notify a client's disconnection.
	 */ 
	asgard.events.ApplicationEvent.DISCONNECT = "onDisconnect" ;
	
	/**
	 * const The name of the event when the server is started.
	 */ 
	asgard.events.ApplicationEvent.START = "onAppStart" ;

	/**	
	 * const The name of the event when the server notify a client is rejected.
	 */ 
	asgard.events.ApplicationEvent.REJECT = "onConnectReject" ;

	/**
	 * const The name of the event when the server is stopped.
	 */ 
	asgard.events.ApplicationEvent.STOP = "onAppStop" ;
	
	/**
	 * Returns the shallow copy of this object.
	 * @return the shallow copy of this object.
	 */
	proto.clone = function () 
	{
		var e = new asgard.events.ApplicationEvent
		(
			this.getType() , this.getTarget(), this.getContext() 
		) ;
		e.client = this.client || null ;
		return e ;
	}
	
	/**
	 * Returns the client reference of this event.
	 * @return the client reference of this event.
	 */
	proto.getClient = function () /*Client*/
	{
		return this._client ;
	}

	/**
	 * Returns the application info object.
	 * @return the application info object.
	 */
	proto.getInfo = function () /*Object*/
	{
		return this._info ;
	}

	/**
	 * Sets the client reference of this event.
	 */
	proto.setClient = function ( client /*Client*/ )
	{
		this._client = client ;
	}
	
	/**
	 * Sets an application info object.
	 */
	proto.setInfo = function ( info )
	{
		this._info = info ;
	}
	
	/**
	 * (read-write) The info reference of this event.
	 */
	vegas.util.factory.PropertyFactory.create( proto, "client" ) ;

	/**
	 * (read-write) The client reference of this event.
	 */
	vegas.util.factory.PropertyFactory.create( proto, "info" ) ;
	
	/**
	 * The client reference of this event.
	 * @private
	 */
	proto._client = null ;
	
	/**
	 * The info reference of this event.
	 * @private
	 */
	proto._info = null ;

	delete proto ;
	
}
