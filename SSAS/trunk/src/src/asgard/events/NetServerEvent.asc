/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * The NetServer Event use in the NetServerConnection instances.
 * @author eKameleon
 */
if (asgard.events.NetServerEvent == undefined) 
{
	
	/**
	 * @requires vegas.events.DynamicEvent
	 */
	require("vegas.events.DynamicEvent") ;

	/**
	 * @requires asgard.net.NetServerInfo
	 */	
	require("asgard.net.NetServerInfo") ;
	
	/**
	 * Creates a new NetServerEvent instance.
	 */
	asgard.events.NetServerEvent = function
	(
		type /*String*/, connection /*NetServerConnection*/, status /*NetServerStatus*/, info /*Object*/, context /*Object*/ ,
		bubbles/*Boolean*/, eventPhase /*Number*/, time /*Number*/, stop /*Number*/
	) 
	{
		
		vegas.events.DynamicEvent.call(this, type, connection, context, bubbles, eventPhase, time, stop) ;
		this.setInfo(info) ;
		this.setStatus(status) ;
		
	}

	asgard.events.NetServerEvent.ACCEPTED /*String*/ = "onAccepted" ;
		
	asgard.events.NetServerEvent.CLOSE /*String*/ = "onClosed" ;
		
	asgard.events.NetServerEvent.FINISH /*String*/ = "onFinished" ;
			
	asgard.events.NetServerEvent.START /*String*/ = "onStarted" ;
	
	asgard.events.NetServerEvent.NET_STATUS /*String*/ = "onStatus" ;
	
	asgard.events.NetServerEvent.TIMEOUT /*String*/ = "onTimeOut" ;

	/**
	 * @extends vegas.events.DynamicEvent
	 */
	proto = asgard.events.NetServerEvent.extend( vegas.events.DynamicEvent ) ;
 
	/**
	 * The Client reference of this event.
	 */
	proto.client = null ;
	
	/**
	 * Returns a shallow copy of this instance.
	 * @return a shallow copy of this instance.
	 */
	proto.clone = function () 
	{
		var e = new asgard.events.NetServerEvent( this.getType() , this.getTarget(), this.getStatus(), this.getInfo(), this.getContext() ) ;
		e.client = this.client ;
		return e ;
	}
	
	/**
	 * Returns the NetServerInfo reference of this event.
	 * @return the NetServerInfo reference of this event.
	 */
	proto.getInfo = function () /*NetServerInfo */
	{
		return this._info ;	
	}
	
	/**
	 * Returns the NetServerStatus reference of this event.
	 * @return the NetServerStatus reference of this event.
	 */
	proto.getStatus = function () /*NetServerStatus*/ 
	{
		return this._status ;	
	}

	/**
	 * Sets the NetServerInfo reference of this event.
	 * @param oInfo the info {@code Object} used to define the NetServerInfo reference.
	 */
	proto.setInfo = function ( oInfo /*Object*/ ) /*void*/ 
	{
		if (oInfo instanceof asgard.net.NetServerInfo) 
		{
			this._info = oInfo ;
		} 
		else if (typeof(oInfo) == "object") 
		{
			this._info = new asgard.net.NetServerInfo(oInfo) ;	
		} 	
		else
		{
			this._info = null ;
		}
	}
	
	/**
	 * Sets the NetServerStatus reference of this event.
	 * @param status the NetServerStatus of this event.
	 */
	proto.setStatus = function ( status /*NetServerStatus*/ ) /*void*/ 
	{
		this._status = asgard.net.NetServerStatus.validate(status) ? status : null ;
	}

	/**
	 * @private
	 */	
	proto._status /*NetServerStatus*/ = null ;
	
	/**
	 * @private
	 */		
	proto._info /*NetServerInfo*/ = null  ;

	delete proto ;
	
}
