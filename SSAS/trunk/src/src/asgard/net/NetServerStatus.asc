/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * Defines the NetServer status.
 * @author eKameleon
 * @version 1.0.0.0
 */	
if (asgard.net.NetServerStatus == undefined) 
{
	
	/**
	 * Creates the NetServerStatus singleton.
	 */
	asgard.net.NetServerStatus = {} ; 

	/**
	 * Packet encoded in an unidentified format.
	 */
	asgard.net.NetServerStatus.BAD_VERSION /*String*/ = "badversion" ;

	/**
	 * The connection was closed successfully.
	 */
	asgard.net.NetServerStatus.CLOSED /*String*/ = "closed" ;

	/**
	 * The connection attempt failed or the NetConnection.call method was not able to invoke the server-side method or command.
	 */
	asgard.net.NetServerStatus.FAILED /*String*/ = "failed" ;

	/**
	 * The application name specified during connect is invalid.
	 */
	asgard.net.NetServerStatus.INVALID /*String*/ = "invalidapp" ;

	/**
	 * The connection attempt did not have permission to access the application.
	 */
	asgard.net.NetServerStatus.REJECTED /*String*/ = "rejected" ;

	/**
	 *  The specified application is shutting down.
	 */
	asgard.net.NetServerStatus.SHUTDOWN /*String*/ = "appshutdown" ;

	/**
	 * The connection attempt succeeded.
	 */
	asgard.net.NetServerStatus.SUCCESS /*String*/ = "success" ;

	/**
	 * Convert onStatus code value in NetConnection.onStatus in a ConnectionStatus valid string.
	 */
	asgard.net.NetServerStatus.format = function (code /*String*/) /*String*/
	{
		code = code.split(".").pop().toLowerCase() ;
		var NetServerStatus /*Function*/ = asgard.net.NetServerStatus ;
		var status /*Array*/ = 
		[
			NetServerStatus.BAD_VERSION,
			NetServerStatus.CLOSED,
			NetServerStatus.FAILED,
			NetServerStatus.INVALID,
			NetServerStatus.REJECTED,
			NetServerStatus.SHUTDOWN,
			NetServerStatus.SUCCESS
		] ;
		var l /*Number*/ = status.length ;
		while(--l > -1) 
		{
			if (status[l].toString() == code) 
			{
				return status[l] ;
			}	
		}
	}

	/**
	 * Validate if the specified object is a valid status value.
	 * @return {@code true} if the specified object is a valid status value.
	 */
	asgard.net.NetServerStatus.validate = function ( o /*Object*/ )
	{
		var NetServerStatus /*Function*/ = asgard.net.NetServerStatus ;
		var status /*Array*/ = 
		[
			NetServerStatus.BAD_VERSION,
			NetServerStatus.CLOSED,
			NetServerStatus.FAILED,
			NetServerStatus.INVALID,
			NetServerStatus.REJECTED,
			NetServerStatus.SHUTDOWN,
			NetServerStatus.SUCCESS
		] ;
		return status.contains(o) ;	
	}

}
