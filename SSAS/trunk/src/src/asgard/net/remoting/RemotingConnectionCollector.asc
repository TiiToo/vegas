/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/
 
/**
 * This collector use a Map to register all RemotingConnection in the application.
 * @author eKameleon
 * @version 1.0.0.0
 */
if (asgard.net.remoting.RemotingConnectionCollector == undefined) 
{
	
	/**
	 * Creates the RemotingConnectionCollector singleton.
	 */
	asgard.net.remoting.RemotingConnectionCollector = {} ;

	/**
	 * Removes all RemotingConnection reference in the collector.
	 */
	asgard.net.remoting.RemotingConnectionCollector.clear = function () /*void*/
	{
		asgard.net.remoting.RemotingConnectionCollector._map.clear() ;
	}
	
	/**
	 * Returns {@code true} if the collector contains the RemotingConnection register with the name passed in argument.
	 * @return {@code true} if the collector contains the RemotingConnection register with the name passed in argument.
	 */
	asgard.net.remoting.RemotingConnectionCollector.contains = function ( sName /*String*/ ) /*Boolean*/
	{
		return asgard.net.remoting.RemotingConnectionCollector._map.containsKey(sName) ;
	}

	/**
	 * Returns the RemotingConnection reference with the name passed in argument.
	 * @return the RemotingConnection reference with the name passed in argument.
	 */
	asgard.net.remoting.RemotingConnectionCollector.get = function ( sName /*String*/ ) /*RemotingConnection*/
	{
		
		var RemotingConnectionCollector = asgard.net.remoting.RemotingConnectionCollector ;
		
		try 
		{
			if (! RemotingConnectionCollector.contains(sName) ) 
			{
				throw new vegas.errors.Warning("[RemotingConnectionCollector].get(\"" + sName + "\"), Can't find RemotingConnection instance." ) ;
			} ;
		}
		catch (e /*Warning*/) 
		{
			trace(e.toString()) ;
		}
			
		return RemotingConnectionCollector._map.get( sName ) ;	
	}
	
	/**
	 * Insert a RemotingConnection in the collector and indexed it with the string name in the first parameter.
	 * @param sName the name of the RemotingConnection object to register it.
	 * @param rc the RemotingConnection reference. 
	 */
	asgard.net.remoting.RemotingConnectionCollector.insert = function ( sName /*String*/ , rc /*RemotingConnection*/ ) /*Boolean*/
	{
		
		var RemotingConnectionCollector = asgard.net.remoting.RemotingConnectionCollector ;
		
		try 
		{
			if ( RemotingConnectionCollector.contains(sName) ) 
			{
				throw new vegas.errors.Warning("[RemotingConnectionCollector].insert(), a RemotingConnection instance is already registered with '" + sName + "' name." ) ;
			} ;
		}
		catch (e /*Warning*/ ) 
		{
			trace( e.toString() )  ;
		}
		return (RemotingConnectionCollector._map).put(sName, rc)   ;	
	}

	/**
	 * Returns {@code true} if the collector is empty.
	 * @return {@code true} if the collector is empty.
	 */
	asgard.net.remoting.RemotingConnectionCollector.isEmpty = function () /*Boolean*/
	{
		return asgard.net.remoting.RemotingConnectionCollector._map.isEmpty() ;
	}
	
	/**
	 * Removes the RemotingConnection in the collector specified by the argument {@code sName}.
	 */
	asgard.net.remoting.RemotingConnectionCollector.remove = function ( sName /*String*/ ) /*void*/
	{
		asgard.net.remoting.RemotingConnectionCollector._map.remove(sName) ;
	}

	/**
	 * Returns the number of elements in the collector.
	 * @return the number of elements in the collector.
	 */
	asgard.net.remoting.RemotingConnectionCollector.size = function () /*Number*/
	{
		return asgard.net.remoting.RemotingConnectionCollector._map.size() ;
	}

	/**
	 * The internal HashMap.
	 * @private
	 */
	/*private*/ asgard.net.remoting.RemotingConnectionCollector._map /*HashMap*/ = new vegas.data.map.HashMap() ;
	
}
