/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/
 
/**
 * @author eKameleon
 */
if (asgard.net.remoting.RemotingConnectionCollector == undefined) 
{
	
	/**
	 * Singleton
	 */
	asgard.net.remoting.RemotingConnectionCollector = {} ;

	/**
	 * Clear the collector.
	 */
	asgard.net.remoting.RemotingConnectionCollector.clear = function () /*void*/
	{
		asgard.net.remoting.RemotingConnectionCollector._map.clear() ;
	}
	
	/**
	 * Returns 'true' if the collector contains a value with the current name passed in argument.
	 */
	asgard.net.remoting.RemotingConnectionCollector.contains = function ( sName /*String*/ ) /*Boolean*/
	{
		return asgard.net.remoting.RemotingConnectionCollector._map.containsKey(sName) ;
	}

	/**
	 * Returns the RemotingConnection identificate with the current name passed in argument.
	 */
	asgard.net.remoting.RemotingConnectionCollector.get = function ( sName /*String*/ ) /*RemotingConnection*/
	{
		
		var RemotingConnectionCollector = asgard.net.remoting.RemotingConnectionCollector ;
		
		try 
		{
			if (! RemotingConnectionCollector.contains(sName) ) 
			{
				throw new vegas.errors.Warning("[RemotingConnectionCollector].get(\"" + sName + "\"), Can't find RemotingConnection instance." ) ;
			} ;
		}
		catch (e /*Warning*/) 
		{
			trace(e.toString()) ;
		}
			
		return RemotingConnectionCollector._map.get( sName ) ;	
	}
	
	/**
	 * Insert a new RemotingConnection in the collector.
	 */
	asgard.net.remoting.RemotingConnectionCollector.insert = function ( sName /*String*/ , rc /*RemotingConnection*/ ) /*Boolean*/
	{
		
		var RemotingConnectionCollector = asgard.net.remoting.RemotingConnectionCollector ;
		
		try 
		{
			if ( RemotingConnectionCollector.contains(sName) ) 
			{
				throw new vegas.errors.Warning("[RemotingConnectionCollector].insert(), a RemotingConnection instance is already registered with '" + sName + "' name." ) ;
			} ;
		}
		catch (e /*Warning*/ ) 
		{
			trace( e.toString() )  ;
		}
		return (RemotingConnectionCollector._map).put(sName, rc)   ;	
	}

	/**
	 * Returns 'true' if the collector is empty.
	 */
	asgard.net.remoting.RemotingConnectionCollector.isEmpty = function () /*Boolean*/
	{
		return asgard.net.remoting.RemotingConnectionCollector._map.isEmpty() ;
	}
	
	/**
	 * Remove a RemotingConnection in the collector.
	 */
	asgard.net.remoting.RemotingConnectionCollector.remove = function ( sName /*String*/ ) /*void*/
	{
		asgard.net.remoting.RemotingConnectionCollector._map.remove(sName) ;
	}

	/**
	 * Returns the number of RemotingConnection in the collector.
	 */
	asgard.net.remoting.RemotingConnectionCollector.size = function () /*Number*/
	{
		return asgard.net.remoting.RemotingConnectionCollector._map.size() ;
	}

	/**
	 * The internal HashMap.
	 * @private
	 */
	asgard.net.remoting.RemotingConnectionCollector._map /*HashMap*/ = new vegas.data.map.HashMap() ;
	
}
