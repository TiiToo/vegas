/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * @author eKameleon
 */
if (asgard.net.remoting.RemotingConnection == undefined) 
{
	
	/**
	 * Imports
	 */
	require("asgard.net.NetServerConnection") ;
	
	/**
	 * Creates a new RemotingConnection instance.
	 */
	asgard.net.remoting.RemotingConnection = function( sURL /*String*/ ) 
	{
		
		asgard.net.NetServerConnection.call(this) ; // super()
		
		if ( sURL ) 
		{
		
			this.connect ( sURL ) ;	
			
		}
		
	}

	/**
	 * const The name of the AMF server debug id.
	 */
	asgard.net.remoting.RemotingConnection.AMF_SERVER_DEBUG /*String*/ = "amf_server_debug" ;
	
	/**
	 * const The name of the AMF credentials id.
	 */
	asgard.net.remoting.RemotingConnection.CREDENTIALS /*String*/ = "Credentials" ;
	
	/**
	 * Inherit asgard.net.NetServerConnection.
	 */
	asgard.net.remoting.RemotingConnection.extend( asgard.net.NetServerConnection ) ;
 
 	p = asgard.net.remoting.RemotingConnection.prototype ;
	
	/**
	 * Returns a shallow copy of the object.
	 */
	p.clone = function ()
	{
		return new asgard.net.remoting.RemotingConnector( this.uri ) ;
	}

	/**
	 * Returns an singleton instance of the RemotingConnection class with a specific url id.
	 */
	asgard.net.remoting.RemotingConnection.getConnection = function ( sUrl /*String*/ ) /*RemotingConnection*/
	{
		var collector = asgard.net.remoting.RemotingConnectionCollector ; 
		
		if ( ! collector.contains(sUrl) ) 
		{
			collector.insert(sUrl, new asgard.net.remoting.RemotingConnection( sUrl ) ) ;
		}
		
		return collector.get(sUrl) ;
		
	}
	
	/**
	 * Set the credentials of the connection.
	 * @see RemotingAuthentification
	 */
	p.setCredentials = function ( authentification /*RemotingAuthentification*/ ) /*Void*/
	{
		var o /*Object*/ ;
		
		if ( authentification instanceof asgard.net.remoting.RemotingAuthentification)
		{
			o = authentification.toObject() ;
		}
		else
		{
			o = null ;	
		}
		
		this.addHeader( asgard.net.remoting.RemotingConnection.CREDENTIALS , false, o);
		
	}

	/**
	 * This method is used to start the server debug.
	 */
	p.startDebug = function() /*Void*/
	{
		
		var oDebug /*Object*/ = 
		{
			amf:false, 
			error:true,
			trace:true,
			coldfusion:false, 
			m_debug:true,
			httpheaders:false, 
			amfheaders:false, 
			recordset:true
		};
		
		this.addHeader( asgard.net.remoting.RemotingConnection.AMF_SERVER_DEBUG, true, oDebug) ;
		
	}
	
	/**
	 * This method is used to stop the server debug.
	 */
	p.stopDebug = function () /*Void*/ 
	{
		addHeader( asgard.net.remoting.RemotingConnection.AMF_SERVER_DEBUG, true, undefined) ;
	}

	/**
	 * Encapsulate
	 */
 	delete p ;
 
}
