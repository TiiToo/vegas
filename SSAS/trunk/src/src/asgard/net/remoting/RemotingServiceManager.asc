/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * This class bufferize all Remoting service and launch AMF query one by one.
 * <p>
 * <code>
 * var entry1 = new asgard.net.remoting.RemotingServiceEntry() ;
 * 
 * entry1.url = "http://localhost/works/vegas/php/gateway.php" ;
 * entry1.serviceName = "MyService" ;
 * entry1.methodName = "MyMethod1" ;
 * entry1.params = [ "value1" ] ;
 * 
 * var entry2 = new asgard.net.remoting.RemotingServiceEntry() ;
 * 
 * entry2.url = "http://localhost/works/vegas/php/gateway.php" ;
 * entry2.serviceName = "MyService" ;
 * entry2.methodName = "MyMethod2" ;
 * entry2.params = [ "value2" ] ;
 * 
 * var manager = new asgard.net.remoting.RemotingServiceManager() ;
 * manager.setModel( model ) ;
 * manager.enqueue( entry1 ) ;
 * manager.enqueue( entry2 ) ;
 * </code>
 * </p>
 * @author eKameleon
 * 
 */
if (asgard.net.remoting.RemotingServiceManager == undefined) 
{

	/**
	 * Creates a new RemotingServiceManager instance. 
	 */
	asgard.net.remoting.RemotingServiceManager = function () 
	{
		
		this.logger = vegas.logging.Log.getLogger("asgard.net.remoting.RemotingServiceManager") ;

		this._changeListener  = new vegas.events.Delegate(this, this._onChange ) ;
		this._clearListener   = new vegas.events.Delegate(this, this._onClear ) ;
		this._dequeueListener = new vegas.events.Delegate(this, this._onDequeue ) ;
		this._enqueueListener = new vegas.events.Delegate(this, this._onEnqueue ) ;
		
	}
	
	/**
	 * Inherit vegas.core.CoreObject.
	 */
	asgard.net.remoting.RemotingServiceManager.extend(vegas.core.CoreObject) ;

	/**
	 * Clear the buffer of the ChatService.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.clear = function()
	{
		this._model.clear() ;
	}

	/**
	 * Enqueue the buffer of the ChatService and run the services if the ChatService isn't bufferize.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.enqueue = function( entry /*ServiceEntry*/ )
	{
		if (entry != null && entry instanceof asgard.net.remoting.RemotingServiceEntry)
		{
			this._model.enqueue(entry) ;
		}
	}
	
	/**
	 * Returns the delay between 2 dequeue.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.getDelay = function () /*Number*/
	{
		return this._delay ;	
	}

	/**
	 * Returns true if the chat service is bufferize.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.isBufferize = function () /*Boolean*/
	{
		return this._isBufferize ;	
	}

	/**
	 * Returns true if the internal service is running
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.isRunning = function()
	{
		return (this.service.running == true);
	}
	
	/**
	 * Launch the next service method in the buffer.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.next = function()
	{
		this.stopInterval() ;
		this._model.dequeue() ;
	}

	/**
	 * Register a RemotingServiceModel instance.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.registerModel = function( model /*RemotingServiceModel*/ ) /*void*/
	{
		if (model == null)
		{
			throw new vegas.errors.IllegalArgumentError(this + " registerModel method failed, the specified model not must be 'null' or 'undefined'.") ;
		}
		else if (model instanceof asgard.model.remoting.RemotingServiceModel)
		{
			var EventType = asgard.events.RemotingServiceModelEvent ;
			model.addEventListener( EventType.CHANGE_REMOTING_SERVICE_MODEL  , this._changeListener ) ;
			model.addEventListener( EventType.CLEAR_REMOTING_SERVICE_MODEL   , this._clearListener ) ; 
			model.addEventListener( EventType.DEQUEUE_REMOTING_SERVICE_MODEL , this._dequeueListener ) ;
			model.addEventListener( EventType.ENQUEUE_REMOTING_SERVICE_MODEL , this._enqueueListener ) ;
			
			this._model = model ;
			
		}
		else
		{
			throw new vegas.errors.IllegalArgumentError(this + " registerModel method failed, the specified model must be a RemotingServiceModel instance.") ;
		} 
	}

	/**
	 * Reset the current service.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.reset = function()
	{
		if (this.service != null)
		{
			this.service = null ;
		}
		
		var ActionEvent     = asgard.events.ActionEvent ;
		var RemotingEvent   = asgard.events.RemotingEvent ;
		var RemotingService = asgard.net.remoting.RemotingService ;
		var Delegate        = vegas.events.Delegate ;
		
		this.service = new RemotingService() ;
		this.service.multipleSimultaneousAllowed = false ;
		
		this.service.addEventListener( RemotingEvent.ERROR, new Delegate(this, this._onError) ) ;
		this.service.addEventListener( RemotingEvent.FAULT, new Delegate(this, this._onFault) ) ;
		this.service.addEventListener( ActionEvent.FINISH, new Delegate(this, this._onFinish) ) ;
		this.service.addEventListener( ActionEvent.PROGESS, new Delegate(this, this._onProgress) ) ;
		this.service.addEventListener( ActionEvent.START, new Delegate(this, this._onStart) ) ;
		this.service.addEventListener( RemotingEvent.TIMEOUT, new Delegate(this, this._onTimeOut) ) ;
		
	}

	/**
	 * Run the ChatService if isn't bufferize.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.run = function()
	{
		if ( ! this.isBufferize() )
		{
			this.setBufferize(true) ;
			this.next();
		}
	}

	/**
	 * Sets if the chat service is bufferize or not.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.setBufferize = function ( b /*Boolean*/ ) /*void*/
	{
		this._isBufferize = b ;	
	}

	/**
	 * Set the current service entry.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.setCurrentEntry = function( entry /*RemotingServiceEntry*/ )
	{
		
		this.reset() ;
		
		this.service.gatewayUrl  = entry.url ;
		this.service.serviceName = entry.serviceName  ;
		this.service.methodName  = entry.methodName  ;
		if ( entry.params != null )
		{
			if ( entry.params.length > 0) 
			{
				this.service.params = entry.params ;
			}
		} 
		
		var RemotingEvent  = asgard.events.RemotingEvent ;
		var Delegate       = vegas.events.Delegate ;
		
		this.service.addEventListener( RemotingEvent.RESULT, new Delegate(this, this._onResult, entry) ) ;
		this.service.trigger() ;
	}

	/**
	 * Sets the delay between 2 dequeue.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.setDelay = function ( n /*Number*/ ) /*void*/
	{
		this._delay = (n > 0) ? n : 0 ;	
	}

	/**
	 * Sets the model of this RemotingServiceManager instance.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.setModel = function( model /*RemotingServiceModel*/ ) /*Void*/ 
	{
		if (this._model != null)
		{
			this.unregisterModel(this._model) ;
		}
		this.registerModel( model ) ;
	}

	/**
	 * Start the interval between 2 dequeue after the service finish this trigger.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.startInterval = function() /*void*/
	{
		if (this._idInterval == null)
		{
			this._idInterval = setInterval( this, "next", this._delay) ;
		}
		else
		{
			this.logger.warn("> " + this + " startInterval failed, is allready in progress.") ;	
		}
	}
	
	/**
	 * Stop the current interval in progress.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.stopInterval = function() /*void*/
	{
		if (this._idInterval != null)
		{
			clearInterval(this._idInterval) ;
			this._idInterval = null ;
		}
	}

	
	/**
	 * Unregister a RemotingServiceModel instance.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype.unregisterModel = function( model /*RemotingServiceModel*/ ) /*void*/
	{
		if (model == null)
		{
			throw new vegas.errors.IllegalArgumentError(this + " unregisterModel method failed, the specified model not must be 'null' or 'undefined'.") ;
		}
		else if (model instanceof asgard.model.remoting.RemotingServiceModel)
		{
			
			var EventType = asgard.events.RemotingServiceModelEvent ;
			model.removeEventListener( EventType.CHANGE_REMOTING_SERVICE_MODEL  , this._changeListener ) ;
			model.removeEventListener( EventType.CLEAR_REMOTING_SERVICE_MODEL   , this._clearListener ) ; 
			model.removeEventListener( EventType.DEQUEUE_REMOTING_SERVICE_MODEL , this._dequeueListener ) ;
			model.removeEventListener( EventType.ENQUEUE_REMOTING_SERVICE_MODEL , this._enqueueListener ) ;
			
			this._model = null ;
			
		}
		else
		{
			throw new vegas.errors.IllegalArgumentError(this + " unregisterModel method failed, the specified model must be a RemotingServiceModel instance.") ;
		} 
	}
	
	asgard.net.remoting.RemotingServiceManager.prototype._next = function() /*void*/
	{
		if (CHAT_SERVICE_MODEL.size() > 0)
		{
			this.startInterval() ;
		}
		else
		{
			this.setBufferize(false) ;	
		}
	}
	
	/**
	 * Invoqued when the register model is changed.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onChange = function ( e ) /*void*/
	{
		
	}

	/**
	 * Invoqued when the register model is cleared.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onClear = function ( e ) /*void*/
	{
		
	}
 	
 	/**
	 * Invoqued when the register model is dequeued.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onDequeue = function ( e ) /*void*/
	{
		e.getModel().setCurrentEntry( e.getEntry() ) ;
	}

 	/**
	 * Invoqued when the RemotingService notify an error.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onError = function ( e )
	{
		this.logger.error("> " + this + " : " + e.type + " : " + e.code) ;
	}
 
 	/**
	 * Invoqued when the register model is enqueued.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onEnqueue = function ( e /*RemotingServiceModelEvent*/ ) /*void*/
	{
		var entry /*ServiceEntry*/ = e.getEntry() ;
		
		LOGGER.debug("> " + this + " _onEnqueue : " + entry ) ;
		
		if (this._model.size() > 0 && !this.isBufferize())
		{
			this.logger.info("> " + this + " enqueue and run the entry : " + entry) ;
			this.run() ;
		}
		
	}
 
  	/**
	 * Invoqued when the RemotingService notify a fault.
	 */
 	asgard.net.remoting.RemotingServiceManager.prototype._onFault = function( e )
	{
		this.logger.warn("> " + this + " : " + e.type + " : " + e.getCode() + " :: " + e.getDescription()) ;
		this._next() ;
	}
 
  	/**
	 * Invoqued when the RemotingService notify the end of the connection.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onFinish = function( e)
	{
		LOGGER.debug("> " + this + " : " + e.type) ;
		this.setBufferize(false) ;
		this._next() ;
	}
	
 	/**
	 * Invoqued when the RemotingService notify the service is in progress.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onProgress = function( e )
	{
		LOGGER.info("> " + this + " : " + e.type ) ;
	}
	
 	/**
	 * Invoqued when the RemotingService notify a result.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onResult = function ( e /*RemotingEvent*/ , entry /*ServiceEntry*/ )
	{
		//this.logger.info("> " + this + " : " + e.type + " : " + new UserVO( e.result ) + ", entry : " + entry ) ;
		entry.result = e.result ;
		this._model.setCurrentEntry(entry) ;
	}

 	/**
	 * Invoqued when the RemotingService notify the start of the connection.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onStart = function( e )
	{
		LOGGER.debug("> " + this + " : " + e.type ) ;
	}

 	/**
	 * Invoqued when the RemotingService notify a timeout error.
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._onTimeOut = function( e )
	{
		LOGGER.warn("> " + this + " : " + e.type ) ;
		this._next() ;
	}

	/**
	 * The internal delay between 2 dequeue in the model (1000 ms by default).
	 * @private
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._delay = 1000 ;

	/**
	 * The internal id of the interval between two dequeue in the model.
	 * @private
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._idInterval = null ;

	/**
	 * This value indicate if the service is in progress or not.
	 * @private
	 */
	asgard.net.remoting.RemotingServiceManager.prototype._isBufferize = false ;

}
