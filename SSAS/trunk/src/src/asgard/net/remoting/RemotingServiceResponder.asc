/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * The RemotingServiceResponder class provides an object that is used in the RemotingService instances to handle return values from the server.
 * @author eKameleon
 */
if (asgard.net.remoting.RemotingServiceResponder == undefined) 
{
	
	/**
	 * @requires vegas.core.CoreObject
	 */
	require("vegas.core.CoreObject") ;
	
	/**
	 * Creates a new RemotingServiceResponder.
	 * @param scope the object who handle the values from the server.
	 * @param resultMethod The function invoked if the call to the server succeeds and returns a result.
	 * @param faultMethod The function invoked if the server returns an error.
	 */	
	asgard.net.remoting.RemotingServiceResponder = function( scope, resultMethod /*Function*/ , faultMethod /*Function*/ )
	{
		if (faultMethod == null ) 
		{
			faultMethod = scope["onFault"] ;
		}
		
		if (resultMethod == null )
		{
			resultMethod = scope["onResult"] ;
		}
		
		var Delegate = vegas.events.Delegate ;
		var RemotingEvent = asgard.events.RemotingEvent ;
		
		this._eFault = new RemotingEvent( RemotingEvent.FAULT, null) ;
		this._eResult = new RemotingEvent( RemotingEvent.RESULT, null) ;
		
		this._fault = new Delegate(scope, faultMethod) ;
		this._result = new Delegate(scope, resultMethod) ;
		
	}
	
	/**
	 * @extends vegas.core.CoreObject
	 */
	proto = asgard.net.remoting.RemotingServiceResponder.extend( vegas.core.CoreObject ) ;
 
	/**
	 * Returns the name of the method.
	 * @return the name of the method.
	 */
	proto.getMethodName = function () /*String*/ 
	{
		return this._methodName ;
	}
	
	/**
	 * Returns the service reference of this responder.
	 * @return the service reference of this responder.
	 */
	proto.getService = function () 
	{
		return this._service ;	
	}
	
	/**
	 * Invoked if the call to the server succeeds and returns a result.
	 */
	proto.onResult = function ( oResult ) /*void*/ 
	{
		
		if (oResult instanceof RecordSet || oResult instanceof asgard.data.remoting.RecordSet) 
		{
			oResult.setParentService( this.getService() ) ;
		}
		this._eResult.setResult( oResult, this._methodName ) ;
		this._result.setArguments( this._eResult ) ;
		this._result.run() ;
		
	}

	/**
	 * Invoked if the server returns an error.
	 */
	proto.onStatus = function ( oFault ) /*void*/ 
	{
		this._eFault.setFault(oFault, this._methodName) ;
		this._fault.setArguments( this._eFault );
		this._fault.run();
	}

	/**
	 * Sets the name of the method.
	 */
	proto.setMethodName = function (sName/*String*/) /*void*/ 
	{
		this._methodName = sName ;
	}
	
	/**
	 * Sets the service reference.
	 */
	proto.setService = function ( service ) /*void*/ 
	{
		this._service = service ;
	}

	/**
	 * @private
	 */	
	proto._eFault /*RemotingEvent*/ = null ;
	
	/**
	 * @private
	 */
	proto._eResult /*RemotingEvent*/ = null ;
	
	/**
	 * @private
	 */
	proto._fault /*Delegate*/ = null ;
	
	/**
	 * @private
	 */
	proto._methodName /*String*/ = null ;
	
	/**
	 * @private
	 */
	proto._result /*Delegate*/ = null ;
	
	/**
	 * @private
	 */
	proto._service = null ;

 	delete proto ;
 
}
