/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * @author eKameleon
 */
if (asgard.net.remoting.RemotingService == undefined) 
{
	
	/**
	 * Imports
	 */
	require("asgard.events.RemotingEvent") ;
	
	require("asgard.net.remoting.RemotingAuthentification") ;
	require("asgard.net.remoting.RemotingConnection") ;
	require("asgard.net.remoting.RemotingConnectionCollector") ;
	require("asgard.net.remoting.RemotingFormat") ;
	require("asgard.net.remoting.RemotingServiceResponder") ;
	
	require("asgard.process.AbstractAction") ;
	
	/**
	 * Creates a new RemotingService instance.
	 */
	asgard.net.remoting.RemotingService = function( gatewayUrl /*String*/ , serviceName /*String*/ , responder /*RemotingServiceResponder*/ )
	{
		
		var RemotingEvent = asgard.events.RemotingEvent ;
		
		asgard.process.AbstractAction.call(this) ;
		
		this.setGatewayUrl( gatewayUrl );
		this.setServiceName( serviceName ) ;
		this.setResponder( responder ) ;
		
		this._eFinish = new RemotingEvent(RemotingEvent.FINISH, this) ;
		this._eProgress = new RemotingEvent(RemotingEvent.PROGRESS, this) ;
		this._eStart = new RemotingEvent(RemotingEvent.START, this) ;
		
		this._eError = new RemotingEvent(RemotingEvent.ERROR, this)  ;
		
		// _global.System.onStatus = Delegate.create (this, _onStatus) ;
		
	}
	
	// ----o Constants
	
	asgard.net.remoting.RemotingService.LEVEL_ERROR /*String*/ = "error" ;
	
	// ----o Inherit

	asgard.net.remoting.RemotingService.extend( asgard.process.AbstractAction ) ;
 
 	p = asgard.net.remoting.RemotingService.prototype ;

	// ----o Public Properties
	
	p.multipleSimultaneousAllowed /*Boolean*/ = null ;
 
	// ----o Public Methods

	p.clone = function () 
	{
		return new asgard.net.remoting.RemotingService( this.gatewayUrl() , this.getServiceName() ) ;
	}

	p.getConnection = function () 
	{
		return this._rc ;	
	}

	p.getIsProxy = function () /*Boolean*/ 
	{
		return this._isProxy ;	
	}
	
	p.getGatewayUrl = function () /*String*/ 
	{
		return this._gatewayUrl ;	
	}

	p.getMethodName = function () /*String*/ 
	{
		return this._methodName ;
	}

	p.getParams = function () /*Array*/ 
	{
		return this._args  ;	
	}

	p.getResponder = function () /*RemotingServiceResponder*/ 
	{
		return this._responder ;
	}

	p.getResult = function () 
	{
		return this._result ;	
	}

	p.getServiceName = function () /*String*/ 
	{
		return this._serviceName ;
	}

	p.notifyError = function ( code /*String*/ ) /*Void*/ 
	{
		this._setRunning(false) ;
		this._eError.code = code || asgard.events.RemotingEvent.ERROR ;
		this.dispatchEvent( _eError ) ;
		this.notifyFinished() ;
	}	

	p.onFault = function ( e /*RemotingEvent*/ ) /*void*/ 
	{
		this.setRunning(false) ;
		e.setTarget(this) ;
		this.dispatchEvent( e ) ;
		this.notifyFinished() ;
	}

	p.onResult = function ( e /*RemotingEvent*/ ) /*void*/ 
	{
		
		this.setRunning(false) ;
		e.setTarget(this) ;
		
		this._result = e.getResult() ;
		
		this.dispatchEvent( e ) ;
		
		this.notifyFinished() ;
	}

	p.run = function () /*void*/ 
	{
		
		if (this._rc == null ) 
		{
			// ici notifier qu'il est impossible de lancer la connection.	
		}
		
		if (this._authentification != null)
		{
			this._rc.setCredentials(this._authentification) ;
		}
		
		if ( this.getRunning() && this.multipleSimultaneousAllowed == false)  
		{
			this.notifyProgress() ;
		}
		else 
		{
			this.notifyStarted() ;
			this._result = null ;
			this.setRunning(true) ;
			var arg /*Array*/ = [this._serviceName + "." + this._methodName , this.getResponder()].concat(this._args) ;
			this._rc.call.apply( this._rc, arg );
		} 
	}
	
	p.setParams = function ( args /*Array*/ ) /*void*/ 
	{
		this._args = args ;	
	}
	
	p.setCredentials = function ( authentification /*RemotingAuthentification*/ ) /*Void*/  
	{
		this._authentification = authentification ;
	}
	
	p.setGatewayUrl = function ( url /*String*/ ) /*Void*/ 
	{
		if (this._gatewayUrl) 
		{
			asgard.net.remoting.RemotingConnectionCollector.remove(this._gatewayUrl) ;
		}
		if (url) 
		{
			this._gatewayUrl = url ;
			this._rc = asgard.net.remoting.RemotingConnection.getConnection( this._gatewayUrl ) ;
		}
		else 
		{
			this._rc = null ;	
		}
	}

	p.setIsProxy = function (b /*Boolean*/) /*Void*/ 
	{
		this._isProxy = b ;
		this.__resolve = b ? this.__resolve__ : null ;	
	}
		
	p.setMethodName = function ( sName /*String*/ ) /*void*/ 
	{
		this._methodName = sName ;	
	}
	
	p.setResponder = function ( responder /*RemotingServiceResponder*/ ) /*Void*/ 
	{
		if (this._responder)
		{
			this._responder.setService(null) ;
		}
		this._responder = responder || new asgard.net.remoting.RemotingServiceResponder(this, this.onResult, this.onFault) ;
		this._responder.setService(this) ;
	}

	p.setServiceName = function ( sName /*String*/ ) /*Void*/ 
	{
		this._serviceName = sName ;	
	}

	p.trigger = function () /*void*/ 
	{
		this.run() ;	
	}


	p.toString = function () /*String*/ 
	{
		var f = new asgard.net.remoting.RemotingFormat() ; 
		return f.formatToString(this) ;	
	}

	// ----o Virtual Properties

	vegas.util.factory.PropertyFactory.create(p, "gatewayUrl") ;
	
	vegas.util.factory.PropertyFactory.create(p, "isProxy") ;
	
	vegas.util.factory.PropertyFactory.create(p, "params") ;
	
	vegas.util.factory.PropertyFactory.create(p, "methodName") ;
	
	vegas.util.factory.PropertyFactory.create(p, "serviceName") ;

	// ----o Private Properties
	
	p._args /*Array*/ ;
	
	p._authentification /*RemotingAuthentification*/ ;
	
	p._eError /*RemotingEvent*/ ;
	
	p._eFinish /*RemotingEvent*/ ;
	
	p._eProgress /*RemotingEvent*/ ;
	
	p._eStart /*RemotingEvent*/ ;
	
	p._gatewayUrl /*String*/ = null  ;
	
	p._isProxy /*Boolean*/ = false ;
	
	p._methodName /*String*/ ; 
	
	p._rc /*RemotingConnection*/ = null ;
	
	p.__resolve = null ;
	
	p._result = null ;
	
	p._serviceName /*String*/ = null ;
	
	p._responder /*RemotingServiceResponder*/ = null ;

	// ----o Private Methods

	p.__resolve__ = function ( methodName /*String*/ ) /*Function*/ 
	{
		
		if (_rc == null ) 
		{
			// ici notifier qu'il est impossible de lancer la connection.	
			return null ;
		}
		
		if(methodName == "__path__") 
		{
			return null ; // hack pour le toString avec ConstructorUtil.getName !!
		}
		
		var responder /*RemotingServiceResponder*/ = this.getResponder() ;
		responder.setMethodName(methodName) ;

		var rc /*RemotingConnection*/ = this._rc ;
		var serviceName /*String*/ = this._serviceName ;

		return function () 
		{
			var args /*Array*/ = [ serviceName + "." + methodName , responder ].concat(arguments) ;
			return rc.call.apply( rc, args ); 
		} ;
		
		
	}
	
	p._onStatus = function ( ev /*Object*/ ) /*void*/ 
	{
		if (ev.level == asgard.net.remoting.RemotingService.LEVEL_ERROR) 
		{
			this.notifyError(ev.code) ;
		}
	}

	// ----o Encapsulate
 
 	delete p ;
 
	// trace ("***** running asgard.net.remoting.RemotingService") ;

}
