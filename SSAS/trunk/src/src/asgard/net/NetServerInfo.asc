/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * Defines the information object in a onStatus callback method.
 * <p><b>Example :</b></p>
 * {@code
 * var init = 
 * {
 *     application : "vegas" ,
 *     code        : "code"  ,
 *     level       : "level" ,
 *     description : "the description"
 * }
 * 
 * var nInfo = new asgard.net.NetServerInfo( init ) ;
 * trace( nInfo ) ;
 * }
 * @author eKameleon
 * @version 1.0.0.0
 */	
if (asgard.net.NetServerInfo == undefined) 
{
	
	/**
	 * @requires vegas.core.CoreObject
	 */
	require("vegas.core.CoreObject") ;

	/**
	 * Creates a new NetServerInfo object.
	 * @param oInfo a primitive object with the properties 'code', 'level', 'description' and 'application'.
	 */
	asgard.net.NetServerInfo = function( oInfo /*Object*/ ) 
	{
		if (oInfo != null) 
		{
			this.description = oInfo.hasOwnProperty("description") ? oInfo.description : null ;
			this.code        = oInfo.hasOwnProperty("code")        ? oInfo.code        : null ;
			this.level       = oInfo.hasOwnProperty("level")       ? oInfo.level       : null ;
			this.application = oInfo.hasOwnProperty("application") ? oInfo.application : null ;
		}
		this._oInfo = this.toObject() ;
	}
	
	/**
	 * @extends vegas.core.CoreObject
	 */	
	proto = asgard.net.NetServerInfo.extend( vegas.core.CoreObject ) ;
 
 	/**
	 * This object exist if the server return an application error object. 
	 * This property exist with FMS when the SSAS {@code application.rejectConnection()} method is invoqued. 
	 */
	proto.application = null ;

	/**
	 * The code of this information object.
	 */
	proto.code /*String*/ = null ;

	/**
	 * The description of this information object.
	 */
	proto.description /*String*/ = null ;

	/**
	 * The level of this information object.
	 */
	proto.level /*String*/ = null ;

	/**
	 * Returns the {@code Object} representation of this instance.
	 * @return the {@code Object} representation of this instance.
	 */
	proto.toObject = function () /*Object*/
	{
		return { description:this.description, code:this.code, level:this.level , application:this.application } ;
	}
	
	/**
	 * Returns the Eden String representation of the object.
	 * @return the Eden String representation of the object.
	 */	
	proto.toSource = function () /*String*/ 
	{
		return "new asgard.net.NetServerInfo(" + toObject().toSource() + ")" ;
	}

	/**
	 * Returns the String representation of this object.
	 * @return the String representation of this object.
	 */
	proto.toString = function() /*String*/
	{
		var s /*String*/ = "[NetServerInfo" ;
		if (this.code != null)
		{
			s += " code:'" + this.code + "'" ;	
		}
		if (this.level != null)
		{
			s += " level:'" + this.level + "'" ;	
		}
		if (this.description != null)
		{
			s += " description:'" + this.description + "'" ;	
		}
		if (this.application != null)
		{
			s += " application:" + this.application  ;	
		}
		s += "]" ;
		return s ;
	}

	delete proto ;

}
