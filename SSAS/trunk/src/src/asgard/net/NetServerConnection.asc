/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

// TODO finish Unit Tests.

/**
 * The NetServerConnection class.  
 * <p><b>Example :</b></p>
 * {@code
 * 
 * Delegate = vegas.events.Delegate ;
 * 
 * NetServerEvent = asgard.events.NetServerEvent ;
 * NetServerInfo = asgard.net.NetServerInfo ;
 * NetServerStatus = asgard.net.NetServerStatus ;
 * NetServerConnection = asgard.net.NetServerConnection ;
 * 
 * // ---- Callbacks
 * 
 * function onClose( e )
 * {
 *      trace("> " + e.getType()) ;
 * }
 * 
 * function onFinish( e )
 * {
 *     trace("> " + e.getType()) ;
 * }
 * 
 * function onStart( e )
 * {
 *      trace("> " + e.getType()) ;
 * }
 * 
 * function onStatus( e )
 * {
 *     var type  = e.getType() ;
 *     var target = e.getTarget() ;
 *     var status  = e.getStatus() ;
 *     var info  = e.getInfo() ;
 * 
 *     trace("> " + e.getType() + " : " + status) ;
 * 
 *     switch (info)
 *     {
 *         case NetServerStatus.SUCCESS :
 *         {
 *             //
 *             break ;
 *         }
 * 
 *         case NetServerStatus.BAD_VERSION :
 *         {
 *             //
 *             break ;
 *         }
 * 
 *         case NetServerStatus.CLOSED :
 *         {
 *             //
 *             break ;
 *         }
 *         
 *         case NetServerStatus.FAILED :
 *         {
 *              trace(" >> " + info.code) ;
 * 				trace(" >> " + info.level) ;
 * 				trace(" >> " + info.description) ;
 * 				break ;
 *         }
 * 
 *         case NetServerStatus.INVALID :
 *         {
 *             //
 *             break ;
 *         }
 * 
 * 		   case NetServerStatus.REJECTED :
 *         {
 *             //
 *             break ;
 *         }
 *
 *         case NetServerStatus.SHUTDOWN :
 *         {
 *             //
 *             break ;
 *         }
 *     }
 * }
 * 
 * function onTimeOut( e )
 * {
 *      var type = e.getType() ;
 *      var target = e.getTarget() ;
 *      trace("> " + e.getType()) ;
 * }
 * 
 * // ---- Test Connection
 * 
 * var co = new NetServerConnection() ;
 * co.addEventListener( NetServerEvent.CLOSE , new Delegate(this, onClose) ) ;
 * co.addEventListener( NetServerEvent.FINISH , new Delegate(this, onFinish) ) ;
 * co.addEventListener( NetServerEvent.START , new Delegate(this, onStart) ) ;
 * co.addEventListener( NetServerEvent.NET_STATUS, new Delegate(this, onStatus) ) ;
 * co.addEventListener( NetServerEvent.TIMEOUT, new Delegate(this, onTimeOut) ) ;
 * 
 * var url = "rtmp://127.0.0.1/test" ;
 * co.connect( url ) ;
 */
if (asgard.net.NetServerConnection == undefined) 
{
	
	/**
	 * @requires asgard.events.NetServerEven
	 */
	require("asgard.events.NetServerEvent") ;

	/**
	 * @requires asgard.net.NetServerInfo
	 */
	require("asgard.net.NetServerInfo") ;

	/**
	 * @requires asgard.net.NetServerStatus
	 */
	require("asgard.net.NetServerStatus") ;
	
	/**
	 * Creates a new NetServerConnection instance. 
	 */
	asgard.net.NetServerConnection = function() 
	{

		this._dispatcher = this.initEventDispatcher() ;
		
		var NetServerEvent = asgard.events.NetServerEvent ;
		
		this._eClose = new NetServerEvent( NetServerEvent.CLOSE , this ) ;
		this._eFinish = new NetServerEvent( NetServerEvent.FINISH , this ) ;
		this._eStart = new NetServerEvent( NetServerEvent.START , this ) ;
		this._eStatus = new NetServerEvent( NetServerEvent.NET_STATUS , this ) ;
		this._eTimeOut = new NetServerEvent( NetServerEvent.TIMEOUT , this ) ;		
		
		this._timer = new vegas.util.Timer(8000, 1) ;
		this._timeOut = new vegas.events.Delegate(this, this._onTimeOut) ;
		
		this._nc = new NetConnection() ;
		this._nc.onStatus = vegas.events.Delegate.create(this, this._onStatus) ;
		
	}
	
	// Inherit

	asgard.net.NetServerConnection.extend( vegas.core.CoreObject ) ;
 
	
	asgard.net.NetServerConnection.prototype.addEventListener = function ( eventName /*String*/ , listener /*EventListener*/, useCapture /*Boolean*/, priority /*Number*/, autoRemove /*Boolean*/ ) /*Void*/ 
	{
		this._dispatcher.addEventListener.apply(this._dispatcher, Array.fromArguments(arguments) );
	}
	
	asgard.net.NetServerConnection.prototype.addGlobalEventListener = function (listener /*EventListener*/, priority/*Number*/, autoRemove/*Boolean*/) /*Void*/ 
	{
		this._dispatcher.addGlobalEventListener(listener, priority, autoRemove) ;
	}

	asgard.net.NetServerConnection.prototype.addHeader = function ( name /*String*/ , useUnderstand /*Boolean*/, value /*Object*/ ) /*void*/
	{
		this._nc.addHeader.call( this._nc, name, useUnderstand, value ) ;
	}

	asgard.net.NetServerConnection.prototype.call = function ( /* ...arguments */ ) /*Boolean*/ 
	{
		return this._nc.call.apply( this._nc, Array.fromArguments(arguments) ) ;
	}

	asgard.net.NetServerConnection.prototype.clone = function () /*NetServerConnection*/ 
	{
		return new asgard.net.NetServerConnection() ;	
	}

	/*override*/ asgard.net.NetServerConnection.prototype.close = function ( noEvent /*Boolean*/ ) /*Void*/ 
	{
		
		this._nc.close() ;
		this._timer.stop() ;
		if (!noEvent) 
		{
			this.notifyClose() ;
		}
		
	}

	/*override*/ asgard.net.NetServerConnection.prototype.connect = function( uri )  
	{
		if ( this.isConnected)
		{
			return false ;
		}
		this.notifyStarted() ;
		
		this.setUri(uri) ;
		
		return this._nc.connect.apply( this._nc, Array.fromArguments(arguments) ) ;
	}
	

	asgard.net.NetServerConnection.prototype.dispatchEvent = function (event, isQueue /*Boolean*/, target, context) /*Event*/ 
	{
		return this._dispatcher.dispatchEvent(event, isQueue, target, context) ;
	}
	
	/**
	 * Return timeout interval duration.
	 */
	asgard.net.NetServerConnection.prototype.getDelay = function () /*Number*/ 
	{
		return _timer.getDelay() ;	
	}

	asgard.net.NetServerConnection.prototype.getDispatcher = function () /*EventDispatcher*/ 
	{
		return this._dispatcher ;
	}

	asgard.net.NetServerConnection.prototype.getEventDispatcher = function () /*EventDispatcher*/ 
	{
		return this._dispatcher ;
	}
	
	asgard.net.NetServerConnection.prototype.getEventListeners = function ( eventName /*String*/ ) /*EventListenerCollection*/ 
	{
		return this._dispatcher.getEventListeners(eventName) ;
	}

	asgard.net.NetServerConnection.prototype.getGlobalEventListeners = function () /*EventListenerCollection*/ 
	{
		return this._dispatcher.getGlobalEventListeners() ;
	}

	asgard.net.NetServerConnection.prototype.getIsConnected = function () /*Boolean*/ 
	{
		return this._nc.isConnected ;	
	}

	asgard.net.NetServerConnection.prototype.getLimitPolicy = function () /*NetServerPolicy*/ 
	{
		return this._policy ;	
	}

	asgard.net.NetServerConnection.prototype.getRegisteredEventNames = function () /*Set*/ 
	{
		return this._dispatcher.getRegisteredEventNames() ;
	}
	
	asgard.net.NetServerConnection.prototype.getParent = function () /*EventDispatcher*/ 
	{
		return this._dispatcher.parent ;
	}

	asgard.net.NetServerConnection.prototype.getUri = function () /*String*/ 
	{
		return this._uri || this._nc.uri ;
	}

	asgard.net.NetServerConnection.prototype.hasEventListener = function (eventName /*String*/ ) /*Boolean*/
	{
		return this._dispatcher.hasEventListener( eventName ) ;
	}

	asgard.net.NetServerConnection.prototype.initEventDispatcher = function () /*EventDispatcher*/ 
	{
		return new vegas.events.EventDispatcher(this) ;
	}

	asgard.net.NetServerConnection.prototype.removeEventListener = function (eventName /*String*/, listener, useCapture /*Boolean*/) /*EventListener*/ 
	{
		return this._dispatcher.removeEventListener(eventName, listener, useCapture) ;
	}

	asgard.net.NetServerConnection.prototype.removeGlobalEventListener = function ( listener ) /*EventListener*/ 
	{
		return this._dispatcher.removeGlobalEventListener(listener) ;
	}

	asgard.net.NetServerConnection.prototype.run = function () /*Void*/ 
	{
		this.connect(this.uri) ;
	}

	/**
	 * Set timeout interval duration.
	 */
	asgard.net.NetServerConnection.prototype.setDelay = function ( n /*Number*/ , useSeconds /*Boolean*/ ) /*Void*/ 
	{
		var t /*Number*/ = (n > 0) ? n : 0 ;
		if (useSeconds)
		{
			t = Math.round(t * 1000) ;
		}
		this._timer.setDelay(t) ;
	}

	/**
	 * Use limit timeout interval.
	 * @see TimeoutPolicy
	 */
	asgard.net.NetServerConnection.prototype.setLimitPolicy = function ( policy /*TimeoutPolicy*/ ) /*Void*/ 
	{
		this._policy = policy ;
		
		if (this._policy == asgard.net.TimeoutPolicy.LIMIT) 
		{
			this._timer.addEventListener( vegas.events.TimerEventType.TIMER, this._timeOut) ;
		}
		else 
		{
			this._timer.removeEventListener(vegas.events.TimerEventType.TIMER, this._timeOut) ;
		}
		
	}

	asgard.net.NetServerConnection.prototype.setParent = function (parent /*EventDispatcher*/ ) /*String*/ 
	{
		this._dispatcher.parent = parent ;
	}

	asgard.net.NetServerConnection.prototype.setUri = function ( uri /*String*/ ) /*void*/ 
	{
		this._uri = uri ;
	}

	/**
	 * Use this method to dispatch in FMS application an event.
	 */
	asgard.net.NetServerConnection.prototype.sharedEvent = function ( event , context ) /*Void*/ 
	{
		var eventType /*String*/ ;
		if (event instanceof vegas.events.Event) 
		{
			eventType = event || event.getType() ;	
			this.call(event, null, event.toSource()) ;
		}
		else if (vegas.util.TypeUtil.typesMatch( event, String) ) 
		{
			this.call( event, null, context || null ) ;
		}
	}
	
	asgard.net.NetServerConnection.prototype.toSource = function () /*String*/ 
	{
		return "new asgard.net.NetServerConnection()" ;
	}
	
	asgard.net.NetServerConnection.prototype.toString = function () /*String*/ 
	{
		return "[" + vegas.util.ConstructorUtil.getName(this) + "]" ;
	}

	// ----o Protected Methods
	
	asgard.net.NetServerConnection.prototype.notifyClose = function () /*Void*/
	{
		this.dispatchEvent( this._eClose ) ;	
	}

	asgard.net.NetServerConnection.prototype.notifyFinished = function () /*Void*/
	{
		this.dispatchEvent( this._eFinish ) ;
	}

	asgard.net.NetServerConnection.prototype.notifyStarted = function () /*Void*/
	{
		this.dispatchEvent( this._eStart ) ;
	}
	
	asgard.net.NetServerConnection.prototype.notifyStatus = function ( status /*NetServerStatus*/ , info ) /*Void*/ 
	{
		this._eStatus.setInfo(info) ;
		this._eStatus.setStatus(status) ;
		this.dispatchEvent( this._eStatus ) ;	
	}

	asgard.net.NetServerConnection.prototype.notifyTimeOut = function () /*Void*/
	{
		this.dispatchEvent( this._eTimeOut ) ;	
	}	

	// Virtual Properties

	vegas.util.factory.PropertyFactory.create(asgard.net.NetServerConnection.prototype, "isConnected", true) ;

	vegas.util.factory.PropertyFactory.create(asgard.net.NetServerConnection.prototype, "uri") ;
	
	// Private Properties
	
	asgard.net.NetServerConnection.prototype._dispatcher /*EventDispatcher*/ = null ;

	asgard.net.NetServerConnection.prototype._eClose /*NetServerEvent*/ = null ;

	asgard.net.NetServerConnection.prototype._eFinish /*NetServerEvent*/ = null ;

	asgard.net.NetServerConnection.prototype._eStart /*NetServerEvent*/= null ;

	asgard.net.NetServerConnection.prototype._eStatus /*NetServerEvent*/ = null  ;

	asgard.net.NetServerConnection.prototype._eTimeOut /*NetServerEvent*/ = null ;

	asgard.net.NetServerConnection.prototype._nc /*NetConnection*/ = null ;

	asgard.net.NetServerConnection.prototype._policy /*TimeoutPolicy*/ = null ;

	asgard.net.NetServerConnection.prototype._timer /*Timer*/ = null ;

	asgard.net.NetServerConnection.prototype._timeOut /*EventListener*/ = null ;

	asgard.net.NetServerConnection.prototype._uri /*String*/ = null ;

	// Private Methods

	asgard.net.NetServerConnection.prototype._onStatus = function ( oInfo ) /*Void*/ 
	{
		
		this._timer.stop() ;
		
		var NetServerStatus = asgard.net.NetServerStatus ;

		if (oInfo.code == null) 
		{
			return ;
		}
				
		var code /*NetServerStatus*/ = NetServerStatus.format(oInfo.code) ;
		
		// trace("> " + this + ".onStatus(" + code + ")") ;
		
		switch (code) 
		{
		
			case NetServerStatus.BAD_VERSION :
			{
				this.notifyStatus(NetServerStatus.BAD_VERSION) ;
				break ;
			}
			case NetServerStatus.CLOSED :
			{
				this.notifyStatus(NetServerStatus.CLOSED) ;
				break ;
			}
			case NetServerStatus.FAILED :
			{
				this.notifyStatus(NetServerStatus.FAILED, oInfo) ;
				break ;
			}
			case NetServerStatus.INVALID :
			{
				this.notifyStatus(NetServerStatus.INVALID) ;
				break ;
			}	
			case NetServerStatus.REJECTED :
			{
				this.notifyStatus(NetServerStatus.REJECTED) ;
				break ;
			}
			case NetServerStatus.SHUTDOWN :
			{
				this.notifyStatus(NetServerStatus.SHUTDOWN) ;
				break ;
			}
			case NetServerStatus.SUCCESS :
			{
				this.notifyStatus(NetServerStatus.SUCCESS) ;
				break ;
			}
		}
		this.notifyFinished() ;
	}

	asgard.net.NetServerConnection.prototype._onTimeOut = function ( e /*TimerEvent*/ ) /*Void*/
	{
		this.notifyTimeOut() ;
		this.notifyFinished() ;
		this.close() ;
	}

}
