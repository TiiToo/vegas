/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** Gateway
 
	AUTHOR
	
		Name : Gateway
		type : SSAS
		Package : asgard.server
		Version : 1.0.0.0
		Date :  2006-06-13
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
 
	DESCRIPTION
	
		Singleton.
 
	METHOD SUMMARY
	
	INHERIT
	
		CoreObject â†’ Gateway
 
	IMPLEMENTS
	
		IFormattable, IHashable
 
 **/

if ( asgard.server.Gateway == undefined ) {

	// ----o Imports
	
	require("asgard.events.GatewayEvent") ;

	asgard._application.registerClass("Error", Error) ;

	// ----o Constructor
	
	asgard.server.Gateway = function () 
		{
		
		if (asgard.GATEWAY != null) 
			{
			throw new vegas.errors.RuntimeError("asgard.server.Gateway constructor is private.") ;
			}
		
		this._oController = this.initController() ;
		
		var Delegate = vegas.events.Delegate ;
		var owner = this ;
		
		Client.prototype.__resolve = function ( eventType ) 
			{
			
			var controller = owner.getController() ;
			
			if (controller == null || eventType == "__hashcode__") 
				{
				// NetConnection.failed
				return ;
				}
			
			var client = this ;
			
			try 
				{
				if ( controller.contains(eventType) ) 
					{
					var f = function () 
						{
						var e = new asgard.events.GatewayEvent( eventType, client, Array.fromArguments(arguments) ) ;
						arguments.callee.fireEvent( e ) ;
						return eventType ;
						}
					f.fireEvent = Delegate.create(controller, controller.fireEvent) ;
					return f ;
					} 
				else 
					{
					throw new Error("Method not found (" + eventType + ").") ;
					}
				}
			catch (e)
				{
					trace("Sending error message: " + e.message ) ;
					return function () {
						return e ;
					}
				}
			}
		}
	
	// ----o Inherit
	
	asgard.server.Gateway.extend(vegas.core.CoreObject) ;

	// ----o Public Methods

	/**
	 * Returns 'true' if the eventName is registered in the Gateway Controller.
	 * @param eventName:String
	 */
	asgard.server.Gateway.prototype.contains = function ( eventName ) /*Boolean*/ {
		return this._oController.containsKey(eventName) ;
	}
 
	/**
	 * Returns the Gateway controller or null.
	 */
	asgard.server.Gateway.prototype.getController = function () {
		
		return this._oController || null ;
		
	}

	/**
	 * Init the Gateway controller.
	 * Override this method to customize initial Gateway controller.
	 */
	asgard.server.Gateway.prototype.initController = function () /*FrontController*/ {
		return new vegas.events.FrontController() ;
	}

	/**
	 * Add a new entry into the Gateway controller.
	 * @param eventName:String
	 * @param listener:EventListener
	 */
	asgard.server.Gateway.prototype.insert = function (eventName /*String*/ , listener /*EventListener*/) {
		
		if (this._oController != null) {
			
			this._oController.insert(eventName, listener) ;
			
		}
		
	}

	/**
	 * Remove an entry into the Gateway controller.
	 * @param eventName:String
	 * @return Void
	 */
	asgard.server.Gateway.prototype.remove = function(eventName /*String*/ ) /*Void*/ {
		
		if (this._oController != null) {
			
			this._oController.remove(eventName) ;
			
		}
		
	}

	/**
	 * Set the Gateway controller.
	 */
	asgard.server.Gateway.prototype.setController = function ( oController ) {
		
		if (oController instanceof vegas.events.FrontController) {
			
			this._oController = oController ;
			
		} else {
			
			this._oController = null ;
			
		}
		
	}

	// ----o Encapsulate
	
	asgard.GATEWAY = new asgard.server.Gateway() ;
	
	// trace ("***** running asgard.server.Gateway") ;
	
}