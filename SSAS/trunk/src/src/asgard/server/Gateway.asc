/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2008
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * This gateway is use to connect the client and the server with the FrontController pattern of VEGAS.
 * <p><b>Example :</b></p>
 * {@code
 * // Example to use GATEWAY & APPLICATION with commands & FrontController.
 * Client.prototype.getMessage = function ( msg )
 * {
 *     return msg ;
 * }
 *  
 * // Invoqued when an event is dispatcher by the Application singleton.
 * var onDebug = function (e) 
 * {
 * 
 *     var type = e.getType() ;
 *     var target = e.getTarget() ;
 *     var client = e.client ;
 * 
 *     switch (type)
 *     {
 *         case "onConnect" :
 *         {
 *              trace("debug > " + type + " : " + client ) ;
 *              asgard.APPLICATION.acceptConnection(client) ;
 *              // asgard.APPLICATION.rejectConnection(client) ;
 *              break ;
 *         }
 * 		   default :
 *         {
 *              trace("debug > " + type + " : " + target ) ;
 *         }
 *     }
 * }
 * 
 * var onAction = function ( e )
 * {
 *     trace("++++ action type    : " + e.type) ;
 *     trace("++++ action client : " + e.client) ;
 *     trace("++++ action context : " + e.context) ;
 * }
 * 
 * EventList = {} ;
 * EventList.TEST = "test" ;
 * 
 * var action = new vegas.events.Delegate(this, onAction) ;
 * var debug  = new vegas.events.Delegate(this, onDebug) ;
 * 
 * asgard.APPLICATION.addGlobalEventListener( debug ) ;
 * asgard.GATEWAY.insert( EventList.TEST, action ) ;
 * 
 * }
 * @author eKameleon
 */
if ( asgard.server.Gateway == undefined ) 
{

	/**
	 * Imports 
	 */
	require("asgard.events.GatewayEvent") ;

	/**
	 * Creates a new Gateway instance.
	 */
	asgard.server.Gateway = function () 
	{
		
		if (asgard.GATEWAY != null) 
		{
			throw new vegas.errors.RuntimeError("asgard.server.Gateway constructor is private.") ;
		}
		
		this.controller = this.initController() ;
			
	}
	
	/**
	 * @extends vegas.core.CoreObject
	 */
	asgard.server.Gateway.extend(vegas.core.CoreObject) ;

	/**
	 * Returns {@code true} if the eventName is registered in the Gateway Controller.
	 * @param eventName:String
	 */
	asgard.server.Gateway.prototype.contains = function ( eventName ) /*Boolean*/ 
	{
		return this.controller.containsKey(eventName) ;
	}
 
	/**
	 * Returns the Gateway controller or null. ( default FrontController.getInstance() )
	 * @return the Gateway controller or null.
	 */
	asgard.server.Gateway.prototype.getController = function () {
		
		return this.controller || null ;
		
	}

	/**
	 * Init the Gateway controller.
	 * Override this method to customize initial Gateway controller.
	 */
	asgard.server.Gateway.prototype.initController = function () /*FrontController*/ 
	{
		return new vegas.events.FrontController() ;
	}

	/**
	 * Add a new entry into the Gateway controller.
	 * @param eventName:String
	 * @param listener:EventListener
	 */
	asgard.server.Gateway.prototype.insert = function (eventName /*String*/ , listener /*EventListener*/) 
	{
		if (this.controller == null) 
		{
			this.controller = this.initController() ;
		}
		this.controller.insert(eventName, listener) ;
	}

	/**
	 * Remove an entry into the Gateway controller.
	 * @param eventName:String
	 * @return Void
	 */
	asgard.server.Gateway.prototype.remove = function(eventName /*String*/ ) /*Void*/ 
	{
		if (this.controller != null) 
		{
			this.controller.remove(eventName) ;
		}
	}

	/**
	 * Set the Gateway controller.
	 */
	asgard.server.Gateway.prototype.setController = function ( oController ) 
	{
		if (oController instanceof vegas.events.FrontController) 
		{
			this.controller = oController ;
		}
		else 
		{
			this.controller = null ;
		}
	}

	/**
	 * Singleton
	 */
	asgard.GATEWAY = new asgard.server.Gateway() ;
	
	/**
	 * Shared an event(BasicEvent) with the client or an event type (String)
	 * The method receiveSharedEvent must exist in your NetConnection or NetServerConnection class in the client.
	 */
	/*public*/ Client.prototype.sharedEvent = function ( e )
	{
		this.call( "receiveSharedEvent", null, e ) ;	
	}
	
	/**
	 * Resolve the client calls.
	 */
	/*private*/ Client.prototype.__resolve = function ( eventType /*String*/ ) 
	{
	
		// TODO : si le eventType n'est pas défini, renvoyer vers la connection le problème ???
		
		var controller = asgard.GATEWAY.controller ;
			
		if (controller == null) 
		{
				return null ; // NetConnection.failed.
		}
				
		if ( eventType == "__hashcode__") // hack __hashcode__ property)
		{
			return ; // NetConnection.failed.
		}
			
		var client = this ;
		
		if ( controller.contains(eventType) ) 
		{
			
			var proxy = new vegas.events.Delegate(controller, controller.fireEvent) ;
			
			var f = function () 
			{
				var e ;
				if (arguments[0] instanceof vegas.events.BasicEvent )
				{
					e = arguments[0] ;
					e.setClient( client ) ;
				}
				else
				{
					e = new asgard.events.GatewayEvent( eventType, client, Array.fromArguments(arguments) ) ;
				}
				proxy.addArguments( e ) ;
				proxy.run() ;
			}
			return f ;
		} 
	}

}