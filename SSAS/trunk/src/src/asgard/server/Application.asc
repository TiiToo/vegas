/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** Application
 
	AUTHOR
	
		Name : Application
		type : SSAS
		Package : asgard.server
		Version : 1.0.0.0
		Date :  2006-06-13
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
 
	DESCRIPTION
	
		Singleton.
 
	METHOD SUMMARY
	
	INHERIT
	
		CoreObject → AbstractCoreEventDispatcher → Application
 
	IMPLEMENTS
	
		EventTarget, IEventDispatcher, IFormattable, IHashable
 
 **/

if ( asgard.server.Application == undefined ) {

	// ----o Imports
	
	require("asgard.events.ApplicationEvent") ;

	// ----o Initialize

	asgard._application = application ;

	application = null ;

	// ----o Constructor
	
	asgard.server.Application = function () {
		
		if (asgard.GATEWAY != null) 
			{
			throw new vegas.errors.RuntimeError("asgard.server.Application constructor is private.") ;
			}
		
		this.__constructor__.call(this) ;
		
		var Delegate = vegas.events.Delegate ;
		var ApplicationEvent = asgard.events.ApplicationEvent ;
		
		asgard._application.onAppStart = Delegate.create( this, this._onAppStart ) ;
		asgard._application.onAppStop = Delegate.create( this, this._onAppStop ) ;
		asgard._application.onConnect = Delegate.create( this, this._onConnect ) ;
		asgard._application.onDisconnect = Delegate.create( this, this._onDisconnect ) ;
		
		this._eAccept = new ApplicationEvent( ApplicationEvent.ACCEPT, this) ;
		this._eConnect = new ApplicationEvent( ApplicationEvent.CONNECT, this) ;
		this._eDisconnect = new ApplicationEvent( ApplicationEvent.DISCONNECT, this) ;
		this._eReject = new ApplicationEvent( ApplicationEvent.REJECT, this) ;
		this._eStart = new ApplicationEvent( ApplicationEvent.START, this) ;
		this._eStop = new ApplicationEvent( ApplicationEvent.STOP, this) ;
		
	}
	
	// ----o Inherit
	
	asgard.server.Application.extend(vegas.events.AbstractCoreEventDispatcher) ;

	// ----o Public Methods
	
	asgard.server.Application.prototype.acceptConnection = function ( client ) {
		
		this.notifyAccept(client) ;
		
	}
	
	asgard.server.Application.prototype.notifyAccept = function ( client ) {
		
		asgard._application.acceptConnection( client ) ;
		
		this._eAccept.client = client ;
		this._eAccept.setContext(client.__ARGUMENTS__) ;
		this.dispatchEvent( this._eAccept ) ;
		
	}	

	asgard.server.Application.prototype.notifyReject = function ( client ) {
		
		if (client.__ERROR__ == null) {
			asgard._application.rejectConnection( client ) ;
		} else {
			asgard._application.rejectConnection( client , client.__ERROR__) ;
		}
		
		this._eReject.client = client ;
		this._eReject.setContext(client.__ARGUMENTS__) ;
		this.dispatchEvent( this._eReject ) ;
		
	}

	asgard.server.Application.prototype.rejectConnection = function ( client ) {
		
		this.notifyReject(client) ;
		
	}

	// ----o Private Methods
	
	asgard.server.Application.prototype._onAppStart = function () {
		
		this.dispatchEvent( this._eStart ) ;
		
	}
	
	asgard.server.Application.prototype._onAppStop = function () {
		
		this._eStop.setContext( Array.fromArguments(arguments) )
		this.dispatchEvent( this._eStop ) ;
		
	}

	asgard.server.Application.prototype._onConnect = function (client) {
		
		client.__ID__ = client.hashCode() ;
		client.__ARGUMENTS__ = Array.fromArguments(arguments) ;
		
		client.__RESPONSE__ = new vegas.data.map.HashMap() ;
		
		client.__PROCESSING__ = true ;
		
		this._eConnect.client = client ;
		this._eConnect.setContext( client.__ARGUMENTS__ ) ;
		this.dispatchEvent( this._eConnect) ;
		
		client.__PROCESSING__ = false ;
		
	}

	asgard.server.Application.prototype._onDisconnect = function (client) {
		
		this._eDisconnect.client = client ;
		this.dispatchEvent( this._eDisconnect ) ;
		
	}
	
	// ----o Encapsulate
	
	asgard.APPLICATION = new asgard.server.Application() ;
	
	// trace ("***** running asgard.server.Application") ;
	
}