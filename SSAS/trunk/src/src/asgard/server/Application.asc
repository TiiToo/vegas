/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * @uthor eKameleon
 */
if ( asgard.server.Application == undefined ) 
{

	/**
	 * Imports
	 */
	require("asgard.events.ApplicationEvent") ;

	/**
	 * Creates a new Application instance. 
	 */
	asgard.server.Application = function () 
	{

		vegas.events.AbstractCoreEventDispatcher.call(this) ;
		
		if (asgard.GATEWAY != null) 
		{
			throw new vegas.errors.RuntimeError("asgard.server.Application constructor is private.") ;
		}

		this.logger = vegas.logging.Log.getLogger("asgard.server.Application") ;
		
		var ApplicationEvent = asgard.events.ApplicationEvent ;
		var Delegate = vegas.events.Delegate ;
		
		application.onAppStart = Delegate.create( this, this._onAppStart ) ;
		application.onAppStop = Delegate.create( this, this._onAppStop ) ;
		application.onConnect = Delegate.create( this, this._onConnect ) ;
		application.onDisconnect = Delegate.create( this, this._onDisconnect ) ;
		
	}
	
	/**
	 * Inherit
	 */
	asgard.server.Application.extend(vegas.events.AbstractCoreEventDispatcher) ;

	/**
	 * Accept the connection of the client. 
	 */
	asgard.server.Application.prototype.acceptConnection = function ( client ) 
	{
		try 
		{
			if (client != null) 
			{
				this.notifyAccept(client) ;
			} 
			else
			{
				throw new vegas.errors.IllegalArgumentError("Application.acceptConnection 'client' not must be 'null' or 'undefined'.") ;
			}
		}
		catch(e) 
		{
			this.logger.error( e.toString() ) ;
		}
	}

	/**
	 * Notify if a client is accepted.
	 */
	asgard.server.Application.prototype.notifyAccept = function ( client /*Client*/ ) /*void*/ 
	{
		if (client == null) 
		{
			return ;
		}
		application.acceptConnection( client ) ;
		var ApplicationEvent = asgard.events.ApplicationEvent ;
		var eAccept = new ApplicationEvent( ApplicationEvent.ACCEPT, this) ;
		eAccept.client = client ;
		eAccept.setContext( client.__ARGUMENTS__ ) ;
		this.dispatchEvent( eAccept ) ;
	}	

	/**
	 * Notify the connection of a client.
	 */
	asgard.server.Application.prototype.notifyConnect = function ( client /*Client*/ , context /*Object*/ ) /*void*/
	{
		var ApplicationEvent = asgard.events.ApplicationEvent ;
		var eConnect = new ApplicationEvent( ApplicationEvent.CONNECT, this) ;
		eConnect.client = client ;
		eConnect.setContext( context ) ;
		this.dispatchEvent( eConnect) ;	
	}
	
	/**
	 * Notify the disconnection of a client.
	 */
	asgard.server.Application.prototype.notifyDisconnect = function ( client /*Client*/ ) /*void*/
	{
		var ApplicationEvent = asgard.events.ApplicationEvent ;
		var eDisconnect = new ApplicationEvent( ApplicationEvent.DISCONNECT, this) ;
		eDisconnect.client = client ;
		this.dispatchEvent( eDisconnect ) ;
	}
	
	/**
	 * Notify the reject connection of a client.
	 */
	asgard.server.Application.prototype.notifyReject = function ( client /*Client*/ , error ) /*void*/ 
	{
		
		if (client == null) 
		{
			return ;
		}
		
		if ( client.__ERROR__ == null ) 
		{
			application.rejectConnection( client , error ) ;
		}
		else 
		{
			application.rejectConnection( client , client.__ERROR__ ) ;
		}
		
		var eReject = new asgard.events.ApplicationEvent( asgard.events.ApplicationEvent.REJECT, this ) ;	
		eReject.setClient( client ) ;
		this.dispatchEvent( this.eReject ) ;
		
	}

	/**
	 * Notify the start of the server.
	 */
	asgard.server.Application.prototype.notifyStart = function ( info ) /*void*/ 
	{
		var ApplicationEvent = asgard.events.ApplicationEvent ;
		var eStart = new ApplicationEvent( ApplicationEvent.START, this) ;
		this.dispatchEvent( eStart ) ;
	}

	/**
	 * Notify the stop of the server.
	 */
	asgard.server.Application.prototype.notifyStop = function ( info ) /*void*/ 
	{
		var ApplicationEvent = asgard.events.ApplicationEvent ;
		var eStop = new ApplicationEvent( ApplicationEvent.STOP, this) ;
		eStop.setInfo( info )
		this.dispatchEvent( eStop ) ;
	}
	
	/**
	 * Reject the connection of a client.
	 */
	asgard.server.Application.prototype.rejectConnection = function ( client /*Client*/ , error ) /*void*/ 
	{
		try 
		{
			if (client != null) 
			{
				this.notifyReject(client , error ) ;
			} 
			else
			{
				throw new vegas.errors.IllegalArgumentError("Application.rejectConnection 'client' not must be 'null' or 'undefined'.") ;
			}
		}
		catch(e) 
		{
			this.logger.error ( e.toString() ) ;
		}
	}

	/**
	 * Invoqued if the application start.
	 * @private
	 */
	asgard.server.Application.prototype._onAppStart = function () /*void*/
	{
		this.notifyStart() ;
	}
	
	/**
	 * Invoqued if the application stop.
	 * @private
	 */
	asgard.server.Application.prototype._onAppStop = function ( info ) /*void*/
	{
		this.notifyStop( info ) ;
	}

	/**
	 * Invoqued if a client is connected.
	 * @private
	 */
	asgard.server.Application.prototype._onConnect = function ( client /*Client*/ ) /*void*/
	{
		
		client.__ID__ = client.hashCode() ;
		
		var args = (arguments.length > 0) ? Array.fromArguments(arguments) : null ;
		
		client.__ARGUMENTS__ = args ;
		
		client.__RESPONSE__ = new vegas.data.map.HashMap() ;
		
		client.__PROCESSING__ = true ;
		
		var context = (args.length > 1) ? [].concat(args) : null ;
		if (context != null) 
		{
			context.shift() ;	
		}
		
		this.notifyConnect( client, context ) ;
		
		client.__PROCESSING__ = false ;
		
	}

	/**
	 * Invoqued if a client is disconnected.
	 * @private
	 */
	asgard.server.Application.prototype._onDisconnect = function ( client /*Client*/ ) /*void*/
	{
		this.notifyDisconnect(client) ;
	}
	
	/**
	 * Singleton
	 */
	asgard.APPLICATION = new asgard.server.Application() ;
	
}