/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * This skeletal abstract class provides a easy implementation to creates a main Application class in your server-side FMS application with VEGAS.
 * @author eKameleon
 */
if ( asgard.server.ApplicationListener == undefined ) 
{

	/**
	 * @requires asgard.server.Application.
	 */
	require("asgard.server.Application") ;

	/**
	 * Creates a new ApplicationListener instance.
	 * @param bGlobal the flag to use a global event flow or a local event flow.
	 * @param sChannel the name of the global event flow if the {@code bGlobal} argument is {@code true}.
	 */
	asgard.server.ApplicationListener = function ( bGlobal /*Boolean*/ , sChannel /*String*/ ) 
	{
		
		vegas.events.AbstractCoreEventDispatcher.call( this, bGlobal, sChannel ) ;
		
		var AE = asgard.events.ApplicationEvent ;
		var DE = vegas.events.Delegate ;
		
		asgard.APPLICATION.addEventListener( AE.ACCEPT     , new DE(this, this.onAccept)) ;
		asgard.APPLICATION.addEventListener( AE.CONNECT    , new DE(this, this.onConnect)) ;
		asgard.APPLICATION.addEventListener( AE.DISCONNECT , new DE(this, this.onDisconnect)) ;
		asgard.APPLICATION.addEventListener( AE.REJECT     , new DE(this, this.onReject)) ;
		asgard.APPLICATION.addEventListener( AE.START      , new DE(this, this.onStart)) ;
		asgard.APPLICATION.addEventListener( AE.STOP       , new DE(this, this.onStop)) ;
		
	}

	/**
	 * @extends vegas.events.AbstractCoreEventDispatcher.
	 */
	asgard.server.ApplicationListener.extend( vegas.events.AbstractCoreEventDispatcher ) ;
	
	/**
	 * Invoked when a client successfully connects to the application.
	 */
	asgard.server.ApplicationListener.prototype.onAccept = function ( e /*ApplicationEvent*/ ) 
	{
		// override
	}
	
	/**
	 * Invoked when a client connects to the application.
	 */
	asgard.server.ApplicationListener.prototype.onConnect = function ( e /*ApplicationEvent*/ ) 
	{
		// override
	}

	/**
	 * Invoked when a client disconnects from the application.
	 */
	asgard.server.ApplicationListener.prototype.onDisconnect = function ( e /*ApplicationEvent*/ ) 
	{
		// override
	}

	/**
	 * Invoked when a client fails to connect to the application.
	 */
	asgard.server.ApplicationListener.prototype.onReject = function ( e /*ApplicationEvent*/ ) 
	{
		// override
	}
	
	/**
	 * Invoked when the application is loaded by the server.
	 */
	asgard.server.ApplicationListener.prototype.onStart = function ( e /*ApplicationEvent*/ ) 
	{
		// override
	}

	/**
	 * Invoked when the application is unloaded by the server.
	 */
	asgard.server.ApplicationListener.prototype.onStop = function ( e /*ApplicationEvent*/ ) 
	{
		// override
	}

}