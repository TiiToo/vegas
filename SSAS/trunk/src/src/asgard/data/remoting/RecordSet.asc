/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** RecordSet
 
	AUTHOR
	
		Name : RecordSet
		type : SSAS
		Package : asgard.data.remoting
		Version : 1.0.0.0
		Date :  2006-08-30
		Author : ekameleon
		URL : http://www.ekameleon.net
		Mail : contact@ekameleon.net
 

	INHERIT
	
		CoreObject → RecordSet
 
	IMPLEMENTS
	
		IFormattable, IHashable, ISerializable
 
*/

// TODO énorme refactoring 
// voir pour le RegisterClass
// Units tests !! 

if (asgard.data.remoting.RecordSet == undefined) 
{
	
	// ----o Imports
	
	require("vegas.util.mvc.AbstractModel") ;
	require("asgard.server.Application") ;
	
	// ----o Constructor
 
 	function RecordSet ( oData ) 
	{
		
		var RecordSetEvent = asgard.events.RecordSetEvent ;
		
		this._eAdd    = new RecordSetEvent(RecordSetEvent.ADD_ITEMS, this) ;
		this._eClear  = new RecordSetEvent(RecordSetEvent.CLEAR_ITEMS, this);
		this._eRemove = new RecordSetEvent(RecordSetEvent.REMOVE_ITEMS, this) ;
		this._eSort   = new RecordSetEvent(RecordSetEvent.SORT_ITEMS, this) ;
		this._eUpdate = new RecordSetEvent(RecordSetEvent.UPDATE_ITEMS, this) ;
		
		this._items = [] ;
		this.mTiles = [] ;
		
		if (this.serverInfo == null) 
		{
			if (this.serverinfo != null) 
			{
				this.serverInfo = this.serverinfo ;
			}
		}
		
		if (oData != null)
		{
		
			if (oData instanceof Array)
			{
				this.mTiles = oData ;
			}	
			else 
			{
				this.parse(o) ;
			}	
			
		}
		
		if ( this.serverInfo ) 
		{
			this.parse( this ) ;	
		}
		
		
	}
 
	asgard.data.remoting.RecordSet = RecordSet ;



	// ----o Inherit

	asgard.data.remoting.RecordSet.extend( vegas.util.mvc.AbstractModel ) ;
 
 	p = RecordSet.prototype = asgard.data.remoting.RecordSet.prototype ;
 
	// ----o Public Properties
	
	p.serverInfo /*Object*/ = null ;
	p.serverinfo /*Object*/ = null ;
	p.serverName /*String*/ = null ;
	
	// ----o Public Methods
	
	p.addItem = function ( oItem /*Object*/ ) /*Void*/ 
	{
		return this.addItemAt( this.size(), oItem ) ; 
	}

	p.addItemAt = function ( index /*Number*/, oItem /*Object*/ ) /*Void*/ 
	{
		var l /*Number*/ = this.size() ;
		var b /*Boolean*/ = true ;
		
		if (index == l) 
		{
		 	this._items[index] = oItem ;	
		}
		else if (index >= 0 && index < l ) 
		{
			this._items.splice(index, 0, oItem) ;
		}
		else 
		{
		 	return null ;	
		}
		
		oItem.__ID__ = this._id ++ ;
		
		this._eAdd.index = index ;
		this.notifyChanged( this._eAdd ) ;
		
		return oItem ;
	}
	
	p.checkLocal = function () /*Boolean*/ 
	{
		try {
			if ( this.isLocal() ) 
			{
				return false ;
			}
			else 
			{
				throw new vegas.errors.Warning(this + " Operation not allowed on partial recordset") ;
			}
		} 
		catch (e /*Warning*/ ) 
		{
			trace(e.toString()) ;
			return true ;
		}
	}
	
	p.clear = function () /*Void*/ 
	{
		this._id = 0 ;
		this.mTiles = new Array();
		this._eClear.removedItems = this._items.splice(0) ;
		this.notifyChanged( this._eClear ) ;
	}
	
	p.contains = function ( oItem /*Object*/ ) /*Boolean*/ 
	{
		return this._items.contains( oItem ) ;
	}
	
	p.editField = function (index /*Number*/, fieldName /*String*/ , value /*Object*/ ) /*void*/ 
	{
		if ( this.checkLocal() )
		{
			return ;
		}
		if (index<0 || index > size()) 
		{
			return ;
		}
		this._items[index][fieldName] = value ;
	}
	
	p.filter = function ( filter/*Function*/, context ) /*RecordSet*/ 
	{
		if ( this.checkLocal() ) 
		{
		  return null ;
		}

		var rs /*RecordSet*/ = new asgard.data.remoting.RecordSet() ;
		rs.setColumnNames( this.mTiles ) ;
	
		var len /*Number*/ = this.size() ;
		
		for( var i /*Number*/ = 0; i < len ; i++) 
		{
			var item /*Object*/ = this.getItemAt(i) ;
			if ((item != null) && (item != 1) && filter(item, context))	
			{
				rs.addItem(item) ;
			}
		}
		
		return rs ;
		
	}
	
	p.getColumnNames = function () /*Array*/ 
	{
		return this.mTiles ;
	}
	
	p.getItemAt = function ( index /*Number*/ ) /*Object*/
	{
		
		if ( this.isEmpty() || (this.index < 0) || (this.id >= this.size()) ) 
		{
			return null ;
		}
		
		if ( this.isLocal() ) 
		{
			return _items[id] ;
		}
		
	}
	
	/**
	 * Returns a unique ID corresponding to the record, at the specified index.
	 * The RecordSet object assigns each record a unique ID. The ID is not part 
	 * of the record; it is a separate item that is associated with the record
	 * internally within the RecordSet object. Unlike a record index, its ID will
	 * not change when the RecordSet object is sorted or when records are added or
	 * deleted. When a record is deleted, its ID is retired and will never be used
	 * again in this RecordSet object.
	 */
	p.getItemID = function ( index /*Number*/) /*Number*/ 
	{
		return this._items[index].__ID__ ;
	}

	p.getItems = function () /*Array*/ 
	{
		return this._items ;
	}
	

	/**
	 * Returns the number of records in the local RecordSet.
	 */
	p.getLocalLength = function () /*Number*/ 
	{
		return this.size() ;
	}

	/**
	 * Returns the number of records in the RecordSet.
	 */
	p.getLength = function () /*Number*/ 
	{
		return this.size() ;
	}	

	/**
	 * Returns the number of records that have been downloaded from the server.
	 * The count does not include records that have been requested but not yet arrived.
	 * For local RecordSet objects, this will always return the same value as the getLocalLength method.
	 */
	p.getNumberAvailable = function () /*Number*/ 
	{
		return this.isLocal() ? this.size() : this.mRecordsAvailable ;
	}	
	
	/**
	 * Returns the number of records available on the server. 
	 */
	p.getRemoteLength = function () /*Number*/ 
	{
		return this.isLocal() ? this.mRecordsAvailable : this.mTotalCount ;
	}
	
	p.indexOf = function ( oItem /*Object*/ ) /*Number*/ 
	{
		return this._items.indexOf(oItem) ;
	}
	
	p.indexOfField = function ( fieldName /*String*/ , value /*Object*/ ) /*Number*/ 
	{
		var l /*Number*/ = this._items.length ;
		while (--l > -1) 
		{
			if (this._items[l][fieldName] == value) 
			{
				return l ;
			}
		}
		return -1 ;
	}	
	
	p.isEmpty = function () /*Boolean*/ 
	{
		return this._items.length = 0 ;
	}

	p.isFullyPopulated = function () /*Boolean*/ 
	{
		return this.isLocal() ;
	}
	
	p.isLocal = function () /*Boolean*/ 
	{
		return this.mRecordSetID == null ;
	}

	p.iterator = function () /*Iterator*/ 
	{
		return new asgard.data.iterator.RecordSetIterator( this ) ; 
	}
	
	p.parse = function ( oRaw ) /*void*/ 
	{
		
		this.clear();
		
		this.mTiles = oRaw.serverInfo.columnNames ;
		
		this.mRecordsAvailable = 0 ;
		
		// implémenter setData ici !
		// this.setData((this.serverInfo.cursor == null) ? 0 : (this.serverInfo.cursor - 1), this.serverInfo.initialData);
		
		var aItems /*Array*/ = oRaw.serverInfo.initialData ;
		
		var l /*Number*/ = aItems.length ;
		for (var i /*Number*/ = 0 ; i<l ; i++) 
		{
			var item /*Object*/ = {} ;
			var aProperties = aItems[i] ;
			var count /*Number*/ = aProperties.length ;
			for (var j /*Number*/ = 0 ; j<count ; j++) 
			{
				item[ this.mTiles[ j ] ] = aProperties[ j ] ;
			}
			this._items.push( item );
		}
		
		// TODO verify this next code.
		
		this.serverInfo = null ;
		this.serverinfo = null ;
		
	}

	p.removeItem = function ( oItem /*Object*/ ) /*Object*/ 
	{
		
		var index /*Number*/ = this.indexOf(oItem) ;
		
		if (index > -1)
		{
			return this.removeItemAt(index) ;
		}
		else
		{
			return null ;
		}
		
	}
	
	p.removeItemAt = function ( index /*Number*/ )
	{
		var ret /*Object*/ = this.getItemAt(index) ;
		this.removeItemsAt( index , 1 );
		return ret;
	}

	p.removeItemsAt = function ( index /*Number*/ , len /*Number*/ ) /*Array*/
	{
		
		var oldItems = this._items.splice(index, len) ;
		
		this._eRemove.firstItem = index ;
		this._eRemove.lastItem = index + len - 1 ;
		this._eRemove.removedItems = oldItems.clone() ;
		
		this.notifyChanged ( this._eRemove ) ;
		
		return oldItems ;
		
	}

	p.removeRange = function ( from/*Number*/, to/*Number*/ ) /*Array*/
	{
		if (isNaN(from)) 
		{
			return null ;
		}
		return this.removeItemsAt( from , to - from ) ;
	}

	/**
	 * Replaces a record in the RecordSet object at the specified index.
	 */
	p.replaceItemAt = function ( index /*Number*/, item /*Object*/ ) /*void*/
	{
		if ( index>=0 && index<=size() ) 
		{
			
			var tmpID = this.getItemID(index) ;
			var tmp = this._items[index] ;
			tmp.__ID__ = undefined ;
			
			this._items[index] = item ;
			this._items[index].__ID__ = tmpID ;
			
			this._eUpdate.index = index ;
			this.notifyChanged( this._eUpdate ) ;
			
		}
		
	}

	p.setItemIndex = function ( oItem /*Object*/ , index /*Number*/ ) /*void*/
	{
		var id /*Number*/ = this.indexOf(oItem) ;
		if (id == -1 || id == index) 
		{
			return ;
		}
		else 
		{
			var tmp = oItem ;
			this._items.splice(id, 1) ;
			this._items.splice(index, 0, tmp) ;
			this._eUpdate.index = index ;
			this.notifyChanged( this._eUpdate ) ;
		}
	}

	p.setColumnNames = function ( ar /*Array*/  ) /*void*/
	{
		this.mTiles = ar.clone() ;	
	}
	
	p.setParentService = function ( service ) /*void*/
	{
	
		this._service = service.getConnection() ;	
		
	}

	/**
	 * Returns the number of records in the RecordSet.
	 */
	p.size = function () /*Number*/
	{
		if (this.isLocal()) 
		{
			return this._items.length ;
		}
		else 
		{
			return this.mTotalCount ;
		}
	}

	p.sortItems = function ( compareFunc /*Function*/ , options /*Number*/ ) /*void*/ 
	{
		if ( this.checkLocal() )
		{
			return ;
		}
		
		this._items.sort(compareFunc, options) ;
		this.notifyChanged(this._eSort) ;
	}
	
	/**
	 * @see Array.prototype.sortOn in vegas.core.Array.asc.
	 */
	p.sortItemsBy = function ( fieldName , options /*Number*/ ) /*void*/ 
	{
		if ( this.checkLocal() )
		{
			return ;
		}
		
		this._items.sortOn( fieldName, options) ;
		this.notifyChanged(this._eSort) ;
	}

	p.toArray = function() /*Array*/ 
	{
		return this._items ;
	}

	p.toSource = function () /*String*/ 
	{
		return "new asgard.data.remoting.RecordSet()" ;
	}

	// ----o Virtual Properties

	vegas.util.factory.PropertyFactory.create( p , "columnNames" , true) ;
	
	vegas.util.factory.PropertyFactory.create( p , "items" , true) ;

	vegas.util.factory.PropertyFactory.create( p , "length" , true) ;
	

	// ----o Private Properties
	
	p.mTiles /*Array*/ ;
	p._items /*Array*/ ;

	p._eAdd /*RecordSetEvent*/ = null ;
	p._eClear /*RecordSetEvent*/ = null ;
	p._eRemove /*RecordSetEvent*/ = null ;
	p._eSort /*RecordSetEvent*/ = null ;
	p._eUpdate /*RecordSetEvent*/ = null ;

	p._id /*Number*/ = 0 ;

	// -- server-associated RecordSet only
	
	p.mDeliveryMode /*String*/ = null ;	
	p.mRecordsAvailable /*Number*/ = null ;
	p.mRecordSetID /*Number*/ = null ;
	p.mRecordSetService /*RemotingService*/ = null ;
	p.mTotalCount /*Number*/ = null ;

	// -- only if deliverymode = "page"
	p.mPageSize /*Number*/ = null ;
	p.mNumPrefetchPages /*Number*/ = null ;
	p.mAllNotified /*Boolean*/ = null ;
	p.mOutstandingRecordCount /*Number*/ = null ;

	p._service = null ;

	// ----o Register Class - AMF deserialization

	application.registerClass( "RecordSet", RecordSet );

	// ----o Encapsulate
 
 	delete p ;
 
	// trace ("***** running asgard.data.remoting.RecordSet") ;

}
