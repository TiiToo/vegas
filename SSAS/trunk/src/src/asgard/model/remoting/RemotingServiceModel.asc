/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * @author eKameleon
 */
if ( asgard.model.remoting.RemotingServiceModel == undefined ) 
{

	/**
	 * Creates a new RemotingServiceModel instance.
	 */
	asgard.model.remoting.RemotingServiceModel = function()
	{
		
		vegas.util.mvc.AbstractModel.call(this) ; // super()
		
		this._buffer = new vegas.data.queue.LinearQueue() ;
		
		var RemotingServiceModelEvent = asgard.events.RemotingServiceModelEvent ;
		
		this._eChange  = new RemotingServiceModelEvent( RemotingServiceModelEvent.CHANGE_REMOTING_SERVICE_MODEL  , null, this ) ;
		this._eClear   = new RemotingServiceModelEvent( RemotingServiceModelEvent.CLEAR_REMOTING_SERVICE_MODEL   , null, this ) ;
		this._eDequeue = new RemotingServiceModelEvent( RemotingServiceModelEvent.DEQUEUE_REMOTING_SERVICE_MODEL , null, this ) ;
		this._eEnqueue = new RemotingServiceModelEvent( RemotingServiceModelEvent.ENQUEUE_REMOTING_SERVICE_MODEL , null, this ) ;
		
	}
	
	/**
	 * Inherit vegas.util.mvc.AbstractModel.
	 */
	asgard.model.remoting.RemotingServiceModel.extend( vegas.util.mvc.AbstractModel ) ;

    /**
     * Clear the model.
     */
	asgard.model.remoting.RemotingServiceModel.prototype.clear = function() /*Void*/
	{
		this._buffer.clear() ;
		this.notifyChanged( this._eClear ) ;	
	}

    /**
     * Dequeue a new RemotingServiceEntry in the model.
     */
	asgard.model.remoting.RemotingServiceModel.prototype.dequeue = function() /*ServiceEntry*/
	{
		if (this._buffer.size() > 0)
		{
			var entry /*ServiceEntry*/ = this._buffer.poll( entry ) ;
			this._eDequeue.setEntry(entry) ;
			this.notifyChanged( this._eDequeue ) ;
		}
	}

    /**
     * Enqueue a new ServiceEntry in the model.
     */
	asgard.model.remoting.RemotingServiceModel.prototype.enqueue = function( entry /*ServiceEntry*/ ) /*Void*/
	{
		if ( (entry != null) && (entry instanceof asgard.net.remoting.RemotingServiceEntry) )
		{
			this._buffer.enqueue( entry ) ;
			this._eEnqueue.setEntry(entry) ;
			this.notifyChanged( this._eEnqueue ) ;
		}	
	}

	/**
	 * Returns the current entry.
	 */
	asgard.model.remoting.RemotingServiceModel.prototype.getCurrentEntry = function() /*ServiceEntry*/ 
	{
		return this._currentEntry ;	
	}

	/**
	 * Return the internal HashMap reference.
	 */
	asgard.model.remoting.RemotingServiceModel.prototype.getQueue = function() /*LinearQueue*/ 
	{
		return this._buffer ;	
	}
	
	/**
	 * Returns 'true' if the model is empty.
	 */
	asgard.model.remoting.RemotingServiceModel.prototype.isEmpty = function() /*Boolean*/ 
	{
		return this._buffer.isEmpty() ;	
	}
	
	/**
	 * Returns the iterator of the model.
	 */
	asgard.model.remoting.RemotingServiceModel.prototype.iterator = function() /*Iterator*/ 
	{
		return this._buffer.iterator() ;	
	}

	/**
	 * Notify a change. 
	 */
	asgard.model.remoting.RemotingServiceModel.prototype.notifyChanged = function( e /*RemotingServiceModelEvent*/ ) /*Void*/ 
	{
		this.dispatchEvent(e) ;
	}

	/**
	 * Sets the current entry.
	 */
	asgard.model.remoting.RemotingServiceModel.prototype.setCurrentEntry = function( entry /*ServiceEntry*/ ) /*void*/ 
	{
		this._currentEntry = entry ;
		this._eChange.setEntry(entry) ;
		this.notifyChanged( this._eChange ) ;
	}

	/**
	 * Returns the size of the model.
	 */
	asgard.model.remoting.RemotingServiceModel.prototype.size = function() /*Number*/ 
	{
		return this._buffer.size() ;	
	}

}