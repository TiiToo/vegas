/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/** Sequencer

	AUTHOR

		Name : Sequencer
		type : SSAS
		Package : asgard.process
		Version : 1.0.0.0
		Author : ekameleon
		Date : 2006-08-28
		URL : http://www.ekameleon.net
		Mail : vegas@ekameleon.net

	METHOD SUMMARY
	
		- addEventListener(eventName:String, listener:EventListener, useCapture:Boolean, priority:Number, autoRemove:Boolean):Void
		
		- addGlobalEventListener(listener:EventListener, priority:Number, autoRemove:Boolean):Void
		
		- dispatchEvent( event , [isQueue, [target, [context]]]):Event
		
		- getEventDispatcher():EventDispatcher 
		
 		- getEventListeners(eventName:String):EventListenerCollection
		
		- getGlobalEventListeners():EventListenerCollection
		
		- getParent():EventDispatcher
		
		- getRegisteredEventNames():Set
		
		- getTarget()
		
		- initEventDispatcher():EventDispatcher 
		
 		- hasEventListener(eventName:String):Boolean
		
		- notifyFinished():Void
		
		- notifyStarted():Void
		
		- removeEventListener(eventName:String, listener, useCapture:Boolean ):EventListener
		
		- removeGlobalEventListener(o):EventListener
		
		- setParent(parent:EventDispatcher):Void
	
	INHERIT

		CoreObject → AbstractCoreEventDispatcher → IAction → Sequencer
 
 	IMPLEMENTS
 
		EventTarget, IEventDispatcher, IFormattable, IHashable 

*/ 

// TODO finir les tests unitaires !!!!

if (asgard.process.Sequencer == undefined) 
{

	// ----o Imports
	
	require("asgard.process.AbstractAction") ;

	// ----o Constructor

	asgard.process.Sequencer = function( ar /*Array*/ ) 
	{ 
		asgard.process.AbstractAction.call(this) ;
		
		this._queue = new vegas.data.queue.LinearQueue() ;
		
		if (ar != null && ar instanceof Array)
		{
			var l /*Number*/ = ar.length ;
			
			if (l>0) 
			{
				for (var i /*Number*/ = 0 ; i < l ; i++) 
				{
					addAction(ar[i]) ;		
				}
			}
		}
		
	}

	// ----o Inherit

	asgard.process.Sequencer.extend( asgard.process.AbstractAction ) ;

	// ----o Public Properties
	
	asgard.process.Sequencer.prototype.looping /*Boolean*/ = false ;

	// ----o Public Methods
	
	asgard.process.Sequencer.prototype.addAction = function ( action /*IAction*/ , isClone /*Boolean*/ ) /*Boolean*/
	{
		
		if ( action == null ) return false ;
		
		var a /*IAction*/ = null ;
		
		var b1 = action instanceof asgard.process.IAction  ;
		var b2 = action.hasOwnProperty("notifyStarted") && action.hasOwnProperty("notifyFinished") ;
		
		if ( b1 || b2 ) 
		{
			a = action ;
		}
		
		if (a == null) return false ;
		
		if ( a.hasOwnProperty("clone") && (isClone == true) )
		{
			a = a.clone() ;	
		} 
		
		var isEnqueue /*Boolean*/ = this._queue.enqueue(a) ;
		
		if (isEnqueue)
		{
			if ( a.hasOwnProperty("addEventListener") ) 
			{
				a.addEventListener( asgard.events.ActionEvent.FINISH , this.run ) ;
				
			}
			else
			{
				throw new vegas.errors.Warning( this + ".addAction(" + action + ") : the action object isn't EventTarget object." ) ;
			}
		}
		return isEnqueue ;
		
	}
	
	asgard.process.Sequencer.prototype.clear = function () /*void*/
	{
		return this._queue.clear() ;	
	}
	
	asgard.process.Sequencer.prototype.clone = function () /*Sequencer*/ 
	{
		return new asgard.process.Sequencer( this.toArray() ) ;
	}

	asgard.process.Sequencer.prototype.run = function () /*void*/ 
	{
		if ( this._queue.size() > 0) 
		{
				
			if ( !this.getRunning() ) 
			{
				this.notifyStarted() ;
				this.setRunning(true) ;
			}

			notifyProgress() ;

			this._cur = _queue.poll() ;
			this._cur.run() ;
				
		}
			else 
			{
				if ( this.getRunning() ) 
				{
					this.setRunning(false) ;
					this.notifyFinished() ;
				}
			}
	}
	
	asgard.process.Sequencer.prototype.size = function () /*Number*/
	{
		return this._queue.size() ;	
	}

	asgard.process.Sequencer.prototype.start = function () /*void*/
	{
		if ( ! this.getRunning() ) 
		{
			this.run() ;
		}
	}
	
	asgard.process.Sequencer.prototype.stop = function ( noEvent /*Boolean*/ ) /*void*/
	{
		if ( this.getRunning() ) 
		{
			this._cur.removeEventListener( asgard.events.ActionEvent.FINISH, this.run) ;
			this.setRunning(false) ;
			if ( noEvent == true ) 
			{
				return ;
			}
			this.notifyStopped() ;
			this.notifyFinished() ;
		}	
	}

	asgard.process.Sequencer.prototype.toArray = function() /*Array*/ 
	{
		return this._queue.toArray() ;	
	}

	// ----o Private Properties
	
	asgard.process.Sequencer.prototype._cur /*Object*/ = null ;
	asgard.process.Sequencer.prototype._queue /*LinearQueue*/ = null ; 

	// ----o Encapsulate
	
	//trace ("***** running asgard.process.Sequencer") ;
	
}