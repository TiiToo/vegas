/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * This class provides a skeletal implementation of the {@code IAction} interface, to minimize the effort required to implement this interface.
 * @author eKameleon
 */
if (pegas.process.AbstractAction == undefined) 
{

	/**
	 * @requires pegas.events.ActionEvent
	 */
	require("pegas.events.ActionEvent") ;

	/**
	 * @requires pegas.process.IAction
	 */
	require("pegas.process.IAction") ;

	/**
	 * Creates a new AbstractAction instance.
	 */
	pegas.process.AbstractAction = function() 
	{ 
		vegas.events.AbstractCoreEventDispatcher.call(this) ;
	}

	// Inherit
	pegas.process.AbstractAction.extend( pegas.process.IAction ) ;

	/**
	 * The flag to determinate if the Action object is looped.
	 */
	pegas.process.AbstractAction.prototype.looping /*Boolean*/ = false ;

	/**
	 * Returns a shallow copy of this object.
	 * @return a shallow copy of this object.
	 */
	pegas.process.AbstractAction.prototype.clone = function () /*AbstractAction*/ 
	{
		return new pegas.process.AbstractAction() ;
	}

	/**
	 * Returns {@code true} if the process is in progress.
	 * @return {@code true} if the process is in progress.
	 */
	pegas.process.AbstractAction.prototype.getRunning = function () /*Boolean*/ 
	{
		return this._isRunning ;
	}

	/**
	 * Notify an ActionEvent when the process is finished.
	 */			
	pegas.process.AbstractAction.prototype.notifyFinished = function () /*Void*/ 
	{
		var e /*ActionEvent*/ = new pegas.events.ActionEvent(pegas.events.ActionEvent.FINISH) ;
		this.dispatchEvent(e) ;
	}

	/**
	 * Notify an ActionEvent when the process is started.
	 */
	pegas.process.AbstractAction.prototype.notifyStarted = function () /*Void*/ 
	{
		
		var e /*ActionEvent*/ = new pegas.events.ActionEvent( pegas.events.ActionEvent.START ) ;
		
		this.dispatchEvent( e ) ;
		
	}

	/**
	 * Run the process.
	 */
	pegas.process.AbstractAction.prototype.run = function () /*Void*/ 
	{
		//
	}
	
	/**
	 * Notify an ActionEvent when the process is changed.
	 * @private
	 */
	/*protected*/ pegas.process.AbstractAction.prototype.notifyChanged = function () /*Void*/ 
	{
		var e /*ActionEvent*/ = new pegas.events.ActionEvent(pegas.events.ActionEvent.CHANGE) ;
		this.dispatchEvent(e) ;
	}

	/**
	 * Notify an ActionEvent when the process is cleared.
	 * @private
	 */
	/*protected*/ pegas.process.AbstractAction.prototype.notifyCleared = function () /*Void*/ 
	{
		var e /*ActionEvent*/ = new pegas.events.ActionEvent(pegas.events.ActionEvent.CLEAR) ;
		this.dispatchEvent(e) ;
	}

	/**
	 * Notify an ActionEvent when an info is dispatched.
	 * @private
	 */
	/*protected*/ pegas.process.AbstractAction.prototype.notifyInfo = function ( oInfo /*Object*/ ) /*Void*/ 
	{
		var e /*ActionEvent*/ = new pegas.events.ActionEvent(pegas.events.ActionEvent.INFO, oInfo) ;
		this.dispatchEvent(e) ;
	}

	/**
	 * Notify an ActionEvent when the process is looped.
	 * @private
	 */
	/*protected*/ pegas.process.AbstractAction.prototype.notifyLooped = function () /*Void*/ 
	{
		var e /*ActionEvent*/ = new pegas.events.ActionEvent(pegas.events.ActionEvent.LOOP) ;
		this.dispatchEvent(e) ;
	}

	/**
	 * Notify an ActionEvent when the process is in progress.
	 * @private
	 */
	/*protected*/ pegas.process.AbstractAction.prototype.notifyProgress = function () /*Void*/ 
	{
		var e /*ActionEvent*/ = new pegas.events.ActionEvent(pegas.events.ActionEvent.PROGRESS) ;
		this.dispatchEvent(e) ;
	}

	/**
	 * Notify an ActionEvent when the process is resumed.
	 * @private
	 */	
	/*protected*/ pegas.process.AbstractAction.prototype.notifyResumed = function () /*Void*/ 
	{
		var e /*ActionEvent*/ = new pegas.events.ActionEvent(pegas.events.ActionEvent.RESUME) ;
		this.dispatchEvent(e) ;
	}

	/**
	 * Notify an ActionEvent when the process is stopped.
	 * @private
	 */
	/*protected*/ pegas.process.AbstractAction.prototype.notifyStopped = function () /*Void*/ 
	{
		var e /*ActionEvent*/ = new pegas.events.ActionEvent(pegas.events.ActionEvent.STOP) ;
		this.dispatchEvent(e) ;
	}

	/**
	 * Notify an ActionEvent when the process is out of time.
	 * @private
	 */
	/*protected*/ pegas.process.AbstractAction.prototype.notifyTimeout = function () /*Void*/ 
	{
		var e /*ActionEvent*/ = new pegas.events.ActionEvent(pegas.events.ActionEvent.TIMEOUT) ;
		this.dispatchEvent(e) ;
	}

	/**
	 * Sets the boolean value of the _isRunning property.
	 * @private
	 */
	/*protected*/ pegas.process.AbstractAction.prototype.setRunning = function (b /*Boolean*/) /*Void*/
	{
		this._isRunning = b ;	
	}

	/**
	 * (read-write) Returns 'true' if the process is in progress. 
	 */
	vegas.util.factory.PropertyFactory.create(pegas.process.AbstractAction.prototype, "running") ;

	pegas.process.AbstractAction.prototype._isRunning /*Boolean*/ = false ;
	
	
}