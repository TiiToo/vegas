/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * A Sequencer of Action process.
 * @author eKameleon
 * @extends pegas.process.AbstractAction
 */
if (pegas.process.Sequencer == undefined) 
{

	/**
	 * @requires pegas.process.AbstractAction
	 */
	require("pegas.process.AbstractAction") ;

	/**
	 * Creates a new Sequencer instance.
	 */
	pegas.process.Sequencer = function( ar /*Array*/ ) 
	{ 
		pegas.process.AbstractAction.call(this) ;
		
		this._queue = new vegas.data.queue.LinearQueue() ;
		
		if (ar != null && ar instanceof Array)
		{
			var l /*Number*/ = ar.length ;
			
			if (l>0) 
			{
				for (var i /*Number*/ = 0 ; i < l ; i++) 
				{
					addAction(ar[i]) ;		
				}
			}
		}
		
	}

	// Inherit
	pegas.process.Sequencer.extend( pegas.process.AbstractAction ) ;

	pegas.process.Sequencer.prototype.looping /*Boolean*/ = false ;

	/**
	 * Adds a process(Action) in the Sequencer.
	 * @return {@code true} if the method success.
	 */
	pegas.process.Sequencer.prototype.addAction = function ( action /*IAction*/ , isClone /*Boolean*/ ) /*Boolean*/
	{
		
		if ( action == null ) return false ;
		
		var a /*IAction*/ = null ;
		
		var b1 = action instanceof pegas.process.IAction  ;
		var b2 = action.hasOwnProperty("notifyStarted") && action.hasOwnProperty("notifyFinished") ;
		
		if ( b1 || b2 ) 
		{
			a = action ;
		}
		
		if (a == null) return false ;
		
		if ( a.hasOwnProperty("clone") && (isClone == true) )
		{
			a = a.clone() ;	
		} 
		
		var isEnqueue /*Boolean*/ = this._queue.enqueue(a) ;
		
		if (isEnqueue)
		{

			if ( a instanceof pegas.process.AbstractAction ||  a.addEventListener instanceof Function ) 
			{
				a.addEventListener( pegas.events.ActionEvent.FINISH , this.run ) ;
				
			}
			else
			{
				throw new vegas.errors.Warning( this + ".addAction(" + action + ") : the action object isn't IAction object." ) ;
			}
		}
		return isEnqueue ;
		
	}

	/**
	 * Removes all process in the Sequencer.
	 */
	pegas.process.Sequencer.prototype.clear = function () /*void*/
	{
		return this._queue.clear() ;	
	}

	/**
	 * Returns a shallow copy of this object.
	 * @return a shallow copy of this object.
	 */
	pegas.process.Sequencer.prototype.clone = function () /*Sequencer*/ 
	{
		return new pegas.process.Sequencer( this.toArray() ) ;
	}

	/**
	 * Launchs the Sequencer with the first element in the internal Queue of this Sequencer.
	 */
	pegas.process.Sequencer.prototype.run = function () /*void*/ 
	{
		if ( this._queue.size() > 0) 
		{
				
			if ( !this.getRunning() ) 
			{
				this.notifyStarted() ;
				this.setRunning(true) ;
			}

			notifyProgress() ;

			this._cur = _queue.poll() ;
			this._cur.run() ;
				
		}
			else 
			{
				if ( this.getRunning() ) 
				{
					this.setRunning(false) ;
					this.notifyFinished() ;
				}
			}
	}

	/**
	 * Returns the numbers of process in this Sequencer.
	 * @return the numbers of process in this Sequencer.
	 */
	pegas.process.Sequencer.prototype.size = function () /*Number*/
	{
		return this._queue.size() ;	
	}

	/**
	 * Starts the Sequencer if is not in progress.
	 */
	pegas.process.Sequencer.prototype.start = function () /*void*/
	{
		if ( ! this.getRunning() ) 
		{
			this.run() ;
		}
	}
	
	/**
	 * Stops the sequencer.
	 */
	pegas.process.Sequencer.prototype.stop = function ( noEvent /*Boolean*/ ) /*void*/
	{
		if ( this.getRunning() ) 
		{
			this._cur.removeEventListener( pegas.events.ActionEvent.FINISH, this.run) ;
			this.setRunning(false) ;
			if ( noEvent == true ) 
			{
				return ;
			}
			this.notifyStopped() ;
			this.notifyFinished() ;
		}	
	}

	/**
	 * Returns the array representation of all process in this Sequencer.
	 * @return the array representation of all process in this Sequencer.
	 */
	pegas.process.Sequencer.prototype.toArray = function() /*Array*/ 
	{
		return this._queue.toArray() ;	
	}

	/**
	 * @private
	 */
	pegas.process.Sequencer.prototype._cur /*Object*/ = null ;

	/**
	 * @private
	 */
	pegas.process.Sequencer.prototype._queue /*LinearQueue*/ = null ; 

}