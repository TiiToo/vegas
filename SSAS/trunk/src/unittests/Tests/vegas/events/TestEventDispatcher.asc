/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2005
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

// TODO Finir les tests sur toutes les mÃ©thodes.

// ---o Constructor

Tests.vegas.events.TestEventDispatcher = function( name ) {
    buRRRn.ASTUce.TestCase.call( this, name ) ;
}

// ----o Inherit

TestEventDispatcher = Tests.vegas.events.TestEventDispatcher ;

TestEventDispatcher.prototype = new buRRRn.ASTUce.TestCase() ;
TestEventDispatcher.prototype.constructor = TestEventDispatcher ;

// ----o Public Methods

TestEventDispatcher.prototype.testConstructor = function () {
	
	var o = new vegas.events.EventDispatcher() ;
	this.assertTrue( o , "ED_01 : constructor.") ;
	
}

TestEventDispatcher.prototype.testInherit = function () {
	
	var o = new vegas.events.EventDispatcher() ;
	var b = o instanceof vegas.events.IEventDispatcher ;
	this.assertTrue( b , "ED_02 : inherit IEventDispatcher.") ;
	
}

TestEventDispatcher.prototype.testHashCode = function () {
	
	var o = new vegas.events.EventDispatcher() ;
	var result = o.hashCode() ;
	this.assertTrue( !isNaN(result) , "ED_03 : hashCode : " + result ) ;
	
}

TestEventDispatcher.prototype.testToSource = function () {

	var o = new vegas.events.EventDispatcher() ;
	var result = o.toSource() ;
	this.assertEquals( result , "null", "ED_04 : toSource().") ;
	
}

TestEventDispatcher.prototype.testToString = function () {

	var o = new vegas.events.EventDispatcher() ;
	var result = o.toString() ;
	this.assertEquals( result , "[EventDispatcher]", "ED_05 : toString() : " + result) ;
	
}

TestEventDispatcher.prototype.testAddChild = function () {

	var o1 = new vegas.events.EventDispatcher() ;
	var o2 = new vegas.events.EventDispatcher() ;
	o1.addChild(o2) ;
	this.assertEquals( o2.parent , o1,  "ED_06 : addChild failed." ) ;
	
}

TestEventDispatcher.prototype.testAddEventListener = function () {

	var o = new vegas.events.EventDispatcher() ;
	o.addEventListener("MY_EVENT", this) ;
	var b = o.hasEventListener("MY_EVENT") ;
	this.assertTrue( b , "ED_06 : addEventListener." ) ;
	
}

TestEventDispatcher.prototype.testAddGlobalEventListener = function () {

	var o = new vegas.events.EventDispatcher() ;
	o.addGlobalEventListener(this) ;
	var listeners = o.getGlobalEventListeners() ;
	this.assertTrue( (listeners.size() > 0) , "ED_07 : addGlobalEventListener." ) ;
	
}

TestEventDispatcher.prototype.testDispatchEvent = function () {
	
	var o = new vegas.events.EventDispatcher() ;
	o.addEventListener("MY_EVENT", this) ;
	var e = o.dispatchEvent( new vegas.events.BasicEvent("MY_EVENT", this, "ED_08 : dispatchEvent") ) ;
	this.assertTrue( e , "ED_08 : dispatchEvent failed." ) ;
	
}

TestEventDispatcher.prototype.testFlush = function () {
	
	try {
		
		var ed = vegas.events.EventDispatcher.getInstance() ;
		vegas.events.EventDispatcher.flush() ;
		
	} catch (e) {
		
		this.fail( "ED_09 : static flush method failed.") ;
		
	}
}

TestEventDispatcher.prototype.testGetEventListeners = function () {
	
	var o = new vegas.events.EventDispatcher() ;
	o.addEventListener("MY_EVENT", this) ;
	var listeners = o.getEventListeners("MY_EVENT") ;
	var result = listeners instanceof vegas.events.EventListenerCollection ;
	this.assertTrue( result , "ED_09 : getEventListeners failed." ) ;
	
}

TestEventDispatcher.prototype.testGetGlobalEventListener = function () {

	var o = new vegas.events.EventDispatcher() ;
	o.addGlobalEventListener(this) ;
	var listeners = o.getGlobalEventListeners() ;
	var result = listeners instanceof vegas.events.EventListenerCollection ;
	this.assertTrue( result , "ED_10 : getGlobalEventListener." ) ;
	
}

TestEventDispatcher.prototype.testGetInstance = function () {

	var o = vegas.events.EventDispatcher.getInstance() ;
	this.assertTrue( o , "ED_11_01 : static getInstance() failed." ) ;
	
	var o = vegas.events.EventDispatcher.getInstance("myDispatcher") ;
	this.assertTrue( o , "ED_11_02 : static getInstance() failed." ) ;
	
	vegas.events.EventDispatcher.flush() ;
	
}

TestEventDispatcher.prototype.testGetRegisteredEventNames = function () {
	
	var o = new vegas.events.EventDispatcher() ;
	o.addEventListener("MY_EVENT", this) ;
	var set = o.getRegisteredEventNames() ;
	this.assertTrue( set,  "ED_12 : getRegisteredEventNames > " + set ) ;
	
}

TestEventDispatcher.prototype.testGetTarget = function () {
	
	var o = new vegas.events.EventDispatcher(this) ;
	var target = o.getTarget() ;
	this.assertEquals( target, this,  "ED_13 : getTarget() failed." ) ;
	
}

TestEventDispatcher.prototype.testHasEventListener = function () {

	var o = new vegas.events.EventDispatcher() ;
	o.addEventListener("MY_EVENT", this) ;
	var b = o.hasEventListener("MY_EVENT") ;
	this.assertTrue( b , "ED_11 : hasEventListener failed." ) ;
	
}

TestEventDispatcher.prototype.testParent = function () {
	
	var o1 = new vegas.events.EventDispatcher() ;
	var o2 = new vegas.events.EventDispatcher() ;
	o2.parent = o1 ;
	this.assertEquals( o2.parent , o1,  "ED_12 : parent property failed." ) ;
	
}

TestEventDispatcher.prototype.testRelease = function () {

	try {
		
		var ed = vegas.events.EventDispatcher.getInstance("myDispatcher") ;
		vegas.events.EventDispatcher.release("myDispatcher") ;
		
	} catch (e) {
		
		this.fail( "ED_13 : static release method failed.") ;
		
	}
	
}


TestEventDispatcher.prototype.testRemoveChild = function () {

	var o1 = new vegas.events.EventDispatcher() ;
	var o2 = new vegas.events.EventDispatcher() ;
	o1.addChild(o2) ;
	o1.removeChild(o2) ;
	this.assertNull( o1.parent ,  "ED_14: removeChild() failed." ) ;
	
}

TestEventDispatcher.prototype.testRemoveEventListener = function () {

	var o = new vegas.events.EventDispatcher() ;
	o.addEventListener("MY_EVENT", this) ;
	var result = o.removeEventListener("MY_EVENT", this) ;
	this.assertTrue( result != null , "ED_15 - removeEventListener failed." ) ;
	
}

TestEventDispatcher.prototype.testRemoveGlobalEventListener = function () {

	var o = new vegas.events.EventDispatcher() ;
	o.addGlobalEventListener(this) ;
	var result = o.removeGlobalEventListener(this) ;
	var listeners = o.getGlobalEventListeners() ;
	var test /*Boolean*/ = (result != null) && (listeners.size() == 0) ;
	this.assertTrue( test , "ED_16 : removeGlobalEventListener." ) ;
	
}

TestEventDispatcher.prototype.testRemoveInstance = function () {

	vegas.events.EventDispatcher.getInstance("myDispatcher") ;
	var b = vegas.events.EventDispatcher.removeInstance("myDispatcher") ;
	this.assertTrue( b, "ED_17 : static removeInstance method failed.") ;
	
}

// ----o Private Methods

TestEventDispatcher.prototype.handleEvent = function ( e ) {
	
	this.assertTrue( e instanceof vegas.events.BasicEvent , e.getContext() ) ;
	
}

// ----o Encapsulate

delete TestEventDispatcher ;
