/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

Tests.vegas.data.iterator.TestPageByPageIterator = function( name ) 
{
    buRRRn.ASTUce.TestCase.call( this, name ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype = new buRRRn.ASTUce.TestCase() ;
Tests.vegas.data.iterator.TestPageByPageIterator.prototype.constructor = Tests.vegas.data.iterator.TestPageByPageIterator ;

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testConstructor = function () 
{
	
	var it = new vegas.data.iterator.PageByPageIterator(2, [2,3,4]) ;
	this.assertNotNull( it , "PBP_01_01 : constructor failed." ) ;
	
	var isThrow = false ;
	
	try
	{
		var it = new vegas.data.iterator.PageByPageIterator(2, null) ;
	}
	catch(e)
	{
		isThrow = true ;
	}
	this.assertTrue( isThrow , "PBP_01_02 : constructor failed with a null Array in argument.") ;

	isThrow = false ;

	try
	{
		var it = new vegas.data.iterator.PageByPageIterator(2, []) ;
	}
	catch(e)
	{
		isThrow = true ;
	}
	this.assertTrue( isThrow , "PBP_01_03 : constructor failed with an empty Array in argument.") ;

	var it = new vegas.data.iterator.PageByPageIterator(null, [2,3,4]) ;
	this.assertEquals( it.getStepSize() , vegas.data.iterator.PageByPageIterator.DEFAULT_STEP, "PBP_01_04 : constructor failed." ) ;
	

}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testInherit = function () 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1, 2, 3]) ;
	this.assertTrue( it instanceof vegas.data.iterator.OrderedIterator , "PBP_02 : inherit vegas.data.iterator.OrderedIterator failed." ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testHashCode = function () 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [2, 3, 1]) ;
	var result = it.hashCode() ;
	this.assertTrue( !isNaN(result) , "PBP_03 : hashCode failed." ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testCurrentPage = function () 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	this.assertEquals( it.currentPage() , 0, "PBP_04_01 : currentPage failed." ) ;
	it.next() ;
	this.assertEquals( it.currentPage() , 1, "PBP_04_02 : currentPage failed." ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testGetStepSize = function()
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	this.assertEquals( it.getStepSize() , 2, "PBP_05_01 : getStepSize() failed." ) ;
	var it = new vegas.data.iterator.PageByPageIterator( null, [1,2,3,4,5,6]) ;
	this.assertEquals( it.getStepSize() , vegas.data.iterator.PageByPageIterator.DEFAULT_STEP, "PBP_05_02 : getStepSize() failed." ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testHasNext = function () 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	this.assertTrue( it.hasNext() , "PBP_05_01 : hasNext() failed : " + it.hasNext() ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testHasPrevious = function () 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	this.assertFalse ( it.hasPrevious() , "PBP_06_01 : hasPrevious() failed." ) ;
	it.next() ; it.next() ;
	this.assertTrue  ( it.hasPrevious() , "PBP_06_02 : hasPrevious() failed." ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testKey = function() 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	this.assertEquals  ( it.key() , 0, "PBP_07_01 : key() failed." ) ;
	it.next() ;
	this.assertEquals  ( it.key() , 1, "PBP_07_02 : key() failed." ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testLastPage = function()
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	it.lastPage() ;
	this.assertEquals  ( it.key() , 4, "PBP_08_01 : lastPage() failed." ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testNext = function () 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	var result = it.next() ;
	this.assertEquals  ( result , [1,2], "PBP_09_01 : next() failed." ) ;
	var result = it.next() ;
	this.assertEquals  ( result , [3,4], "PBP_09_02 : next() failed." ) ;
	var result = it.next() ;
	this.assertEquals  ( result , [5,6], "PBP_09_03 : next() failed." ) ;
	var it = new vegas.data.iterator.PageByPageIterator( 1, [1,2,3,4,5,6]) ;
	var result = it.next() ;
	this.assertEquals  ( result , 1, "PBP_09_04 : next() failed." ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testPageCount = function() 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	this.assertEquals( it.pageCount() , 3, "PBP_10 : pageCount method failed.") ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testPrevious = function () 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	it.lastPage() ;
	var result = it.previous() ;
	this.assertEquals  ( result , [5,6], "PBP_10_01 : previous() failed." ) ;
	var result = it.previous() ;
	this.assertEquals  ( result , [3,4], "PBP_10_02 : previous() failed." ) ;
	var result = it.previous() ;
	this.assertEquals  ( result , [1,2], "PBP_10_03 : previous() failed." ) ;
	var it = new vegas.data.iterator.PageByPageIterator( 1, [1,2,3,4,5,6]) ;
	it.lastPage() ;
	var result = it.previous() ;
	this.assertEquals  ( result , 6, "PBP_10_04 : previous() failed." ) ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testRemove = function() 
{
	var isThrow = false ;
	try
	{
		var it = new vegas.data.iterator.PageByPageIterator(2, [1,2,3]) ;
		it.remove() ;
	}
	catch(e)
	{
		isThrow = true ;
	}
	this.assertTrue( isThrow , "PBP_11 : remove() failed.") ;
}

Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testReset = function() 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	it.next() ;
	it.next() ;
	it.reset() ;
	var result = it.next() ;
	this.assertEquals  ( result , [1,2], "PBP_11 : reset() failed." ) ;
}
	
Tests.vegas.data.iterator.TestPageByPageIterator.prototype.testSeek = function () 
{
	var it = new vegas.data.iterator.PageByPageIterator( 2, [1,2,3,4,5,6]) ;
	it.seek(1) ;
	var result = it.next() ;
	this.assertEquals  ( result , [3,4], "PBP_12 : seek() failed." ) ;
}
