/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

// ---o Constructor

Tests.vegas.data.array.TestTypedArray = function( name ) {
    buRRRn.ASTUce.TestCase.call( this, name ) ;
}

// ----o Inherit

Tests.vegas.data.array.TestTypedArray.prototype = new buRRRn.ASTUce.TestCase() ;
Tests.vegas.data.array.TestTypedArray.prototype.constructor = Tests.vegas.data.array.TestTypedArray ;

Tests.vegas.data.array.TestTypedArray.prototype.testConstructor = function () 
{
	var ar = new vegas.data.array.TypedArray(Number) ;
	this.assertTrue( ar , "TA_01 : constructor failed." ) ;
}

Tests.vegas.data.array.TestTypedArray.prototype.testInherit = function () 
{
	var ar = new vegas.data.array.TypedArray(Number) ;
	this.assertTrue( ar instanceof Array , "TA_02 : inherit Array failed." ) ;
}

Tests.vegas.data.array.TestTypedArray.prototype.testHashCode = function () 
{
	
	var ar = new vegas.data.array.TypedArray(Number, [2, 3, 1]) ;
	var result = ar.hashCode() ;
	this.assertTrue( !isNaN(result) , "TA_03 : hashCode failed." ) ;
	
}

Tests.vegas.data.array.TestTypedArray.prototype.testClone = function () 
{
	var ar = new vegas.data.array.TypedArray(Number, [2, 3, 1]) ;
	var clone = ar.clone() ;
	var l = clone.length ;
	this.assertEquals( clone.length , ar.length, "TA_04_01 : clone failed - not equals size." ) ;
	this.assertEquals( clone.getType() , Number, "TA_04_02 : clone failed - not equals type." ) ;
	for (var i = 0 ; i<l ; i++) 
	{
		this.assertEquals( clone[i], ar[i], "TA_04_03 - clone failed, value in clone '" + clone[i] + "' not equals value in TypedArray '" + ar[i] + "'." ) ;
	}
	
}

Tests.vegas.data.array.TestTypedArray.prototype.testConcat = function () 
{
	
	var ar = new vegas.data.array.TypedArray(Number, [2, 3, 1]) ;
	ar = ar.concat( [4, 5, "test", 6] ) ;
	
	var len /*Number*/ = ar.length ;
	this.assertEquals( len, 6, "TA_05 - concat failed : " + len) ;
	
}

Tests.vegas.data.array.TestTypedArray.prototype.testIterator = function () 
{
	
	var ar = new vegas.data.array.TypedArray(Number, [2, 3, 1]) ;
	var it = ar.iterator() ;
	this.assertTrue( it.hasNext() , "TA_06 - iterator failed.") ;
	
}

Tests.vegas.data.array.TestTypedArray.prototype.testGetType = function() 
{

	var ar = new vegas.data.array.TypedArray(Number, [2, 3, 1]) ;
	this.assertEquals( ar.getType(), Number, "TA_07 - getType failed.") ;
	
}

Tests.vegas.data.array.TestTypedArray.prototype.testPush = function() 
{

	var ar = new vegas.data.array.TypedArray(Number, [2, 3, 1]) ;
	ar.push(4) ;
	this.assertEquals( ar[3], 4, "TA_08_01 - push failed with good type value.") ;
	
	try 
	{
		
		ar.push("test") ;
		
		this.fail("TA_08_02 - push failed with bad type value.") ;
		
	}
	catch ( e ) 
	{
		
		this.assertTrue(e instanceof vegas.errors.TypeMismatchError, "TA_08_03 - push failed with bad type value.") ;
		
	}
	
}

Tests.vegas.data.array.TestTypedArray.prototype.testSetType = function() 
{

	var ar = new vegas.data.array.TypedArray(Number, [2, 3, 1]) ;
	ar.setType(String) ;
	
	this.assertEquals(ar.length, 0, "TA_09_01 - setType failed, array length must be 0.") ;
	
	this.assertEquals(ar.getType(), String, "TA_09_02 - setType failed, type must be String : " + ar.getType()) ;
	
}

Tests.vegas.data.array.TestTypedArray.prototype.testSupports = function() 
{

	var ar = new vegas.data.array.TypedArray(Number) ;
	
	var b = ar.supports(3) ;
	
	this.assertTrue(b, "TA_10_01 - supports(3) must return true.") ;
	
	var b = ar.supports("test") ;
	
	this.assertFalse(b, "TA_10_02 - supports('test') must return false.") ;
	
}

Tests.vegas.data.array.TestTypedArray.prototype.testToSource = function() 
{

	var ar = new vegas.data.array.TypedArray(Number, [2,3,4]) ;
	
	var source = ar.toSource() ;
	
	this.assertEquals( source, "new vegas.data.array.TypedArray(Number,[2,3,4])", "TA_11 - toSource failed : " + source) ;
	
}


Tests.vegas.data.array.TestTypedArray.prototype.testUnshift = function() 
{

	var ar = new vegas.data.array.TypedArray(Number, [2,3,4]) ;
	
	var result = ar.unshift(0) ;
	
	this.assertEquals( ar.length , 4, "TA_12_01 - unshift failed, not equals size." ) ;
	
	try 
	{
		
		ar.unshift("test") ;
		this.fail("TA_12_02 - unshift failed with bad type value.") ;
		
	}
	catch ( e ) 
	{
		
		this.assertTrue(e instanceof vegas.errors.TypeMismatchError, "TA_12_03 - unshift failed with bad type value.") ;
		
	}
	
}

Tests.vegas.data.array.TestTypedArray.prototype.testValidate = function() 
{

	var ar = new vegas.data.array.TypedArray(Number) ;
	
	try 
	{
		
		ar.validate("test") ;
		
		this.fail("TA_13_01 - validate failed with bad type value.") ;
		
	}
	catch ( e ) 
	{
		
		this.assertTrue(e instanceof vegas.errors.TypeMismatchError, "TA_13_02 - validate failed with bad type value.") ;
		
	}
	
	
}