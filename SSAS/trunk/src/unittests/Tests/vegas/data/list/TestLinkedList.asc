/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

/**
 * Creates a new TestLinkedList instance.
 * @constructor
 */

Tests.vegas.data.list.TestLinkedList = function( name ) 
{
    buRRRn.ASTUce.TestCase.call( this, name ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype = new buRRRn.ASTUce.TestCase() ;
Tests.vegas.data.list.TestLinkedList.prototype.constructor = Tests.vegas.data.list.TestLinkedList ;

Tests.vegas.data.list.TestLinkedList.prototype.testConstructor = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	this.assertTrue( list , "LINKED_LIST_01 : constructor failed." ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testInherit = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	this.assertTrue( list instanceof vegas.core.CoreObject , "LINKED_LIST_02 : inherit vegas.core.CoreObject failed." ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testHashCode = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	var result = list.hashCode() ;
	this.assertTrue( !isNaN(result) , "LINKED_LIST_03 : hashCode failed." ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testClear = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.clear() ;
	this.assertEquals( list.size() , 0, "LINKED_LIST_04 : clear method failed." ) ;
}


Tests.vegas.data.list.TestLinkedList.prototype.testClone = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	var clone = list.clone() ;
	this.assertEquals( clone.size() , list.size(), "LINKED_LIST_05_01 : clone failed - not equals size." ) ;
	this.assertTrue( clone instanceof vegas.data.list.LinkedList, "LINKED_LIST_05_02 : clone failed - not instanceof LinkedList." ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testContains = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	var b1 = list.contains("item1") ;
	var b2 = list.contains("item3") ;
	this.assertTrue ( b1, "LINKED_LIST_06_01 : contains failed - 'item1' is in the list : " + b1 ) ;
	this.assertFalse( b2, "LINKED_LIST_06_02 : contains failed - 'item3' isn't in the list : " + b2 ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testContainsAll = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	var c1 = new vegas.data.collections.SimpleCollection( ["item1", "item3"] ) ;
	var c2 = new vegas.data.collections.SimpleCollection( ["item1", "item5"] ) ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	var b1 = list.containsAll(c1) ;
	var b2 = list.containsAll(c2) ;
	this.assertTrue ( b1, "LINKED_LIST_07_01 : containsAll(" + c1 + ") failed : " + b1 ) ;
	this.assertFalse( b2, "LINKED_LIST_07_02 : containsAll(" + c2 + ") failed : " + b2 ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testDequeue = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	var b = list.dequeue() ;
	this.assertTrue ( b, "LINKED_LIST_08 : dequeue() failed : " + b ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testElement = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	var e = list.element() ;
	this.assertEquals ( e, "item1", "LINKED_LIST_09 : element() failed : " + e ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testEnqueue = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	list.enqueue("item1") ;
	
	var b = list.enqueue("item2") ;
	this.assertTrue ( b, "LINKED_LIST_10_01 : enqueue() failed : " + b ) ;
	
	var size = list.size() ;
	this.assertEquals ( size , 2, "LINKED_LIST_10_02 : enqueue() failed, the size of the list isn't good : " + size ) ;
	
	var first = list.getFirst() ;
	this.assertEquals ( first, "item1", "LINKED_LIST_10_03 : enqueue() failed the first item isn't the good element : " + first ) ;

	var last = list.getLast() ;
	this.assertEquals ( last, "item2", "LINKED_LIST_10_04 : enqueue() failed the last item isn't the good element : " + last ) ;
		
}

Tests.vegas.data.list.TestLinkedList.prototype.testEquals = function () 
{
	
	var list1 = new vegas.data.list.LinkedList() ;
	list1.enqueue("item1") ;
	list1.enqueue("item2") ;

	var list2 = new vegas.data.list.LinkedList() ;
	list2.enqueue("item1") ;
	list2.enqueue("item2") ;

	var b = list1.equals(list2) ;
	
	this.assertTrue ( b, "LINKED_LIST_11 : equals() failed, the 2 lists are different : " + list1 + " and " + list2 ) ;
	
}

Tests.vegas.data.list.TestLinkedList.prototype.testGet = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.enqueue("item1") ;
	list.enqueue("item2") ;
	var e = list.get(1) ;
	this.assertEquals ( e, "item2" , "LINKED_LIST_12 : get() failed at the index 1 the value is : " + e) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testGetFirst = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.enqueue("item1") ;
	list.enqueue("item2") ;
	var e = list.getFirst() ;
	this.assertEquals ( e, "item1" , "LINKED_LIST_13 : getFirst() failed at the first index the value is : " + e) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testGetHeader = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.enqueue("item1") ;
	list.enqueue("item2") ;
	var h = list.getHeader() ;
	this.assertTrue ( h instanceof vegas.data.list.LinkedListEntry , "LINKED_LIST_14 : getHeader() failed : " + h) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testGetLast = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.enqueue("item1") ;
	list.enqueue("item2") ;
	var e = list.getLast() ;
	this.assertEquals ( e, "item2" , "LINKED_LIST_15 : getLast() failed at the last index the value is : " + e) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testGetModCount = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.enqueue("item1") ;
	list.enqueue("item2") ;
	var count = list.getModCount() ;
	this.assertEquals ( count, 2 , "LINKED_LIST_16 : getModCount() failed.") ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testIndexOf = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.enqueue("item1") ;
	list.enqueue("item2") ;
	var index = list.indexOf("item2") ;
	this.assertEquals ( index, 1 , "LINKED_LIST_17 : indexOf('item2') in " + list + " failed : " + index) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testInsert = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	
	var b = list.insert("item2") ;
	this.assertTrue ( b, "LINKED_LIST_18_01 : insert() failed : " + b ) ;
	
	var size = list.size() ;
	this.assertEquals ( size , 2, "LINKED_LIST_18_02 : insert() failed, the size of the list isn't good : " + size ) ;
	
	var first = list.getFirst() ;
	this.assertEquals ( first, "item1", "LINKED_LIST_18_03 : insert() failed the first item isn't the good element : " + first ) ;

	var last = list.getLast() ;
	this.assertEquals ( last, "item2", "LINKED_LIST_18_04 : insert() failed the last item isn't the good element : " + last ) ;
		
}

Tests.vegas.data.list.TestLinkedList.prototype.testInsertAll = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	var c = new vegas.data.collections.SimpleCollection( ["item1", "item2", "item3"] ) ;
	var b = list.insertAll(c) ;
	this.assertTrue ( b, "LINKED_LIST_19 : insertAll(" + c + ") failed : " + b ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testInsertAllAt = function () 
{
	var c = new vegas.data.collections.SimpleCollection( ["item1", "item2", "item3"] ) ;
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item0") ;
	var b = list.insertAllAt(1, c) ;
	this.assertTrue ( b, "LINKED_LIST_20 : insertAllAt(" + 1 + "," + c + ") failed : " + b ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testInsertAt = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item0") ;
	list.insert("item2") ;
	list.insertAt(1, "item1") ;
	var item = list.get(1) ;
	this.assertEquals( item, "item1", "LINKED_LIST_21 : insertAt(" + 1 + ",'item1') failed." ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testInsertFirst = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item2") ;
	list.insertFirst("item1") ;
	var item = list.get(0) ;
	this.assertEquals( item, "item1", "LINKED_LIST_22 : insertFirst('item1') failed : " + item ) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testInsertLast = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insertLast("item2") ;
	var item = list.get(1) ;
	this.assertEquals( item, "item2", "LINKED_LIST_23 : insertLast('item2') failed : " + item ) ;
}


Tests.vegas.data.list.TestLinkedList.prototype.testIsEmpty = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	var b = list.isEmpty() ;
	this.assertTrue( b , "LINKED_LIST_24_01 : isEmpty() failed, list size : " + list.size())
	list.insert("item1") ;
	var b = list.isEmpty() ;
	this.assertFalse( b , "LINKED_LIST_24_02  : isEmpty() failed, list size : " + list.size())
}

Tests.vegas.data.list.TestLinkedList.prototype.testIterator = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	
	var it = list.iterator() ;
	this.assertFalse( it.hasNext() , "LINKED_LIST_25_01 : iterator() failed.") ;
	
	list.insert("item1") ;
	var it = list.iterator() ;
	this.assertTrue( it.hasNext() , "LINKED_LIST_25_02 : iterator() failed.") ;

}

Tests.vegas.data.list.TestLinkedList.prototype.testLastIndexOf = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.enqueue("item1") ;
	list.enqueue("item2") ;
	list.enqueue("item3") ;
	list.enqueue("item4") ;
	var index = list.lastIndexOf("item3") ;
	this.assertEquals ( index, 2 , "LINKED_LIST_26 : lastIndexOf('item3') in " + list + " failed : " + index) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testListIterator = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	
	var it = list.listIterator(2) ;
	
	this.assertTrue( it.hasPrevious() , "LINKED_LIST_27_01 : listIterator() failed : " + it.hasPrevious() ) ;

}

Tests.vegas.data.list.TestLinkedList.prototype.testPeek = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	
	var e = list.peek() ;
	this.assertEquals( e, "item1", "LINKED_LIST_28_01 : peek() failed : " + e ) ;
	this.assertEquals( list.size(), 3, "LINKED_LIST_28_02 : peek() failed, the list size change : " + list.size() ) ;

}

Tests.vegas.data.list.TestLinkedList.prototype.testPoll = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	
	var e = list.poll() ;
	this.assertEquals( e, "item1", "LINKED_LIST_28_01 : poll() failed : " + e ) ;
	this.assertEquals( list.size(), 2, "LINKED_LIST_28_02 : peek() failed, the list size must change : " + list.size() ) ;

}

Tests.vegas.data.list.TestLinkedList.prototype.testRemove = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	
	var b = list.remove("item2") ;
	this.assertTrue( b, "LINKED_LIST_29_01, remove failed : " + b) ;
	this.assertEquals( list.size(), 2, "LINKED_LIST_29_02 : remove() failed, the list size must change : " + list.size() ) ;

}

Tests.vegas.data.list.TestLinkedList.prototype.testRemoveAll = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	
	var b ;
	
	b = list.removeAll() ;
	this.assertFalse( b, "LINKED_LIST_30_01, removeAll failed : " + b) ;
	
	b = list.removeAll(new vegas.data.collections.SimpleCollection( ["item1", "item2"] ) ) ;
	
	this.assertTrue( b, "LINKED_LIST_30_02, removeAll failed : " + b) ;
	this.assertEquals( list.size(), 1, "LINKED_LIST_30_03, removeAll() failed, the list size must change : " + list.size() ) ;

}

Tests.vegas.data.list.TestLinkedList.prototype.testRemoveAt = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	
	var b = list.removeAt(1) ;
	this.assertTrue( b, "LINKED_LIST_31_01, removeAt(" + 1 + ") failed : " + b) ;

}

Tests.vegas.data.list.TestLinkedList.prototype.testRemovesAt = function () 
{
	
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	list.insert("item4") ;
	list.insert("item5") ;
	
	list.removesAt(1, 3) ;
	this.assertEquals( list.size(), 2, "LINKED_LIST_32, removesAt(" + 1 + "," + 3 + ") failed : " + list) ;

}


Tests.vegas.data.list.TestLinkedList.prototype.testRetainAll = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	list.insert("item4") ;
	list.insert("item5") ;
	
	var c = new vegas.data.collections.SimpleCollection( ["item2", "item4"] ) ;
	var b =list.retainAll( c ) ;
	this.assertTrue( b, "LINKED_LIST_33, retainAll(" + c + ") failed : " + list + ", result : " + b) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testSetAt = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	
	var old = list.setAt( 1, "ITEM2" ) ;
	this.assertEquals( old, "item2", "LINKED_LIST_34_01, setAt(" + 1 + "," + "ITEM2" + ") failed the old value : " + old) ;

}

Tests.vegas.data.list.TestLinkedList.prototype.testSize = function ()
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	
	var size = list.size() ;
	this.assertEquals( size, 2, "LINKED_LIST_35, size() failed : " + size) ;
}

Tests.vegas.data.list.TestLinkedList.prototype.testSubList = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	list.insert("item4") ;
	list.insert("item5") ;
	
	var sub = list.subList(1, 3) ;
	this.assertTrue( sub instanceof vegas.data.list.ArrayList, "LINKED_LIST_36_01, subList() failed : " + sub) ;
	this.assertEquals( sub.size() , 3, "LINKED_LIST_36_02, subList() failed, the size of the subList no corresponding : " + sub) ;
	
}

Tests.vegas.data.list.TestLinkedList.prototype.testToArray = function () 
{
	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	list.insert("item3") ;
	list.insert("item4") ;
	list.insert("item5") ;
	
	var ar = list.toArray() ;
	this.assertTrue( ar instanceof Array, "LINKED_LIST_37_01, toArray() failed : " + ar) ;
	this.assertEquals( ar.length , list.size(), "LINKED_LIST_37_02, toArray() failed, the size of the subList no corresponding : " + ar.length) ;
	
}


Tests.vegas.data.list.TestLinkedList.prototype.testToSource = function() 
{

	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	var source = list.toSource() ;
	
	this.assertEquals( source, 'new vegas.data.list.LinkedList(new vegas.data.collections.SimpleCollection(["item1","item2"]))', "LINKED_LIST_38, toSource() failed : " + source) ;
	
}

Tests.vegas.data.list.TestLinkedList.prototype.testToString = function() {

	var list = new vegas.data.list.LinkedList() ;
	list.insert("item1") ;
	list.insert("item2") ;
	var source = list.toString() ;
	
	this.assertEquals( source, '{item1,item2}', "LINKED_LIST_39, toString() failed : " + source) ;
	
}

