/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

// ---o Constructor

Tests.asgard.process.TestAbstractAction = function( name ) 
{
    buRRRn.ASTUce.TestCase.call( this, name ) ;
}

// ----o Inherit

Tests.asgard.process.TestAbstractAction.prototype = new buRRRn.ASTUce.TestCase() ;
Tests.asgard.process.TestAbstractAction.prototype.constructor = Tests.asgard.process.TestAbstractAction ;

// ----o Public Methods

Tests.asgard.process.TestAbstractAction.prototype.testConstructor = function () 
{
	
	var a = new asgard.process.AbstractAction() ;
	this.assertTrue( a instanceof asgard.process.AbstractAction , "AA_01 - constructor failed." ) ;
	
}

Tests.asgard.process.TestAbstractAction.prototype.testInherit = function () 
{
	
	var a = new asgard.process.AbstractAction() ;
	this.assertTrue(a instanceof asgard.process.IAction, "AA_02 - inherit failed." ) ;	
}

Tests.asgard.process.TestAbstractAction.prototype.testClone = function () 
{
	
	var e = new asgard.process.AbstractAction() ;
	var clone = e.clone() ;
	this.assertTrue(clone instanceof asgard.process.AbstractAction, "AA_03 - clone failed." ) ;	
}

Tests.asgard.process.TestAbstractAction.prototype.testNotifyStarted = function () 
{

	var a = new asgard.process.AbstractAction() ;
	
	var handleEvent = function ( e ) 
	{
		
		this.assertEquals( e.type , asgard.events.ActionEvent.START, "AA_04 - notifyStarted failed : " + e.type ) ;	
	}
	
	var listener = new vegas.events.Delegate(this, handleEvent) ;
	a.addGlobalEventListener( listener ) ;
	a.notifyStarted() ;
	
}

Tests.asgard.process.TestAbstractAction.prototype.testNotifyFinished = function () 
{

	var a = new asgard.process.AbstractAction() ;
	
	var handleEvent = function ( e ) 
	{
		this.assertEquals( e.type , asgard.events.ActionEvent.FINISH, "AA_05 - notifyFinished failed : " + e.type ) ;	
	}
	
	var listener = new vegas.events.Delegate(this, handleEvent) ;
	a.addGlobalEventListener( listener ) ;
	a.notifyFinished() ;
	
}

Tests.asgard.process.TestAbstractAction.prototype.testNotifyChanged = function () 
{

	var a = new asgard.process.AbstractAction() ;
	
	var handleEvent = function ( e ) 
	{
		this.assertEquals( e.type , asgard.events.ActionEvent.CHANGE, "AA_06 - notifyChanged failed : " + e.type ) ;	
	}
	
	var listener = new vegas.events.Delegate(this, handleEvent) ;
	a.addGlobalEventListener( listener ) ;
	a.notifyChanged() ;
	
}

Tests.asgard.process.TestAbstractAction.prototype.testNotifyCleared = function () 
{

	var a = new asgard.process.AbstractAction() ;
	
	var handleEvent = function ( e ) 
	{
		this.assertEquals( e.type , asgard.events.ActionEvent.CLEAR, "AA_06 - notifyCleared failed : " + e.type ) ;	
	}
	
	var listener = new vegas.events.Delegate(this, handleEvent) ;
	a.addGlobalEventListener( listener ) ;
	a.notifyCleared() ;
	
}

Tests.asgard.process.TestAbstractAction.prototype.testNotifyInfo = function () 
{

	var a = new asgard.process.AbstractAction() ;
	
	var handleEvent = function ( e ) 
	{
		this.assertEquals( e.type , asgard.events.ActionEvent.INFO, "AA_07 - notifyInfo failed : " + e.type ) ;	
		this.assertEquals( e.info , "hello world", "AA_07 - notifyInfo failed with info : " + e.info ) ;	
	}
	
	var listener = new vegas.events.Delegate(this, handleEvent) ;
	a.addGlobalEventListener( listener ) ;
	a.notifyInfo( "hello world" ) ;
	
}

Tests.asgard.process.TestAbstractAction.prototype.testNotifyLooped = function () 
{

	var a = new asgard.process.AbstractAction() ;
	
	var handleEvent = function ( e ) 
	{
		this.assertEquals( e.type , asgard.events.ActionEvent.LOOP, "AA_08 - notifyLooped failed : " + e.type ) ;	
	}
	
	var listener = new vegas.events.Delegate(this, handleEvent) ;
	a.addGlobalEventListener( listener ) ;
	a.notifyLooped() ;
	
}

Tests.asgard.process.TestAbstractAction.prototype.testNotifyProgress = function () 
{

	var a = new asgard.process.AbstractAction() ;
	
	var handleEvent = function ( e ) 
	{
		this.assertEquals( e.type , asgard.events.ActionEvent.PROGRESS, "AA_09 - notifyProgress failed : " + e.type ) ;	
	}
	
	var listener = new vegas.events.Delegate(this, handleEvent) ;
	a.addGlobalEventListener( listener ) ;
	a.notifyProgress() ;
	
}

Tests.asgard.process.TestAbstractAction.prototype.testNotifyResumed = function () 
{

	var a = new asgard.process.AbstractAction() ;
	
	var handleEvent = function ( e ) 
	{
		this.assertEquals( e.type , asgard.events.ActionEvent.RESUME, "AA_10 - notifyResumed failed : " + e.type ) ;	
	}
	
	var listener = new vegas.events.Delegate(this, handleEvent) ;
	a.addGlobalEventListener( listener ) ;
	a.notifyResumed() ;
	
}

Tests.asgard.process.TestAbstractAction.prototype.testNotifyStopped = function () 
{

	var a = new asgard.process.AbstractAction() ;
	
	var handleEvent = function ( e ) 
	{
		this.assertEquals( e.type , asgard.events.ActionEvent.STOP, "AA_11 - notifyStopped failed : " + e.type ) ;	
	}
	
	var listener = new vegas.events.Delegate(this, handleEvent) ;
	a.addGlobalEventListener( listener ) ;
	a.notifyStopped() ;
	
}

// ----o Private Methods

Tests.asgard.process.TestAbstractAction.prototype.handleEvent = function ( e /*Event*/ ) 
{
	
	this.assertTrue( e instanceof asgard.events.ActionEvent , e.getContext() ) ;
	
}