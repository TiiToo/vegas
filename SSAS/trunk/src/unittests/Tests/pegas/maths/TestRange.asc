/*

  The contents of this file are subject to the Mozilla Public License Version
  1.1 (the "License"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at 
  
           http://www.mozilla.org/MPL/ 
  
  Software distributed under the License is distributed on an "AS IS" basis,
  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
  for the specific language governing rights and limitations under the License. 
  
  The Original Code is Vegas Framework.
  
  The Initial Developer of the Original Code is
  ALCARAZ Marc (aka eKameleon)  <vegas@ekameleon.net>.
  Portions created by the Initial Developer are Copyright (C) 2004-2007
  the Initial Developer. All Rights Reserved.
  
  Contributor(s) :
  
*/

Tests.pegas.maths.TestRange = function( name ) 
{
    buRRRn.ASTUce.TestCase.call( this, name ) ;
}

Tests.pegas.maths.TestRange.prototype = new buRRRn.ASTUce.TestCase() ;
Tests.pegas.maths.TestRange.prototype.constructor = Tests.pegas.maths.TestRange ;

Tests.pegas.maths.TestRange.prototype.testConstructor = function () 
{
	var o = new pegas.maths.Range(2, 10) ;
	this.assertTrue( o , "RA_01_01 - constructor failed." ) ;
	this.assertTrue( o instanceof pegas.maths.Range, "RA_01_02 - constructor failed.") ;
}

Tests.pegas.maths.TestRange.prototype.testInherit = function () 
{
	var o = new pegas.maths.Range(2, 10) ;
	this.assertTrue(o instanceof vegas.core.CoreObject, "AA_02 - inherit failed." ) ;	
}

Tests.pegas.maths.TestRange.prototype.testHashCode = function () 
{
	var o = new pegas.maths.Range(2, 10) ;
	var result = o.hashCode() ;
	this.assertTrue( !isNaN(result) , "RA_02 - hashCode() failed : " + result ) ;
}

Tests.pegas.maths.TestRange.prototype.testToSource = function () 
{
	var o = new pegas.maths.Range(2, 10) ;
	var result = o.toSource() ;
	this.assertEquals( result , "new pegas.maths.Range(2,10)", "RA_03 - toSource failed : " + result) ;
}

Tests.pegas.maths.TestRange.prototype.testToString = function () 
{
	var o = new pegas.maths.Range(2, 10) ;
	var result = o.toString() ;
	this.assertEquals( result , "[Range<2,10>]", "RA_04 - toString failed") ;
}

Tests.pegas.maths.TestRange.prototype.testPERCENT_RANGE = function () 
{
	var r = pegas.maths.Range.PERCENT_RANGE ;
	this.assertTrue( r instanceof pegas.maths.Range, "RA_05_00 - PERCENT_RANGE constant failed, this object isn't an instance of pegas.maths.Range.") ;
	this.assertEquals( r.min , 0   , "RA_05_01 - PERCENT_RANGE constant failed with the min attribut.") ;
	this.assertEquals( r.max , 100 , "RA_05_02 - PERCENT_RANGE constant failed with the max attribut.") ;
}

Tests.pegas.maths.TestRange.prototype.testCOLOR_RANGE = function () 
{
	var r = pegas.maths.Range.COLOR_RANGE ;
	this.assertTrue( r instanceof pegas.maths.Range, "RA_06_00 - COLOR_RANGE constant failed, this object isn't an instance of pegas.maths.Range.") ;
	this.assertEquals( r.min , -255  , "RA_06_01 - COLOR_RANGE constant failed with the min attribut.") ;
	this.assertEquals( r.max , 255   , "RA_06_02 - COLOR_RANGE constant failed with the max attribut.") ;
}

Tests.pegas.maths.TestRange.prototype.testUNITY_RANGE = function () 
{
	var r = pegas.maths.Range.UNITY_RANGE ;
	this.assertTrue( r instanceof pegas.maths.Range, "RA_07_00 - UNITY_RANGE constant failed, this object isn't an instance of pegas.maths.Range.") ;
	this.assertEquals( r.min , 0  , "RA_07_01 - UNITY_RANGE constant failed with the min attribut.") ;
	this.assertEquals( r.max , 1  , "RA_07_02 - UNITY_RANGE constant failed with the max attribut.") ;
}

Tests.pegas.maths.TestRange.prototype.testClamp = function() 
{
	var r = new pegas.maths.Range(2, 10) ;
	this.assertEquals( r.clamp(0)  , 2  , "RA_08_01 - clamp method failed with the min value.") ;
	this.assertEquals( r.clamp(20) , 10 , "RA_08_02 - clamp method failed with the max value.") ;
	
}

Tests.pegas.maths.TestRange.prototype.testClone = function() 
{
	//
}

Tests.pegas.maths.TestRange.prototype.testCombine = function()
{
	//
}

Tests.pegas.maths.TestRange.prototype.testContains = function() 
{
	//
}

Tests.pegas.maths.TestRange.prototype.testEquals = function() 
{
	// 
}

Tests.pegas.maths.TestRange.prototype.testExpand = function()
{

}
	
Tests.pegas.maths.TestRange.prototype.testGetCentralValue = function()
{
	//
}

Tests.pegas.maths.TestRange.prototype.testIsOutOfRange = function() 
{
	//	
}

Tests.pegas.maths.TestRange.prototype.testOverlap = function()
{

}

Tests.pegas.maths.TestRange.prototype.testSize = function()
{
	//	
}


