#labels Documentation,Documentation-string
= The HTMLStringFormatter class =

 * [TutorialsVEGAS Returns tutorial index page]
    * [VegasTutorialsString Returns Strings in VEGAS]

== Description ==

The *HTMLStringFormatter* class is used to format strings with html tags. This static tool class is inspired by the non-standard [http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:String#HTML_wrapper_methods HTML wrapper methods] in the native Javascript 1.5 String methods.

Each of the following methods returns a copy of the string wrapped inside an HTML tag. For example :

{{{
import vegas.string.HTMLStringFormatter ;

var str:String = "test" ;
trace( HTMLStringFormatter.bold(str) ; // "<b>test</b>"
}}}

These methods are of limited use, as they provide only a subset of the available HTML tags and attributes. Don't forget the html limitation in the FlashPlayer. Some tags in this static tool class are only use in a real HTML page.

== Examples ==

=== anchor (hypertext target) ===

Creates an HTML *anchor* that is used as a *hypertext target*.

{{{
import vegas.string.HTMLStringFormatter ;

var s:String = HTMLStringFormatter.anchor("contents_anchor", "ekameleon link") ;
trace("anchor : " + s) ; // anchor : <a name="contents_anchor">ekameleon link</a>link</a>
}}}

=== big ===

Causes a string to be displayed in a big font as if it were in a *big tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.big("hello world") ;
trace("big : " + s) ; // big : <big>hello world</big>
}}}

=== blink ===

Causes a string to blink as if it were in a *blink tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.blink("hello world") ;
trace("blink : " + s) ; // blink : <blink>hello world</blink>
}}}

=== bold ===

Causes a string to be displayed as bold as if it were in a *b tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.bold("hello world") ;
trace("bold : " + s) ; // bold : <b>hello world</b>
}}}

=== fixed ===

Causes a string to be displayed in fixed-pitch font as if it were in a *TT tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.fixed("hello world") ;
trace("fixed : " + s) ; // fixed : <tt>hello world</tt>
}}}

=== fontColor ===

Causes a string to be displayed in the specified color as if it were in a *<font color="color"> tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.fontColor("hello world" , "#FF0000" ) ;
trace("fontColor : " + s) ; // fontColor : <font color='#FF0000'>hello world</font>
}}}

=== fontSize ===

Causes a string to be displayed in the specified font size as if it were in a *<font size="size"> tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.fontSize("hello world" , "#FF0000" ) ;
trace("fontSize : " + s) ; // fontSize : <font size='12'>hello world</font>
}}}

=== italics ===

Causes a string to be italic, as if it were in an *I tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.italics("hello world") ;
trace("italics : " + s) ; // italics : <i>hello world</i>
}}}

=== link ===

Creates an *HTML hypertext link* that requests another *URL*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.link("hello world", "http://ekameleon.net/blog", "_blank") ;
trace("link : " + s) ; // link : <a href="http://google.fr" target="_blank">hello world</a>
}}}

=== paragraph ===

Causes a string to be paragraph, as if it were in an *p tag*.

{{{
import vegas.string.HTMLStringFormatter ;

var s:String = HTMLStringFormatter.paragraph("hello world") ;
trace("paragraph : " + s) ; // paragraph : <p>hello world</p>

var s:String = HTMLStringFormatter.paragraph("hello world", "myStyle") ;
trace("paragraph : " + s) ; // paragraph : <p class="myStyle">hello world</p>
}}}

=== small ===

Causes a string to be displayed in a small font, as if it were in a *small tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.small("hello world") ;
trace("small : " + s) ; // small : <small>hello world</small>
}}}

=== span ===

Causes a string to be span, as if it were in an *span tag*.

{{{

import vegas.string.HTMLStringFormatter ;

var s:String = HTMLStringFormatter.span("hello world") ;
trace("span : " + s) ; // span : <span>hello world</span>

var s:String = HTMLStringFormatter.span("hello world", "myStyle") ;
trace("span : " + s) ; // span : <span class="myStyle">hello world</span>

}}}

=== strike ===

Causes a string to be displayed in a strike font, as if it were in a *strike tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.strike("hello world") ;
trace("strike : " + s) ; // small : <strike>hello world</strike>
}}}

=== sub ===

Causes a string to be displayed in a sub font, as if it were in a *sub tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.sub("hello world") ;
trace("sub : " + s) ; // sub : <sub>hello world</sub>
}}}

=== sup ===

Causes a string to be displayed in a sup font, as if it were in a *sup tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.sup("hello world") ;
trace("sup : " + s) ; // sup : <sup>hello world</sup>
}}}

=== underline ===

Causes a string to be displayed in a underline font, as if it were in a *u tag*.

{{{
import vegas.string.HTMLStringFormatter ;
var s:String = HTMLStringFormatter.underline("hello world") ;
trace("underline : " + s) ; // underline : <u>hello world</u>
}}}